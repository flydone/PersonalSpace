/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_Box_Reservation_Functions_STUB_HPP_
#define V1_GREATWALL_TBOX_T_Box_Reservation_Functions_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/GREATWALL/TBOX/TBoxReservationFunctions.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service TBoxReservationFunctions. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class TBoxReservationFunctionsStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual TBoxReservationFunctions {
 public:

    /**
    * Sends a broadcast event for RemoteFOTAReservation. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireRemoteFOTAReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ReservationOperation &_ReservationOperation, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_UpdateTime) = 0;
    /**
    * Sends a broadcast event for RemoteChargeReservation. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireRemoteChargeReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ChargMode &_ChargMode, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_StartTime, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::Repeat &_Repeat, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_EndTime) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockLocalFOTAResParAttribute(bool _lockAccess) {
        if (_lockAccess) {
            localFOTAResParMutex_.lock();
        } else {
            localFOTAResParMutex_.unlock();
        }
    }
    void lockLocalChargeResParAttribute(bool _lockAccess) {
        if (_lockAccess) {
            localChargeResParMutex_.lock();
        } else {
            localChargeResParMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

    std::recursive_mutex localFOTAResParMutex_;
    std::recursive_mutex localChargeResParMutex_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for TBoxReservationFunctions.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TBoxReservationFunctionsStubRemoteEvent
{
public:
    virtual ~TBoxReservationFunctionsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service TBoxReservationFunctions to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TBoxReservationFunctionsStub
    : public virtual CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>
{
public:
    typedef std::function<void (TBoxReservationFunctions::ReservationACK _ReservationACK)>LocalChargeReservationReply_t;
    typedef std::function<void (TBoxReservationFunctions::ReservationACK _ReservationACK)>LocalFOTAReservationReply_t;

    virtual ~TBoxReservationFunctionsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }

    /// Provides getter access to the attribute LocalFOTAResPar
    virtual const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalFOTAResParStruct &getLocalFOTAResParAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    void lockLocalFOTAResParAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockLocalFOTAResParAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute LocalChargeResPar
    virtual const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalChargeResParStruct &getLocalChargeResParAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    void lockLocalChargeResParAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockLocalChargeResParAttribute(_lockAccess);
    }

    /// This is the method that will be called on remote calls on the method RemoteFOTAReservation.
    virtual void RemoteFOTAReservation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxReservationFunctions::ReservationACK _ReservationACK) = 0;
    /// This is the method that will be called on remote calls on the method LocalChargeReservation.
    virtual void LocalChargeReservation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxReservationFunctions::ChargMode _ChargMode, TBoxReservationFunctions::TimeArray _StartTime, TBoxReservationFunctions::Repeat _Repeat, TBoxReservationFunctions::TimeArray _EndTime, LocalChargeReservationReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method LocalFOTAReservation.
    virtual void LocalFOTAReservation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxReservationFunctions::ReservationOperation _ReservationOperation, TBoxReservationFunctions::TimeArray _UpdateTime, LocalFOTAReservationReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method RemoteChargeReservation.
    virtual void RemoteChargeReservation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxReservationFunctions::ReservationACK _ReservationACK) = 0;
    /// Sends a broadcast event for RemoteFOTAReservation.
    virtual void fireRemoteFOTAReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ReservationOperation &_ReservationOperation, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_UpdateTime) {
        auto stubAdapter = CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRemoteFOTAReservationEvent(_ReservationOperation, _UpdateTime);
    }
    /// Sends a broadcast event for RemoteChargeReservation.
    virtual void fireRemoteChargeReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ChargMode &_ChargMode, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_StartTime, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::Repeat &_Repeat, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_EndTime) {
        auto stubAdapter = CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRemoteChargeReservationEvent(_ChargMode, _StartTime, _Repeat, _EndTime);
    }

    
    using CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef TBoxReservationFunctionsStubRemoteEvent RemoteEventType;
    typedef TBoxReservationFunctions StubInterface;
};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_Box_Reservation_Functions_STUB_HPP_
