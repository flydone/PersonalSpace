/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_TELEPHONY_SOMEIP_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_BOX_TELEPHONY_SOMEIP_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxTelephonyProxyBase.hpp>
#include <v1/GREATWALL/TBOX/TBoxTelephonySomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Attribute.hpp>
#include <CommonAPI/SomeIP/Event.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace TBOX {

class TBoxTelephonySomeIPProxy
    : virtual public TBoxTelephonyProxyBase,
    virtual public CommonAPI::SomeIP::Proxy {
public:
    TBoxTelephonySomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~TBoxTelephonySomeIPProxy() { }

    virtual TBoxSimStatusAttribute& getTBoxSimStatusAttribute();
    virtual TBoxSignalStrengthAttribute& getTBoxSignalStrengthAttribute();
    virtual TBoxNetworkProviderAttribute& getTBoxNetworkProviderAttribute();

    virtual TBoxCallStateEvent& getTBoxCallStateEvent();

    virtual void TBoxCallOperation(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::TBoxCallOperation &_TBoxCallOperation, const TBoxTelephony::long64 &_TBoxCallID_In, CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::TBoxResponse &_TBoxResponse, TBoxTelephony::long64 &_TBoxCallID_Out, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxCallOperationAsync(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::TBoxCallOperation &_TBoxCallOperation, const TBoxTelephony::long64 &_TBoxCallID_In, TBoxCallOperationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void TBoxSIMInfor(CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::ICCID &_ICCID, TBoxTelephony::IMEI &_IMEI, TBoxTelephony::IMSI &_IMSI, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxSIMInforAsync(TBoxSIMInforAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void TBoxStartCall(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::long64 &_TBoxCallID_In, CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::TBoxResponse &_TBoxResponse, TBoxTelephony::long64 &_TBoxCallID_Out, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxStartCallAsync(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::long64 &_TBoxCallID_In, TBoxStartCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

private:

    CommonAPI::SomeIP::ObservableAttribute<CommonAPI::SomeIP::ReadonlyAttribute<TBoxSimStatusAttribute, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSimStatusStructDeployment_t>> tBoxSimStatus_;
    CommonAPI::SomeIP::ObservableAttribute<CommonAPI::SomeIP::ReadonlyAttribute<TBoxSignalStrengthAttribute, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSignalStrengthStructDeployment_t>> tBoxSignalStrength_;
    CommonAPI::SomeIP::ObservableAttribute<CommonAPI::SomeIP::ReadonlyAttribute<TBoxNetworkProviderAttribute, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxNetworkProviderStructDeployment_t>> tBoxNetworkProvider_;

     CommonAPI::SomeIP::Event<TBoxCallStateEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxTelephoneNumber, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment_t >, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxCallType, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t >, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxCallState, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallStateDeployment_t >, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::long64, CommonAPI::SomeIP::IntegerDeployment<int64_t> >> tBoxCallState_;

};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_TBOX_T_Box_Telephony_SOMEIP_PROXY_HPP_
