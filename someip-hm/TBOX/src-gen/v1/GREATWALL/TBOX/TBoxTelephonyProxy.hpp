/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_Box_Telephony_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_Box_Telephony_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxTelephonyProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename ... _AttributeExtensions>
class TBoxTelephonyProxy
    : virtual public TBoxTelephony,
      virtual public TBoxTelephonyProxyBase,
      virtual public _AttributeExtensions... {
public:
    TBoxTelephonyProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TBoxTelephonyProxy();

    typedef TBoxTelephony InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute TBoxSimStatus.
     */
    virtual TBoxSimStatusAttribute& getTBoxSimStatusAttribute() {
        return delegate_->getTBoxSimStatusAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBoxSignalStrength.
     */
    virtual TBoxSignalStrengthAttribute& getTBoxSignalStrengthAttribute() {
        return delegate_->getTBoxSignalStrengthAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute TBoxNetworkProvider.
     */
    virtual TBoxNetworkProviderAttribute& getTBoxNetworkProviderAttribute() {
        return delegate_->getTBoxNetworkProviderAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast TBoxCallState.
     */
    virtual TBoxCallStateEvent& getTBoxCallStateEvent() {
        return delegate_->getTBoxCallStateEvent();
    }

    /**
     * Calls TBoxCallOperation with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxCallOperation(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::TBoxCallOperation &_TBoxCallOperation, const TBoxTelephony::long64 &_TBoxCallID_In, CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::TBoxResponse &_TBoxResponse, TBoxTelephony::long64 &_TBoxCallID_Out, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxCallOperation with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxCallOperationAsync(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::TBoxCallOperation &_TBoxCallOperation, const TBoxTelephony::long64 &_TBoxCallID_In, TBoxCallOperationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxSIMInfor with synchronous semantics.
     *
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxSIMInfor(CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::ICCID &_ICCID, TBoxTelephony::IMEI &_IMEI, TBoxTelephony::IMSI &_IMSI, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxSIMInfor with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxSIMInforAsync(TBoxSIMInforAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxStartCall with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxStartCall(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::long64 &_TBoxCallID_In, CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::TBoxResponse &_TBoxResponse, TBoxTelephony::long64 &_TBoxCallID_Out, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxStartCall with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxStartCallAsync(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::long64 &_TBoxCallID_In, TBoxStartCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< TBoxTelephonyProxyBase> delegate_;
};

typedef TBoxTelephonyProxy<> TBoxTelephonyProxyDefault;

namespace TBoxTelephonyExtensions {
    template <template <typename > class _ExtensionType>
    class TBoxSimStatusAttributeExtension {
     public:
        typedef _ExtensionType< TBoxTelephonyProxyBase::TBoxSimStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxTelephonyProxyBase::TBoxSimStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBoxSimStatusAttributeExtension(TBoxTelephonyProxyBase& proxy): attributeExtension_(proxy.getTBoxSimStatusAttribute()) {
        }
    
        inline extension_type& getTBoxSimStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBoxSignalStrengthAttributeExtension {
     public:
        typedef _ExtensionType< TBoxTelephonyProxyBase::TBoxSignalStrengthAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxTelephonyProxyBase::TBoxSignalStrengthAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBoxSignalStrengthAttributeExtension(TBoxTelephonyProxyBase& proxy): attributeExtension_(proxy.getTBoxSignalStrengthAttribute()) {
        }
    
        inline extension_type& getTBoxSignalStrengthAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TBoxNetworkProviderAttributeExtension {
     public:
        typedef _ExtensionType< TBoxTelephonyProxyBase::TBoxNetworkProviderAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxTelephonyProxyBase::TBoxNetworkProviderAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TBoxNetworkProviderAttributeExtension(TBoxTelephonyProxyBase& proxy): attributeExtension_(proxy.getTBoxNetworkProviderAttribute()) {
        }
    
        inline extension_type& getTBoxNetworkProviderAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace TBoxTelephonyExtensions

//
// TBoxTelephonyProxy Implementation
//
template <typename ... _AttributeExtensions>
TBoxTelephonyProxy<_AttributeExtensions...>::TBoxTelephonyProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< TBoxTelephonyProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< TBoxTelephonyProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TBoxTelephonyProxy<_AttributeExtensions...>::~TBoxTelephonyProxy() {
}

template <typename ... _AttributeExtensions>
void TBoxTelephonyProxy<_AttributeExtensions...>::TBoxCallOperation(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::TBoxCallOperation &_TBoxCallOperation, const TBoxTelephony::long64 &_TBoxCallID_In, CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::TBoxResponse &_TBoxResponse, TBoxTelephony::long64 &_TBoxCallID_Out, const CommonAPI::CallInfo *_info) {
    if (!_TBoxCallType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_TBoxCallOperation.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->TBoxCallOperation(_TBoxTelephoneNumber, _TBoxCallType, _TBoxCallOperation, _TBoxCallID_In, _internalCallStatus, _TBoxResponse, _TBoxCallID_Out, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxTelephonyProxy<_AttributeExtensions...>::TBoxCallOperationAsync(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::TBoxCallOperation &_TBoxCallOperation, const TBoxTelephony::long64 &_TBoxCallID_In, TBoxCallOperationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_TBoxCallType.validate()) {
        TBoxTelephony::TBoxResponse TBoxResponse = TBoxTelephony::TBoxResponse::E_ACTIONFAILED;
        TBoxTelephony::long64 TBoxCallID_Out = 0;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, TBoxResponse, TBoxCallID_Out);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_TBoxCallOperation.validate()) {
        TBoxTelephony::TBoxResponse TBoxResponse = TBoxTelephony::TBoxResponse::E_ACTIONFAILED;
        TBoxTelephony::long64 TBoxCallID_Out = 0;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, TBoxResponse, TBoxCallID_Out);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->TBoxCallOperationAsync(_TBoxTelephoneNumber, _TBoxCallType, _TBoxCallOperation, _TBoxCallID_In, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxTelephonyProxy<_AttributeExtensions...>::TBoxSIMInfor(CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::ICCID &_ICCID, TBoxTelephony::IMEI &_IMEI, TBoxTelephony::IMSI &_IMSI, const CommonAPI::CallInfo *_info) {
    delegate_->TBoxSIMInfor(_internalCallStatus, _ICCID, _IMEI, _IMSI, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxTelephonyProxy<_AttributeExtensions...>::TBoxSIMInforAsync(TBoxSIMInforAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->TBoxSIMInforAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxTelephonyProxy<_AttributeExtensions...>::TBoxStartCall(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::long64 &_TBoxCallID_In, CommonAPI::CallStatus &_internalCallStatus, TBoxTelephony::TBoxResponse &_TBoxResponse, TBoxTelephony::long64 &_TBoxCallID_Out, const CommonAPI::CallInfo *_info) {
    if (!_TBoxCallType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->TBoxStartCall(_TBoxTelephoneNumber, _TBoxCallType, _TBoxCallID_In, _internalCallStatus, _TBoxResponse, _TBoxCallID_Out, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxTelephonyProxy<_AttributeExtensions...>::TBoxStartCallAsync(const TBoxTelephony::TBoxTelephoneNumber &_TBoxTelephoneNumber, const TBoxTelephony::TBoxCallType &_TBoxCallType, const TBoxTelephony::long64 &_TBoxCallID_In, TBoxStartCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_TBoxCallType.validate()) {
        TBoxTelephony::TBoxResponse TBoxResponse = TBoxTelephony::TBoxResponse::E_ACTIONFAILED;
        TBoxTelephony::long64 TBoxCallID_Out = 0;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, TBoxResponse, TBoxCallID_Out);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->TBoxStartCallAsync(_TBoxTelephoneNumber, _TBoxCallType, _TBoxCallID_In, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TBoxTelephonyProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TBoxTelephonyProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TBoxTelephonyProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TBoxTelephonyProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TBoxTelephonyProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::GREATWALL::TBOX::TBoxTelephonyProxy,
    _AttributeExtension> {
    typedef typename ::v1::GREATWALL::TBOX::TBoxTelephonyProxy<
            ::v1::GREATWALL::TBOX::TBoxTelephonyExtensions::TBoxSimStatusAttributeExtension<_AttributeExtension>, 
            ::v1::GREATWALL::TBOX::TBoxTelephonyExtensions::TBoxSignalStrengthAttributeExtension<_AttributeExtension>, 
            ::v1::GREATWALL::TBOX::TBoxTelephonyExtensions::TBoxNetworkProviderAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_Box_Telephony_PROXY_HPP_
