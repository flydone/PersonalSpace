/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_Box_System_Functions_STUB_DEFAULT_HPP_
#define V1_GREATWALL_TBOX_T_Box_System_Functions_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/GREATWALL/TBOX/TBoxSystemFunctionsStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace TBOX {

/**
 * Provides a default implementation for TBoxSystemFunctionsStubRemoteEvent and
 * TBoxSystemFunctionsStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT TBoxSystemFunctionsStubDefault
    : public virtual TBoxSystemFunctionsStub {
public:
    COMMONAPI_EXPORT TBoxSystemFunctionsStubDefault();

    COMMONAPI_EXPORT TBoxSystemFunctionsStubRemoteEvent* initStubAdapter(const std::shared_ptr< TBoxSystemFunctionsStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData& getDoubleGPSDataAttribute();
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData& getDoubleGPSDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setDoubleGPSDataAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData _value);
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData& getGPSDataAttribute();
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData& getGPSDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setGPSDataAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData _value);
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo& getGPSFunctionAttribute();
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo& getGPSFunctionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setGPSFunctionAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo _value);

    COMMONAPI_EXPORT virtual void TBoxDTC(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxDTCReply_t _reply);
    COMMONAPI_EXPORT virtual void UpdateFileTransmit(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::UpgradeComplete _UpgradeComplete);
    COMMONAPI_EXPORT virtual void TboxUpgrade(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::UpgradeRequst _UpgradeRequst);
    COMMONAPI_EXPORT virtual void TBoxInfrastructureData(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxInfrastructureDataReply_t _reply);
    COMMONAPI_EXPORT virtual void TBoxAPN2Operation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::TBoxAPN2Operation _TBoxAPN2Operation, TBoxAPN2OperationReply_t _reply);
    COMMONAPI_EXPORT virtual void TBoxLoggingDownload(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::LogDownloadCommand _LogDownloadCommand, TBoxLoggingDownloadReply_t _reply);
    COMMONAPI_EXPORT virtual void TBoxReset(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::TBoxResetOption _TBoxResetOption, TBoxResetReply_t _reply);
    COMMONAPI_EXPORT virtual void TBoxAPN2Status(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxAPN2StatusReply_t _reply);

    COMMONAPI_EXPORT virtual void fireUpgradeProcessEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeProcess &_UpgradeProcess);
    COMMONAPI_EXPORT virtual void fireHeartbeatCheckEvent();
    COMMONAPI_EXPORT virtual void fireTboxUpgradeEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResponse &_UpgradeResponse);
    COMMONAPI_EXPORT virtual void fireTBOXCorrectionRTCMDataEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::TBOXCorrection_RTCM32 &_TBOXCorrection_RTCM32);
    COMMONAPI_EXPORT virtual void fireQXRTCM_StatusInfoEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::QXRTCM_StatusCode &_QXRTCM_StatusCode);
    COMMONAPI_EXPORT virtual void fireUpgradeResultEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResult &_UpgradeResult);

    
protected:
    COMMONAPI_EXPORT virtual bool trySetDoubleGPSDataAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData _value);
    COMMONAPI_EXPORT virtual bool validateDoubleGPSDataAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData &_value);
    COMMONAPI_EXPORT virtual bool trySetGPSDataAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData _value);
    COMMONAPI_EXPORT virtual bool validateGPSDataAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData &_value);
    COMMONAPI_EXPORT virtual bool trySetGPSFunctionAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo _value);
    COMMONAPI_EXPORT virtual bool validateGPSFunctionAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo &_value);
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual TBoxSystemFunctionsStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(TBoxSystemFunctionsStubDefault *_defaultStub);





    private:
        TBoxSystemFunctionsStubDefault *defaultStub_;
    };
protected:
    TBoxSystemFunctionsStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData doubleGPSDataAttributeValue_ {};
    ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData gPSDataAttributeValue_ {};
    ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo gPSFunctionAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_Box_System_Functions_STUB_DEFAULT
