/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/TBOX/TBoxV2XSystemFunctionsStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace TBOX {

TBoxV2XSystemFunctionsStubDefault::TBoxV2XSystemFunctionsStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(TBoxV2XSystemFunctions::getInterfaceVersion()) {
}

const CommonAPI::Version& TBoxV2XSystemFunctionsStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

TBoxV2XSystemFunctionsStubRemoteEvent* TBoxV2XSystemFunctionsStubDefault::initStubAdapter(const std::shared_ptr< TBoxV2XSystemFunctionsStubAdapter> &_adapter) {
    CommonAPI::Stub<TBoxV2XSystemFunctionsStubAdapter, TBoxV2XSystemFunctionsStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions::V2XStatus& TBoxV2XSystemFunctionsStubDefault::getV2XFunctionStatusAttribute() {
     return v2XFunctionStatusAttributeValue_;
 }

 const ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions::V2XStatus& TBoxV2XSystemFunctionsStubDefault::getV2XFunctionStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getV2XFunctionStatusAttribute();
 }

 void TBoxV2XSystemFunctionsStubDefault::setV2XFunctionStatusAttribute(::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions::V2XStatus _value) {
     std::shared_ptr<TBoxV2XSystemFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxV2XSystemFunctionsStubAdapter,
     TBoxV2XSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockV2XFunctionStatusAttribute(true);
         const bool valueChanged = (v2XFunctionStatusAttributeValue_ != _value);
         if (valueChanged) {
             v2XFunctionStatusAttributeValue_ = std::move(_value);
             fireV2XFunctionStatusAttributeChanged(v2XFunctionStatusAttributeValue_);
         }
         stubAdapter->lockV2XFunctionStatusAttribute(false);
     } else {
         const bool valueChanged = trySetV2XFunctionStatusAttribute(std::move(_value));
         if (valueChanged) {
             fireV2XFunctionStatusAttributeChanged(v2XFunctionStatusAttributeValue_);
         }
     }
}

 bool TBoxV2XSystemFunctionsStubDefault::trySetV2XFunctionStatusAttribute(::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions::V2XStatus _value) {
     if (!validateV2XFunctionStatusAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<TBoxV2XSystemFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxV2XSystemFunctionsStubAdapter, TBoxV2XSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockV2XFunctionStatusAttribute(true);
         valueChanged = (v2XFunctionStatusAttributeValue_ != _value);
         v2XFunctionStatusAttributeValue_ = std::move(_value);
         stubAdapter->lockV2XFunctionStatusAttribute(false);
     } else {
         valueChanged = (v2XFunctionStatusAttributeValue_ != _value);
         v2XFunctionStatusAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool TBoxV2XSystemFunctionsStubDefault::validateV2XFunctionStatusAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions::V2XStatus &_value) {
     (void)_value;
     return _value.validate();
 }



void TBoxV2XSystemFunctionsStubDefault::V2XLockSwitch(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxV2XSystemFunctions::V2XLOCKRequest _V2XLOCKRequest, V2XLockSwitchReply_t _reply) {
    (void)_client;
    (void)_V2XLOCKRequest;
    TBoxV2XSystemFunctions::V2XLOCKRespone V2XLOCKRespone = TBoxV2XSystemFunctions::V2XLOCKRespone::E_OFF;
    if (!V2XLOCKRespone.validate()) {
        return;
    }
    _reply(V2XLOCKRespone);
}




TBoxV2XSystemFunctionsStubDefault::RemoteEventHandler::RemoteEventHandler(TBoxV2XSystemFunctionsStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1
