/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/TBOX/TBoxReservationFunctionsStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace TBOX {

TBoxReservationFunctionsStubDefault::TBoxReservationFunctionsStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(TBoxReservationFunctions::getInterfaceVersion()) {
}

const CommonAPI::Version& TBoxReservationFunctionsStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

TBoxReservationFunctionsStubRemoteEvent* TBoxReservationFunctionsStubDefault::initStubAdapter(const std::shared_ptr< TBoxReservationFunctionsStubAdapter> &_adapter) {
    CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalFOTAResParStruct& TBoxReservationFunctionsStubDefault::getLocalFOTAResParAttribute() {
     return localFOTAResParAttributeValue_;
 }

 const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalFOTAResParStruct& TBoxReservationFunctionsStubDefault::getLocalFOTAResParAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getLocalFOTAResParAttribute();
 }

 void TBoxReservationFunctionsStubDefault::setLocalFOTAResParAttribute(::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalFOTAResParStruct _value) {
     trySetLocalFOTAResParAttribute(std::move(_value));
}

 bool TBoxReservationFunctionsStubDefault::trySetLocalFOTAResParAttribute(::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalFOTAResParStruct _value) {
     if (!validateLocalFOTAResParAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<TBoxReservationFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockLocalFOTAResParAttribute(true);
         valueChanged = (localFOTAResParAttributeValue_ != _value);
         localFOTAResParAttributeValue_ = std::move(_value);
         stubAdapter->lockLocalFOTAResParAttribute(false);
     } else {
         valueChanged = (localFOTAResParAttributeValue_ != _value);
         localFOTAResParAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool TBoxReservationFunctionsStubDefault::validateLocalFOTAResParAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalFOTAResParStruct &_value) {
     (void)_value;
     return true;
 }


 const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalChargeResParStruct& TBoxReservationFunctionsStubDefault::getLocalChargeResParAttribute() {
     return localChargeResParAttributeValue_;
 }

 const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalChargeResParStruct& TBoxReservationFunctionsStubDefault::getLocalChargeResParAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getLocalChargeResParAttribute();
 }

 void TBoxReservationFunctionsStubDefault::setLocalChargeResParAttribute(::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalChargeResParStruct _value) {
     trySetLocalChargeResParAttribute(std::move(_value));
}

 bool TBoxReservationFunctionsStubDefault::trySetLocalChargeResParAttribute(::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalChargeResParStruct _value) {
     if (!validateLocalChargeResParAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<TBoxReservationFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxReservationFunctionsStubAdapter, TBoxReservationFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockLocalChargeResParAttribute(true);
         valueChanged = (localChargeResParAttributeValue_ != _value);
         localChargeResParAttributeValue_ = std::move(_value);
         stubAdapter->lockLocalChargeResParAttribute(false);
     } else {
         valueChanged = (localChargeResParAttributeValue_ != _value);
         localChargeResParAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool TBoxReservationFunctionsStubDefault::validateLocalChargeResParAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalChargeResParStruct &_value) {
     (void)_value;
     return true;
 }



void TBoxReservationFunctionsStubDefault::RemoteFOTAReservation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxReservationFunctions::ReservationACK _ReservationACK) {
    (void)_client;
    (void)_ReservationACK;
}

void TBoxReservationFunctionsStubDefault::LocalChargeReservation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxReservationFunctions::ChargMode _ChargMode, TBoxReservationFunctions::TimeArray _StartTime, TBoxReservationFunctions::Repeat _Repeat, TBoxReservationFunctions::TimeArray _EndTime, LocalChargeReservationReply_t _reply) {
    (void)_client;
    (void)_ChargMode;
    (void)_StartTime;
    (void)_Repeat;
    (void)_EndTime;
    TBoxReservationFunctions::ReservationACK ReservationACK = TBoxReservationFunctions::ReservationACK::E_ACTIONFAILED;
    if (!ReservationACK.validate()) {
        return;
    }
    _reply(ReservationACK);
}

void TBoxReservationFunctionsStubDefault::LocalFOTAReservation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxReservationFunctions::ReservationOperation _ReservationOperation, TBoxReservationFunctions::TimeArray _UpdateTime, LocalFOTAReservationReply_t _reply) {
    (void)_client;
    (void)_ReservationOperation;
    (void)_UpdateTime;
    TBoxReservationFunctions::ReservationACK ReservationACK = TBoxReservationFunctions::ReservationACK::E_ACTIONFAILED;
    if (!ReservationACK.validate()) {
        return;
    }
    _reply(ReservationACK);
}

void TBoxReservationFunctionsStubDefault::RemoteChargeReservation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxReservationFunctions::ReservationACK _ReservationACK) {
    (void)_client;
    (void)_ReservationACK;
}


void TBoxReservationFunctionsStubDefault::fireRemoteFOTAReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ReservationOperation &_ReservationOperation, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_UpdateTime) {
    if (!_ReservationOperation.validate()) {
        return;
    }
    TBoxReservationFunctionsStub::fireRemoteFOTAReservationEvent(_ReservationOperation, _UpdateTime);
}
void TBoxReservationFunctionsStubDefault::fireRemoteChargeReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ChargMode &_ChargMode, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_StartTime, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::Repeat &_Repeat, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray &_EndTime) {
    if (!_ChargMode.validate()) {
        return;
    }
    if (!_Repeat.validate()) {
        return;
    }
    TBoxReservationFunctionsStub::fireRemoteChargeReservationEvent(_ChargMode, _StartTime, _Repeat, _EndTime);
}


TBoxReservationFunctionsStubDefault::RemoteEventHandler::RemoteEventHandler(TBoxReservationFunctionsStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1
