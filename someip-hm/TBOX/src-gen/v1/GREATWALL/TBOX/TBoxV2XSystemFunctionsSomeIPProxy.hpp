/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_V2_X_SYSTEM_FUNCTIONS_SOMEIP_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_BOX_V2_X_SYSTEM_FUNCTIONS_SOMEIP_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxV2XSystemFunctionsProxyBase.hpp>
#include <v1/GREATWALL/TBOX/TBoxV2XSystemFunctionsSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Attribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace TBOX {

class TBoxV2XSystemFunctionsSomeIPProxy
    : virtual public TBoxV2XSystemFunctionsProxyBase,
    virtual public CommonAPI::SomeIP::Proxy {
public:
    TBoxV2XSystemFunctionsSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~TBoxV2XSystemFunctionsSomeIPProxy() { }

    virtual V2XFunctionStatusAttribute& getV2XFunctionStatusAttribute();


    virtual void V2XLockSwitch(const TBoxV2XSystemFunctions::V2XLOCKRequest &_V2XLOCKRequest, CommonAPI::CallStatus &_internalCallStatus, TBoxV2XSystemFunctions::V2XLOCKRespone &_V2XLOCKRespone, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> V2XLockSwitchAsync(const TBoxV2XSystemFunctions::V2XLOCKRequest &_V2XLOCKRequest, V2XLockSwitchAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

private:

    class SomeIPv2XFunctionStatus_Attribute : public CommonAPI::SomeIP::ObservableAttribute<CommonAPI::SomeIP::ReadonlyAttribute<V2XFunctionStatusAttribute, ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XStatusDeployment_t>> {
    public:
        template <typename... _A>
            SomeIPv2XFunctionStatus_Attribute(TBoxV2XSystemFunctionsSomeIPProxy &_proxy,
                _A ... arguments) : CommonAPI::SomeIP::ObservableAttribute<CommonAPI::SomeIP::ReadonlyAttribute<V2XFunctionStatusAttribute, ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XStatusDeployment_t>>(
                                        _proxy, arguments...) {}
    };

    SomeIPv2XFunctionStatus_Attribute v2XFunctionStatus_;



};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_TBOX_T_Box_V2_X_System_Functions_SOMEIP_PROXY_HPP_
