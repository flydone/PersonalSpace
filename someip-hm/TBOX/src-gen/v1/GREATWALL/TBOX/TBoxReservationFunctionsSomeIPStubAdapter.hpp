/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_RESERVATION_FUNCTIONS_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GREATWALL_TBOX_T_BOX_RESERVATION_FUNCTIONS_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/GREATWALL/TBOX/TBoxReservationFunctionsStub.hpp>
#include <v1/GREATWALL/TBOX/TBoxReservationFunctionsSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename _Stub = ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub, typename... _Stubs>
class TBoxReservationFunctionsSomeIPStubAdapterInternal
    : public virtual TBoxReservationFunctionsStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> TBoxReservationFunctionsSomeIPStubAdapterHelper;

    ~TBoxReservationFunctionsSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        TBoxReservationFunctionsSomeIPStubAdapterHelper::deinit();
    }



    void fireRemoteFOTAReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ReservationOperation& ReservationOperation, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray& UpdateTime);

    void fireRemoteChargeReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ChargMode& ChargMode, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray& StartTime, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::Repeat& Repeat, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray& EndTime);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
        CommonAPI::Version
    > getTBoxReservationFunctionsInterfaceVersionStubDispatcher;

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
        ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalFOTAResParStruct,
        ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::LocalFOTAResParStructDeployment_t
    > getLocalFOTAResParAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
        ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalChargeResParStruct,
        ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::LocalChargeResParStructDeployment_t
    > getLocalChargeResParAttributeStubDispatcher;

    static CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
        std::tuple< TBoxReservationFunctions::ReservationACK>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t>
    > remoteFOTAReservationStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
        std::tuple< TBoxReservationFunctions::ChargMode, TBoxReservationFunctions::TimeArray, TBoxReservationFunctions::Repeat, TBoxReservationFunctions::TimeArray>,
        std::tuple< TBoxReservationFunctions::ReservationACK>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ChargModeDeployment_t, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::RepeatDeployment_t, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t>
    > localChargeReservationStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
        std::tuple< TBoxReservationFunctions::ReservationOperation, TBoxReservationFunctions::TimeArray>,
        std::tuple< TBoxReservationFunctions::ReservationACK>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationOperationDeployment_t, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t>
    > localFOTAReservationStubDispatcher;
    static CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
        std::tuple< TBoxReservationFunctions::ReservationACK>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t>
    > remoteChargeReservationStubDispatcher;

    TBoxReservationFunctionsSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        TBoxReservationFunctionsSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< TBoxReservationFunctionsStub>(_stub))
    {

                TBoxReservationFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1001) }, &getLocalFOTAResParAttributeStubDispatcher );
                TBoxReservationFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1002) }, &getLocalChargeResParAttributeStubDispatcher );
        
                TBoxReservationFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &remoteFOTAReservationStubDispatcher );
                TBoxReservationFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &localChargeReservationStubDispatcher );
                TBoxReservationFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &localFOTAReservationStubDispatcher );
                TBoxReservationFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x4) }, &remoteChargeReservationStubDispatcher );


        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8002), itsEventGroups, false);
        }
    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
    CommonAPI::Version
    > TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::getTBoxReservationFunctionsInterfaceVersionStubDispatcher(&TBoxReservationFunctionsStub::lockInterfaceVersionAttribute, &TBoxReservationFunctionsStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
    ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalFOTAResParStruct,
    ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::LocalFOTAResParStructDeployment_t
> TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::getLocalFOTAResParAttributeStubDispatcher(
    &TBoxReservationFunctionsStub::lockLocalFOTAResParAttribute,
    &TBoxReservationFunctionsStub::getLocalFOTAResParAttribute, false, &::v1::GREATWALL::TBOX::TBoxReservationFunctions_::LocalFOTAResParStructDeployment);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
    ::v1::GREATWALL::TBOX::TBoxReservationFunctions::LocalChargeResParStruct,
    ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::LocalChargeResParStructDeployment_t
> TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::getLocalChargeResParAttributeStubDispatcher(
    &TBoxReservationFunctionsStub::lockLocalChargeResParAttribute,
    &TBoxReservationFunctionsStub::getLocalChargeResParAttribute, false, &::v1::GREATWALL::TBOX::TBoxReservationFunctions_::LocalChargeResParStructDeployment);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
    std::tuple< TBoxReservationFunctions::ReservationACK>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t>
> TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::remoteFOTAReservationStubDispatcher(
    &TBoxReservationFunctionsStub::RemoteFOTAReservation,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
    std::tuple< TBoxReservationFunctions::ChargMode, TBoxReservationFunctions::TimeArray, TBoxReservationFunctions::Repeat, TBoxReservationFunctions::TimeArray>,
    std::tuple< TBoxReservationFunctions::ReservationACK>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ChargModeDeployment_t, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::RepeatDeployment_t, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t>
> TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::localChargeReservationStubDispatcher(
    &TBoxReservationFunctionsStub::LocalChargeReservation,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ChargModeDeployment_t* >(nullptr), &::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment, static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::RepeatDeployment_t* >(nullptr), &::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment),
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
    std::tuple< TBoxReservationFunctions::ReservationOperation, TBoxReservationFunctions::TimeArray>,
    std::tuple< TBoxReservationFunctions::ReservationACK>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationOperationDeployment_t, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t>
> TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::localFOTAReservationStubDispatcher(
    &TBoxReservationFunctionsStub::LocalFOTAReservation,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationOperationDeployment_t* >(nullptr), &::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment),
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub,
    std::tuple< TBoxReservationFunctions::ReservationACK>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t>
> TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::remoteChargeReservationStubDispatcher(
    &TBoxReservationFunctionsStub::RemoteChargeReservation,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationACKDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
void TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRemoteFOTAReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ReservationOperation& _ReservationOperation, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray& _UpdateTime) {
    CommonAPI::Deployable< TBoxReservationFunctions::ReservationOperation, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationOperationDeployment_t> deployed_ReservationOperation(_ReservationOperation, static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationOperationDeployment_t* >(nullptr));
    CommonAPI::Deployable< TBoxReservationFunctions::TimeArray, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t> deployed_UpdateTime(_UpdateTime, &::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ReservationOperation, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ReservationOperationDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8001),
            false,
             deployed_ReservationOperation 
            ,  deployed_UpdateTime 
    );
}

template <typename _Stub, typename... _Stubs>
void TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRemoteChargeReservationEvent(const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ChargMode& _ChargMode, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray& _StartTime, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::Repeat& _Repeat, const ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray& _EndTime) {
    CommonAPI::Deployable< TBoxReservationFunctions::ChargMode, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ChargModeDeployment_t> deployed_ChargMode(_ChargMode, static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ChargModeDeployment_t* >(nullptr));
    CommonAPI::Deployable< TBoxReservationFunctions::TimeArray, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t> deployed_StartTime(_StartTime, &::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment);
    CommonAPI::Deployable< TBoxReservationFunctions::Repeat, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::RepeatDeployment_t> deployed_Repeat(_Repeat, static_cast< ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::RepeatDeployment_t* >(nullptr));
    CommonAPI::Deployable< TBoxReservationFunctions::TimeArray, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t> deployed_EndTime(_EndTime, &::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxReservationFunctions::ChargMode, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::ChargModeDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxReservationFunctions::Repeat, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::RepeatDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxReservationFunctions::TimeArray, ::v1::GREATWALL::TBOX::TBoxReservationFunctions_::TimeArrayDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8002),
            false,
             deployed_ChargMode 
            ,  deployed_StartTime 
            ,  deployed_Repeat 
            ,  deployed_EndTime 
    );
}

template <typename _Stub = ::v1::GREATWALL::TBOX::TBoxReservationFunctionsStub, typename... _Stubs>
class TBoxReservationFunctionsSomeIPStubAdapter
    : public TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< TBoxReservationFunctionsSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    TBoxReservationFunctionsSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          TBoxReservationFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_TBOX_T_Box_Reservation_Functions_SOMEIP_STUB_ADAPTER_HPP_
