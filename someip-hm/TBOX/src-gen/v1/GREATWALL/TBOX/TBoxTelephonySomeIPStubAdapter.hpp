/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_TELEPHONY_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GREATWALL_TBOX_T_BOX_TELEPHONY_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/GREATWALL/TBOX/TBoxTelephonyStub.hpp>
#include <v1/GREATWALL/TBOX/TBoxTelephonySomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename _Stub = ::v1::GREATWALL::TBOX::TBoxTelephonyStub, typename... _Stubs>
class TBoxTelephonySomeIPStubAdapterInternal
    : public virtual TBoxTelephonyStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> TBoxTelephonySomeIPStubAdapterHelper;

    ~TBoxTelephonySomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        TBoxTelephonySomeIPStubAdapterHelper::deinit();
    }

    void fireTBoxSimStatusAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSimStatusStruct& value);

    void fireTBoxSignalStrengthAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSignalStrengthStruct& value);

    void fireTBoxNetworkProviderAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxNetworkProviderStruct& value);

    void fireTBoxCallStateEvent(const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxTelephoneNumber& TBoxTelephoneNumber, const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxCallType& TBoxCallType, const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxCallState& TBoxCallState, const ::v1::GREATWALL::TBOX::TBoxTelephony::long64& TBoxCallID);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
        CommonAPI::Version
    > getTBoxTelephonyInterfaceVersionStubDispatcher;

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
        ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSimStatusStruct,
        ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSimStatusStructDeployment_t
    > getTBoxSimStatusAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
        ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSignalStrengthStruct,
        ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSignalStrengthStructDeployment_t
    > getTBoxSignalStrengthAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
        ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxNetworkProviderStruct,
        ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxNetworkProviderStructDeployment_t
    > getTBoxNetworkProviderAttributeStubDispatcher;

    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
        std::tuple< TBoxTelephony::TBoxTelephoneNumber, TBoxTelephony::TBoxCallType, TBoxTelephony::TBoxCallOperation, TBoxTelephony::long64>,
        std::tuple< TBoxTelephony::TBoxResponse, TBoxTelephony::long64>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment_t, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallOperationDeployment_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxResponseDeployment_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>>
    > tBoxCallOperationStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
        std::tuple< >,
        std::tuple< TBoxTelephony::ICCID, TBoxTelephony::IMEI, TBoxTelephony::IMSI>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>
    > tBoxSIMInforStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
        std::tuple< TBoxTelephony::TBoxTelephoneNumber, TBoxTelephony::TBoxCallType, TBoxTelephony::long64>,
        std::tuple< TBoxTelephony::TBoxResponse, TBoxTelephony::long64>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment_t, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxResponseDeployment_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>>
    > tBoxStartCallStubDispatcher;

    TBoxTelephonySomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        TBoxTelephonySomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< TBoxTelephonyStub>(_stub))
    {

                TBoxTelephonySomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1001) }, &getTBoxSimStatusAttributeStubDispatcher );
                TBoxTelephonySomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1003) }, &getTBoxSignalStrengthAttributeStubDispatcher );
                TBoxTelephonySomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1002) }, &getTBoxNetworkProviderAttributeStubDispatcher );
        
                TBoxTelephonySomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &tBoxCallOperationStubDispatcher );
                TBoxTelephonySomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &tBoxSIMInforStubDispatcher );
                TBoxTelephonySomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &tBoxStartCallStubDispatcher );

        std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9001), itsEventGroups, true);
            fireTBoxSimStatusAttributeChanged(std::dynamic_pointer_cast< ::v1::GREATWALL::TBOX::TBoxTelephonyStub>(_stub)->getTBoxSimStatusAttribute(clientId));
        }

        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9003), itsEventGroups, true);
            fireTBoxSignalStrengthAttributeChanged(std::dynamic_pointer_cast< ::v1::GREATWALL::TBOX::TBoxTelephonyStub>(_stub)->getTBoxSignalStrengthAttribute(clientId));
        }

        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9002), itsEventGroups, true);
            fireTBoxNetworkProviderAttributeChanged(std::dynamic_pointer_cast< ::v1::GREATWALL::TBOX::TBoxTelephonyStub>(_stub)->getTBoxNetworkProviderAttribute(clientId));
        }

    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
    CommonAPI::Version
    > TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::getTBoxTelephonyInterfaceVersionStubDispatcher(&TBoxTelephonyStub::lockInterfaceVersionAttribute, &TBoxTelephonyStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
    ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSimStatusStruct,
    ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSimStatusStructDeployment_t
> TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::getTBoxSimStatusAttributeStubDispatcher(
    &TBoxTelephonyStub::lockTBoxSimStatusAttribute,
    &TBoxTelephonyStub::getTBoxSimStatusAttribute, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
    ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSignalStrengthStruct,
    ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSignalStrengthStructDeployment_t
> TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::getTBoxSignalStrengthAttributeStubDispatcher(
    &TBoxTelephonyStub::lockTBoxSignalStrengthAttribute,
    &TBoxTelephonyStub::getTBoxSignalStrengthAttribute, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
    ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxNetworkProviderStruct,
    ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxNetworkProviderStructDeployment_t
> TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::getTBoxNetworkProviderAttributeStubDispatcher(
    &TBoxTelephonyStub::lockTBoxNetworkProviderAttribute,
    &TBoxTelephonyStub::getTBoxNetworkProviderAttribute, false, &::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxNetworkProviderStructDeployment);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
    std::tuple< TBoxTelephony::TBoxTelephoneNumber, TBoxTelephony::TBoxCallType, TBoxTelephony::TBoxCallOperation, TBoxTelephony::long64>,
    std::tuple< TBoxTelephony::TBoxResponse, TBoxTelephony::long64>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment_t, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallOperationDeployment_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxResponseDeployment_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>>
> TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::tBoxCallOperationStubDispatcher(
    &TBoxTelephonyStub::TBoxCallOperation,
    false,
    std::make_tuple(&::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment, static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallOperationDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxResponseDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
    std::tuple< >,
    std::tuple< TBoxTelephony::ICCID, TBoxTelephony::IMEI, TBoxTelephony::IMSI>,
    std::tuple< >,
    std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>
> TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::tBoxSIMInforStubDispatcher(
    &TBoxTelephonyStub::TBoxSIMInfor,
    false,
    std::make_tuple(),
    std::make_tuple(&::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSIMInfor_ICCIDDeployment, &::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSIMInfor_IMEIDeployment, &::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSIMInfor_IMSIDeployment));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTelephonyStub,
    std::tuple< TBoxTelephony::TBoxTelephoneNumber, TBoxTelephony::TBoxCallType, TBoxTelephony::long64>,
    std::tuple< TBoxTelephony::TBoxResponse, TBoxTelephony::long64>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment_t, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxResponseDeployment_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>>
> TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::tBoxStartCallStubDispatcher(
    &TBoxTelephonyStub::TBoxStartCall,
    false,
    std::make_tuple(&::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment, static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxResponseDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr)));

template <typename _Stub, typename... _Stubs>
void TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::fireTBoxSimStatusAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSimStatusStruct& value) {
    CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSimStatusStruct, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSimStatusStructDeployment_t> deployedValue(value, static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSimStatusStructDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSimStatusStruct,
                ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSimStatusStructDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x9001),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::fireTBoxSignalStrengthAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSignalStrengthStruct& value) {
    CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSignalStrengthStruct, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSignalStrengthStructDeployment_t> deployedValue(value, static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSignalStrengthStructDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxSignalStrengthStruct,
                ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxSignalStrengthStructDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x9003),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::fireTBoxNetworkProviderAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxNetworkProviderStruct& value) {
    CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxNetworkProviderStruct, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxNetworkProviderStructDeployment_t> deployedValue(value, &::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxNetworkProviderStructDeployment);
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxNetworkProviderStruct,
                ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxNetworkProviderStructDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x9002),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>::fireTBoxCallStateEvent(const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxTelephoneNumber& _TBoxTelephoneNumber, const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxCallType& _TBoxCallType, const ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxCallState& _TBoxCallState, const ::v1::GREATWALL::TBOX::TBoxTelephony::long64& _TBoxCallID) {
    CommonAPI::Deployable< TBoxTelephony::TBoxTelephoneNumber, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment_t> deployed_TBoxTelephoneNumber(_TBoxTelephoneNumber, &::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment);
    CommonAPI::Deployable< TBoxTelephony::TBoxCallType, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t> deployed_TBoxCallType(_TBoxCallType, static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< TBoxTelephony::TBoxCallState, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallStateDeployment_t> deployed_TBoxCallState(_TBoxCallState, static_cast< ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallStateDeployment_t* >(nullptr));
    CommonAPI::Deployable< TBoxTelephony::long64, CommonAPI::SomeIP::IntegerDeployment<int64_t>> deployed_TBoxCallID(_TBoxCallID, static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxTelephoneNumber, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxTelephoneNumberDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxCallType, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallTypeDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::TBoxCallState, ::v1::GREATWALL::TBOX::TBoxTelephony_::TBoxCallStateDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTelephony::long64, CommonAPI::SomeIP::IntegerDeployment<int64_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8001),
            false,
             deployed_TBoxTelephoneNumber 
            ,  deployed_TBoxCallType 
            ,  deployed_TBoxCallState 
            ,  deployed_TBoxCallID 
    );
}

template <typename _Stub = ::v1::GREATWALL::TBOX::TBoxTelephonyStub, typename... _Stubs>
class TBoxTelephonySomeIPStubAdapter
    : public TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< TBoxTelephonySomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    TBoxTelephonySomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          TBoxTelephonySomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_TBOX_T_Box_Telephony_SOMEIP_STUB_ADAPTER_HPP_
