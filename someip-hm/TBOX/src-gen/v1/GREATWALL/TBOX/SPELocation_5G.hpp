/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_SPE_LOCATION_5_G_HPP_
#define V1_GREATWALL_TBOX_SPE_LOCATION_5_G_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

class SPELocation_5G {
public:
    virtual ~SPELocation_5G() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    typedef float AltitudeMeanSeaLvl;
    typedef float HozlAccuracy;
    typedef float UpVelStdDe;
    typedef float TimUnc;
    typedef float TDOP;
    typedef uint16_t LocnFlags;
    typedef uint64_t UTCTimstamp;
    typedef float EastVelStdDe;
    typedef float GDOP;
    typedef float EastStdDe;
    typedef uint16_t LocnEngTyp;
    typedef uint16_t MeasUsageCount;
    typedef float PDOP;
    typedef float HozlElliSemiMajor;
    typedef float UpVel;
    typedef float HozlSpd;
    typedef float NorthVelStdDe;
    typedef uint16_t NumSvUsedInPosn;
    typedef float EastVel;
    typedef float HozlElliAzimuth;
    typedef double Latitude;
    typedef uint32_t GNSSSysTim;
    typedef float BearingAccuracy;
    typedef float HDOP;
    typedef uint64_t GNSSSvUsedInPosn;
    
    struct Altityp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_ASSUMED = 0,
            E_CALCULATED = 1
        };
    
        Altityp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_ASSUMED)) {}
        Altityp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_ASSUMED):
                case static_cast< uint8_t>(Literal::E_CALCULATED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Altityp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Altityp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Altityp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Altityp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Altityp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Altityp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef uint16_t HozlReliability;
    typedef double Longitude;
    typedef float SpdAccuracy;
    typedef uint32_t GNSSInfoFlags;
    typedef float NorthVel;
    typedef uint8_t NumLeapSeconds;
    typedef float Bearing;
    typedef double Alti;
    typedef uint16_t MeasUsageInfo;
    typedef float VDOP;
    typedef float NorthStdDe;
    typedef float MagDe;
    typedef uint32_t LocnEngMask;
    typedef float HozlElliSemiMinor;
    typedef uint16_t VerReliability;
    typedef float VertAccuracy;
    struct SPELocationStruct : CommonAPI::Struct< LocnFlags, UTCTimstamp, Latitude, Longitude, Alti, HozlSpd, Bearing, HozlAccuracy, VertAccuracy, SpdAccuracy, BearingAccuracy, GNSSInfoFlags, AltitudeMeanSeaLvl, PDOP, HDOP, VDOP, GDOP, TDOP, MagDe, HozlReliability, VerReliability, HozlElliSemiMajor, HozlElliSemiMinor, HozlElliAzimuth, NorthStdDe, EastStdDe, NorthVel, EastVel, UpVel, NorthVelStdDe, EastVelStdDe, UpVelStdDe, NumSvUsedInPosn, GNSSSvUsedInPosn, GNSSSysTim, MeasUsageCount, MeasUsageInfo, NumLeapSeconds, TimUnc, LocnEngTyp, LocnEngMask, Altityp> {
    
        SPELocationStruct()
        {
            std::get< 0>(values_) = LocnFlags();
            std::get< 1>(values_) = UTCTimstamp();
            std::get< 2>(values_) = Latitude();
            std::get< 3>(values_) = Longitude();
            std::get< 4>(values_) = Alti();
            std::get< 5>(values_) = HozlSpd();
            std::get< 6>(values_) = Bearing();
            std::get< 7>(values_) = HozlAccuracy();
            std::get< 8>(values_) = VertAccuracy();
            std::get< 9>(values_) = SpdAccuracy();
            std::get< 10>(values_) = BearingAccuracy();
            std::get< 11>(values_) = GNSSInfoFlags();
            std::get< 12>(values_) = AltitudeMeanSeaLvl();
            std::get< 13>(values_) = PDOP();
            std::get< 14>(values_) = HDOP();
            std::get< 15>(values_) = VDOP();
            std::get< 16>(values_) = GDOP();
            std::get< 17>(values_) = TDOP();
            std::get< 18>(values_) = MagDe();
            std::get< 19>(values_) = HozlReliability();
            std::get< 20>(values_) = VerReliability();
            std::get< 21>(values_) = HozlElliSemiMajor();
            std::get< 22>(values_) = HozlElliSemiMinor();
            std::get< 23>(values_) = HozlElliAzimuth();
            std::get< 24>(values_) = NorthStdDe();
            std::get< 25>(values_) = EastStdDe();
            std::get< 26>(values_) = NorthVel();
            std::get< 27>(values_) = EastVel();
            std::get< 28>(values_) = UpVel();
            std::get< 29>(values_) = NorthVelStdDe();
            std::get< 30>(values_) = EastVelStdDe();
            std::get< 31>(values_) = UpVelStdDe();
            std::get< 32>(values_) = NumSvUsedInPosn();
            std::get< 33>(values_) = GNSSSvUsedInPosn();
            std::get< 34>(values_) = GNSSSysTim();
            std::get< 35>(values_) = MeasUsageCount();
            std::get< 36>(values_) = MeasUsageInfo();
            std::get< 37>(values_) = NumLeapSeconds();
            std::get< 38>(values_) = TimUnc();
            std::get< 39>(values_) = LocnEngTyp();
            std::get< 40>(values_) = LocnEngMask();
            std::get< 41>(values_) = Altityp();
        }
        SPELocationStruct(const LocnFlags &_LocnFlags, const UTCTimstamp &_UTCTimstamp, const Latitude &_Latitude, const Longitude &_Longitude, const Alti &_Alti, const HozlSpd &_HozlSpd, const Bearing &_Bearing, const HozlAccuracy &_HozlAccuracy, const VertAccuracy &_VertAccuracy, const SpdAccuracy &_SpdAccuracy, const BearingAccuracy &_BearingAccuracy, const GNSSInfoFlags &_GNSSInfoFlags, const AltitudeMeanSeaLvl &_AltitudeMeanSeaLvl, const PDOP &_PDOP, const HDOP &_HDOP, const VDOP &_VDOP, const GDOP &_GDOP, const TDOP &_TDOP, const MagDe &_MagDe, const HozlReliability &_HozlReliability, const VerReliability &_VerReliability, const HozlElliSemiMajor &_HozlElliSemiMajor, const HozlElliSemiMinor &_HozlElliSemiMinor, const HozlElliAzimuth &_HozlElliAzimuth, const NorthStdDe &_NorthStdDe, const EastStdDe &_EastStdDe, const NorthVel &_NorthVel, const EastVel &_EastVel, const UpVel &_UpVel, const NorthVelStdDe &_NorthVelStdDe, const EastVelStdDe &_EastVelStdDe, const UpVelStdDe &_UpVelStdDe, const NumSvUsedInPosn &_NumSvUsedInPosn, const GNSSSvUsedInPosn &_GNSSSvUsedInPosn, const GNSSSysTim &_GNSSSysTim, const MeasUsageCount &_MeasUsageCount, const MeasUsageInfo &_MeasUsageInfo, const NumLeapSeconds &_NumLeapSeconds, const TimUnc &_TimUnc, const LocnEngTyp &_LocnEngTyp, const LocnEngMask &_LocnEngMask, const Altityp &_Altityp)
        {
            std::get< 0>(values_) = _LocnFlags;
            std::get< 1>(values_) = _UTCTimstamp;
            std::get< 2>(values_) = _Latitude;
            std::get< 3>(values_) = _Longitude;
            std::get< 4>(values_) = _Alti;
            std::get< 5>(values_) = _HozlSpd;
            std::get< 6>(values_) = _Bearing;
            std::get< 7>(values_) = _HozlAccuracy;
            std::get< 8>(values_) = _VertAccuracy;
            std::get< 9>(values_) = _SpdAccuracy;
            std::get< 10>(values_) = _BearingAccuracy;
            std::get< 11>(values_) = _GNSSInfoFlags;
            std::get< 12>(values_) = _AltitudeMeanSeaLvl;
            std::get< 13>(values_) = _PDOP;
            std::get< 14>(values_) = _HDOP;
            std::get< 15>(values_) = _VDOP;
            std::get< 16>(values_) = _GDOP;
            std::get< 17>(values_) = _TDOP;
            std::get< 18>(values_) = _MagDe;
            std::get< 19>(values_) = _HozlReliability;
            std::get< 20>(values_) = _VerReliability;
            std::get< 21>(values_) = _HozlElliSemiMajor;
            std::get< 22>(values_) = _HozlElliSemiMinor;
            std::get< 23>(values_) = _HozlElliAzimuth;
            std::get< 24>(values_) = _NorthStdDe;
            std::get< 25>(values_) = _EastStdDe;
            std::get< 26>(values_) = _NorthVel;
            std::get< 27>(values_) = _EastVel;
            std::get< 28>(values_) = _UpVel;
            std::get< 29>(values_) = _NorthVelStdDe;
            std::get< 30>(values_) = _EastVelStdDe;
            std::get< 31>(values_) = _UpVelStdDe;
            std::get< 32>(values_) = _NumSvUsedInPosn;
            std::get< 33>(values_) = _GNSSSvUsedInPosn;
            std::get< 34>(values_) = _GNSSSysTim;
            std::get< 35>(values_) = _MeasUsageCount;
            std::get< 36>(values_) = _MeasUsageInfo;
            std::get< 37>(values_) = _NumLeapSeconds;
            std::get< 38>(values_) = _TimUnc;
            std::get< 39>(values_) = _LocnEngTyp;
            std::get< 40>(values_) = _LocnEngMask;
            std::get< 41>(values_) = _Altityp;
        }
        inline const LocnFlags &getLocnFlags() const { return std::get< 0>(values_); }
        inline void setLocnFlags(const LocnFlags &_value) { std::get< 0>(values_) = _value; }
        inline const UTCTimstamp &getUTCTimstamp() const { return std::get< 1>(values_); }
        inline void setUTCTimstamp(const UTCTimstamp &_value) { std::get< 1>(values_) = _value; }
        inline const Latitude &getLatitude() const { return std::get< 2>(values_); }
        inline void setLatitude(const Latitude &_value) { std::get< 2>(values_) = _value; }
        inline const Longitude &getLongitude() const { return std::get< 3>(values_); }
        inline void setLongitude(const Longitude &_value) { std::get< 3>(values_) = _value; }
        inline const Alti &getAlti() const { return std::get< 4>(values_); }
        inline void setAlti(const Alti &_value) { std::get< 4>(values_) = _value; }
        inline const HozlSpd &getHozlSpd() const { return std::get< 5>(values_); }
        inline void setHozlSpd(const HozlSpd &_value) { std::get< 5>(values_) = _value; }
        inline const Bearing &getBearing() const { return std::get< 6>(values_); }
        inline void setBearing(const Bearing &_value) { std::get< 6>(values_) = _value; }
        inline const HozlAccuracy &getHozlAccuracy() const { return std::get< 7>(values_); }
        inline void setHozlAccuracy(const HozlAccuracy &_value) { std::get< 7>(values_) = _value; }
        inline const VertAccuracy &getVertAccuracy() const { return std::get< 8>(values_); }
        inline void setVertAccuracy(const VertAccuracy &_value) { std::get< 8>(values_) = _value; }
        inline const SpdAccuracy &getSpdAccuracy() const { return std::get< 9>(values_); }
        inline void setSpdAccuracy(const SpdAccuracy &_value) { std::get< 9>(values_) = _value; }
        inline const BearingAccuracy &getBearingAccuracy() const { return std::get< 10>(values_); }
        inline void setBearingAccuracy(const BearingAccuracy &_value) { std::get< 10>(values_) = _value; }
        inline const GNSSInfoFlags &getGNSSInfoFlags() const { return std::get< 11>(values_); }
        inline void setGNSSInfoFlags(const GNSSInfoFlags &_value) { std::get< 11>(values_) = _value; }
        inline const AltitudeMeanSeaLvl &getAltitudeMeanSeaLvl() const { return std::get< 12>(values_); }
        inline void setAltitudeMeanSeaLvl(const AltitudeMeanSeaLvl &_value) { std::get< 12>(values_) = _value; }
        inline const PDOP &getPDOP() const { return std::get< 13>(values_); }
        inline void setPDOP(const PDOP &_value) { std::get< 13>(values_) = _value; }
        inline const HDOP &getHDOP() const { return std::get< 14>(values_); }
        inline void setHDOP(const HDOP &_value) { std::get< 14>(values_) = _value; }
        inline const VDOP &getVDOP() const { return std::get< 15>(values_); }
        inline void setVDOP(const VDOP &_value) { std::get< 15>(values_) = _value; }
        inline const GDOP &getGDOP() const { return std::get< 16>(values_); }
        inline void setGDOP(const GDOP &_value) { std::get< 16>(values_) = _value; }
        inline const TDOP &getTDOP() const { return std::get< 17>(values_); }
        inline void setTDOP(const TDOP &_value) { std::get< 17>(values_) = _value; }
        inline const MagDe &getMagDe() const { return std::get< 18>(values_); }
        inline void setMagDe(const MagDe &_value) { std::get< 18>(values_) = _value; }
        inline const HozlReliability &getHozlReliability() const { return std::get< 19>(values_); }
        inline void setHozlReliability(const HozlReliability &_value) { std::get< 19>(values_) = _value; }
        inline const VerReliability &getVerReliability() const { return std::get< 20>(values_); }
        inline void setVerReliability(const VerReliability &_value) { std::get< 20>(values_) = _value; }
        inline const HozlElliSemiMajor &getHozlElliSemiMajor() const { return std::get< 21>(values_); }
        inline void setHozlElliSemiMajor(const HozlElliSemiMajor &_value) { std::get< 21>(values_) = _value; }
        inline const HozlElliSemiMinor &getHozlElliSemiMinor() const { return std::get< 22>(values_); }
        inline void setHozlElliSemiMinor(const HozlElliSemiMinor &_value) { std::get< 22>(values_) = _value; }
        inline const HozlElliAzimuth &getHozlElliAzimuth() const { return std::get< 23>(values_); }
        inline void setHozlElliAzimuth(const HozlElliAzimuth &_value) { std::get< 23>(values_) = _value; }
        inline const NorthStdDe &getNorthStdDe() const { return std::get< 24>(values_); }
        inline void setNorthStdDe(const NorthStdDe &_value) { std::get< 24>(values_) = _value; }
        inline const EastStdDe &getEastStdDe() const { return std::get< 25>(values_); }
        inline void setEastStdDe(const EastStdDe &_value) { std::get< 25>(values_) = _value; }
        inline const NorthVel &getNorthVel() const { return std::get< 26>(values_); }
        inline void setNorthVel(const NorthVel &_value) { std::get< 26>(values_) = _value; }
        inline const EastVel &getEastVel() const { return std::get< 27>(values_); }
        inline void setEastVel(const EastVel &_value) { std::get< 27>(values_) = _value; }
        inline const UpVel &getUpVel() const { return std::get< 28>(values_); }
        inline void setUpVel(const UpVel &_value) { std::get< 28>(values_) = _value; }
        inline const NorthVelStdDe &getNorthVelStdDe() const { return std::get< 29>(values_); }
        inline void setNorthVelStdDe(const NorthVelStdDe &_value) { std::get< 29>(values_) = _value; }
        inline const EastVelStdDe &getEastVelStdDe() const { return std::get< 30>(values_); }
        inline void setEastVelStdDe(const EastVelStdDe &_value) { std::get< 30>(values_) = _value; }
        inline const UpVelStdDe &getUpVelStdDe() const { return std::get< 31>(values_); }
        inline void setUpVelStdDe(const UpVelStdDe &_value) { std::get< 31>(values_) = _value; }
        inline const NumSvUsedInPosn &getNumSvUsedInPosn() const { return std::get< 32>(values_); }
        inline void setNumSvUsedInPosn(const NumSvUsedInPosn &_value) { std::get< 32>(values_) = _value; }
        inline const GNSSSvUsedInPosn &getGNSSSvUsedInPosn() const { return std::get< 33>(values_); }
        inline void setGNSSSvUsedInPosn(const GNSSSvUsedInPosn &_value) { std::get< 33>(values_) = _value; }
        inline const GNSSSysTim &getGNSSSysTim() const { return std::get< 34>(values_); }
        inline void setGNSSSysTim(const GNSSSysTim &_value) { std::get< 34>(values_) = _value; }
        inline const MeasUsageCount &getMeasUsageCount() const { return std::get< 35>(values_); }
        inline void setMeasUsageCount(const MeasUsageCount &_value) { std::get< 35>(values_) = _value; }
        inline const MeasUsageInfo &getMeasUsageInfo() const { return std::get< 36>(values_); }
        inline void setMeasUsageInfo(const MeasUsageInfo &_value) { std::get< 36>(values_) = _value; }
        inline const NumLeapSeconds &getNumLeapSeconds() const { return std::get< 37>(values_); }
        inline void setNumLeapSeconds(const NumLeapSeconds &_value) { std::get< 37>(values_) = _value; }
        inline const TimUnc &getTimUnc() const { return std::get< 38>(values_); }
        inline void setTimUnc(const TimUnc &_value) { std::get< 38>(values_) = _value; }
        inline const LocnEngTyp &getLocnEngTyp() const { return std::get< 39>(values_); }
        inline void setLocnEngTyp(const LocnEngTyp &_value) { std::get< 39>(values_) = _value; }
        inline const LocnEngMask &getLocnEngMask() const { return std::get< 40>(values_); }
        inline void setLocnEngMask(const LocnEngMask &_value) { std::get< 40>(values_) = _value; }
        inline const Altityp &getAltityp() const { return std::get< 41>(values_); }
        inline void setAltityp(const Altityp &_value) { std::get< 41>(values_) = _value; }
        inline bool operator==(const SPELocationStruct& _other) const {
        return (getLocnFlags() == _other.getLocnFlags() && getUTCTimstamp() == _other.getUTCTimstamp() && getLatitude() == _other.getLatitude() && getLongitude() == _other.getLongitude() && getAlti() == _other.getAlti() && getHozlSpd() == _other.getHozlSpd() && getBearing() == _other.getBearing() && getHozlAccuracy() == _other.getHozlAccuracy() && getVertAccuracy() == _other.getVertAccuracy() && getSpdAccuracy() == _other.getSpdAccuracy() && getBearingAccuracy() == _other.getBearingAccuracy() && getGNSSInfoFlags() == _other.getGNSSInfoFlags() && getAltitudeMeanSeaLvl() == _other.getAltitudeMeanSeaLvl() && getPDOP() == _other.getPDOP() && getHDOP() == _other.getHDOP() && getVDOP() == _other.getVDOP() && getGDOP() == _other.getGDOP() && getTDOP() == _other.getTDOP() && getMagDe() == _other.getMagDe() && getHozlReliability() == _other.getHozlReliability() && getVerReliability() == _other.getVerReliability() && getHozlElliSemiMajor() == _other.getHozlElliSemiMajor() && getHozlElliSemiMinor() == _other.getHozlElliSemiMinor() && getHozlElliAzimuth() == _other.getHozlElliAzimuth() && getNorthStdDe() == _other.getNorthStdDe() && getEastStdDe() == _other.getEastStdDe() && getNorthVel() == _other.getNorthVel() && getEastVel() == _other.getEastVel() && getUpVel() == _other.getUpVel() && getNorthVelStdDe() == _other.getNorthVelStdDe() && getEastVelStdDe() == _other.getEastVelStdDe() && getUpVelStdDe() == _other.getUpVelStdDe() && getNumSvUsedInPosn() == _other.getNumSvUsedInPosn() && getGNSSSvUsedInPosn() == _other.getGNSSSvUsedInPosn() && getGNSSSysTim() == _other.getGNSSSysTim() && getMeasUsageCount() == _other.getMeasUsageCount() && getMeasUsageInfo() == _other.getMeasUsageInfo() && getNumLeapSeconds() == _other.getNumLeapSeconds() && getTimUnc() == _other.getTimUnc() && getLocnEngTyp() == _other.getLocnEngTyp() && getLocnEngMask() == _other.getLocnEngMask() && getAltityp() == _other.getAltityp());
        }
        inline bool operator!=(const SPELocationStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* SPELocation_5G::getInterface() {
    return ("GREATWALL.TBOX.SPELocation_5G:v1_0");
}

CommonAPI::Version SPELocation_5G::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_SPE_LOCATION_5_G_HPP_
