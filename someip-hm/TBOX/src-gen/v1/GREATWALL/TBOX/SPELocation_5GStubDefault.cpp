/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/TBOX/SPELocation_5GStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace TBOX {

SPELocation_5GStubDefault::SPELocation_5GStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(SPELocation_5G::getInterfaceVersion()) {
}

const CommonAPI::Version& SPELocation_5GStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

SPELocation_5GStubRemoteEvent* SPELocation_5GStubDefault::initStubAdapter(const std::shared_ptr< SPELocation_5GStubAdapter> &_adapter) {
    CommonAPI::Stub<SPELocation_5GStubAdapter, SPELocation_5GStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const ::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct& SPELocation_5GStubDefault::getNtfSPELocationAttribute() {
     return ntfSPELocationAttributeValue_;
 }

 const ::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct& SPELocation_5GStubDefault::getNtfSPELocationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getNtfSPELocationAttribute();
 }

 void SPELocation_5GStubDefault::setNtfSPELocationAttribute(::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct _value) {
     std::shared_ptr<SPELocation_5GStubAdapter> stubAdapter = CommonAPI::Stub<SPELocation_5GStubAdapter,
     SPELocation_5GStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockNtfSPELocationAttribute(true);
         const bool valueChanged = (ntfSPELocationAttributeValue_ != _value);
         if (valueChanged) {
             ntfSPELocationAttributeValue_ = std::move(_value);
             fireNtfSPELocationAttributeChanged(ntfSPELocationAttributeValue_);
         }
         stubAdapter->lockNtfSPELocationAttribute(false);
     } else {
         const bool valueChanged = trySetNtfSPELocationAttribute(std::move(_value));
         if (valueChanged) {
             fireNtfSPELocationAttributeChanged(ntfSPELocationAttributeValue_);
         }
     }
}

 bool SPELocation_5GStubDefault::trySetNtfSPELocationAttribute(::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct _value) {
     if (!validateNtfSPELocationAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<SPELocation_5GStubAdapter> stubAdapter = CommonAPI::Stub<SPELocation_5GStubAdapter, SPELocation_5GStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockNtfSPELocationAttribute(true);
         valueChanged = (ntfSPELocationAttributeValue_ != _value);
         ntfSPELocationAttributeValue_ = std::move(_value);
         stubAdapter->lockNtfSPELocationAttribute(false);
     } else {
         valueChanged = (ntfSPELocationAttributeValue_ != _value);
         ntfSPELocationAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool SPELocation_5GStubDefault::validateNtfSPELocationAttributeRequestedValue(const ::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct &_value) {
     (void)_value;
     return true;
 }






SPELocation_5GStubDefault::RemoteEventHandler::RemoteEventHandler(SPELocation_5GStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1
