/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_Box_System_Functions_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_Box_System_Functions_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxSystemFunctionsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename ... _AttributeExtensions>
class TBoxSystemFunctionsProxy
    : virtual public TBoxSystemFunctions,
      virtual public TBoxSystemFunctionsProxyBase,
      virtual public _AttributeExtensions... {
public:
    TBoxSystemFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TBoxSystemFunctionsProxy();

    typedef TBoxSystemFunctions InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute DoubleGPSData.
     */
    virtual DoubleGPSDataAttribute& getDoubleGPSDataAttribute() {
        return delegate_->getDoubleGPSDataAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute GPSData.
     */
    virtual GPSDataAttribute& getGPSDataAttribute() {
        return delegate_->getGPSDataAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute GPSFunction.
     */
    virtual GPSFunctionAttribute& getGPSFunctionAttribute() {
        return delegate_->getGPSFunctionAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast UpgradeProcess.
     */
    virtual UpgradeProcessEvent& getUpgradeProcessEvent() {
        return delegate_->getUpgradeProcessEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast HeartbeatCheck.
     */
    virtual HeartbeatCheckEvent& getHeartbeatCheckEvent() {
        return delegate_->getHeartbeatCheckEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast TboxUpgrade.
     */
    virtual TboxUpgradeEvent& getTboxUpgradeEvent() {
        return delegate_->getTboxUpgradeEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast TBOXCorrectionRTCMData.
     */
    virtual TBOXCorrectionRTCMDataEvent& getTBOXCorrectionRTCMDataEvent() {
        return delegate_->getTBOXCorrectionRTCMDataEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast QXRTCM_StatusInfo.
     */
    virtual QXRTCM_StatusInfoEvent& getQXRTCM_StatusInfoEvent() {
        return delegate_->getQXRTCM_StatusInfoEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast UpgradeResult.
     */
    virtual UpgradeResultEvent& getUpgradeResultEvent() {
        return delegate_->getUpgradeResultEvent();
    }

    /**
     * Calls TBoxDTC with synchronous semantics.
     *
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxDTC(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxDTCCode &_TBoxDTCCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxDTC with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxDTCAsync(TBoxDTCAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls UpdateFileTransmit with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void UpdateFileTransmit(const TBoxSystemFunctions::UpgradeComplete &_UpgradeComplete, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls TboxUpgrade with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TboxUpgrade(const TBoxSystemFunctions::UpgradeRequst &_UpgradeRequst, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls TBoxInfrastructureData with synchronous semantics.
     *
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxInfrastructureData(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::SN &_SN, TBoxSystemFunctions::FW0 &_FW0, TBoxSystemFunctions::SW0 &_SW0, TBoxSystemFunctions::FW1 &_FW1, TBoxSystemFunctions::SW1 &_SW1, TBoxSystemFunctions::COMP1 &_COMP1, TBoxSystemFunctions::COMP2 &_COMP2, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxInfrastructureData with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxInfrastructureDataAsync(TBoxInfrastructureDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxAPN2Operation with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxAPN2Operation(const TBoxSystemFunctions::TBoxAPN2Operation &_TBoxAPN2Operation, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxResponse &_TBoxResponse, TBoxSystemFunctions::TBoxAPN2Status &_TBoxAPN2Status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxAPN2Operation with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxAPN2OperationAsync(const TBoxSystemFunctions::TBoxAPN2Operation &_TBoxAPN2Operation, TBoxAPN2OperationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxLoggingDownload with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxLoggingDownload(const TBoxSystemFunctions::LogDownloadCommand &_LogDownloadCommand, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::ConnectionInfo &_ConnectionInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxLoggingDownload with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxLoggingDownloadAsync(const TBoxSystemFunctions::LogDownloadCommand &_LogDownloadCommand, TBoxLoggingDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxReset with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxReset(const TBoxSystemFunctions::TBoxResetOption &_TBoxResetOption, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxResponse &_TBoxResponse, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxReset with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxResetAsync(const TBoxSystemFunctions::TBoxResetOption &_TBoxResetOption, TBoxResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxAPN2Status with synchronous semantics.
     *
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TBoxAPN2Status(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxAPN2Status &_TBoxAPN2Status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TBoxAPN2Status with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TBoxAPN2StatusAsync(TBoxAPN2StatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< TBoxSystemFunctionsProxyBase> delegate_;
};

typedef TBoxSystemFunctionsProxy<> TBoxSystemFunctionsProxyDefault;

namespace TBoxSystemFunctionsExtensions {
    template <template <typename > class _ExtensionType>
    class DoubleGPSDataAttributeExtension {
     public:
        typedef _ExtensionType< TBoxSystemFunctionsProxyBase::DoubleGPSDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxSystemFunctionsProxyBase::DoubleGPSDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DoubleGPSDataAttributeExtension(TBoxSystemFunctionsProxyBase& proxy): attributeExtension_(proxy.getDoubleGPSDataAttribute()) {
        }
    
        inline extension_type& getDoubleGPSDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class GPSDataAttributeExtension {
     public:
        typedef _ExtensionType< TBoxSystemFunctionsProxyBase::GPSDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxSystemFunctionsProxyBase::GPSDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        GPSDataAttributeExtension(TBoxSystemFunctionsProxyBase& proxy): attributeExtension_(proxy.getGPSDataAttribute()) {
        }
    
        inline extension_type& getGPSDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class GPSFunctionAttributeExtension {
     public:
        typedef _ExtensionType< TBoxSystemFunctionsProxyBase::GPSFunctionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxSystemFunctionsProxyBase::GPSFunctionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        GPSFunctionAttributeExtension(TBoxSystemFunctionsProxyBase& proxy): attributeExtension_(proxy.getGPSFunctionAttribute()) {
        }
    
        inline extension_type& getGPSFunctionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace TBoxSystemFunctionsExtensions

//
// TBoxSystemFunctionsProxy Implementation
//
template <typename ... _AttributeExtensions>
TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxSystemFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< TBoxSystemFunctionsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< TBoxSystemFunctionsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TBoxSystemFunctionsProxy<_AttributeExtensions...>::~TBoxSystemFunctionsProxy() {
}

template <typename ... _AttributeExtensions>
void TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxDTC(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxDTCCode &_TBoxDTCCode, const CommonAPI::CallInfo *_info) {
    delegate_->TBoxDTC(_internalCallStatus, _TBoxDTCCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxDTCAsync(TBoxDTCAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->TBoxDTCAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxSystemFunctionsProxy<_AttributeExtensions...>::UpdateFileTransmit(const TBoxSystemFunctions::UpgradeComplete &_UpgradeComplete, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_UpgradeComplete.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->UpdateFileTransmit(_UpgradeComplete, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void TBoxSystemFunctionsProxy<_AttributeExtensions...>::TboxUpgrade(const TBoxSystemFunctions::UpgradeRequst &_UpgradeRequst, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_UpgradeRequst.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->TboxUpgrade(_UpgradeRequst, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxInfrastructureData(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::SN &_SN, TBoxSystemFunctions::FW0 &_FW0, TBoxSystemFunctions::SW0 &_SW0, TBoxSystemFunctions::FW1 &_FW1, TBoxSystemFunctions::SW1 &_SW1, TBoxSystemFunctions::COMP1 &_COMP1, TBoxSystemFunctions::COMP2 &_COMP2, const CommonAPI::CallInfo *_info) {
    delegate_->TBoxInfrastructureData(_internalCallStatus, _SN, _FW0, _SW0, _FW1, _SW1, _COMP1, _COMP2, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxInfrastructureDataAsync(TBoxInfrastructureDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->TBoxInfrastructureDataAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxAPN2Operation(const TBoxSystemFunctions::TBoxAPN2Operation &_TBoxAPN2Operation, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxResponse &_TBoxResponse, TBoxSystemFunctions::TBoxAPN2Status &_TBoxAPN2Status, const CommonAPI::CallInfo *_info) {
    if (!_TBoxAPN2Operation.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->TBoxAPN2Operation(_TBoxAPN2Operation, _internalCallStatus, _TBoxResponse, _TBoxAPN2Status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxAPN2OperationAsync(const TBoxSystemFunctions::TBoxAPN2Operation &_TBoxAPN2Operation, TBoxAPN2OperationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_TBoxAPN2Operation.validate()) {
        TBoxSystemFunctions::TBoxResponse TBoxResponse = TBoxSystemFunctions::TBoxResponse::E_ACTIONFAILED;
        TBoxSystemFunctions::TBoxAPN2Status TBoxAPN2Status = TBoxSystemFunctions::TBoxAPN2Status::E_DISCONNECTED;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, TBoxResponse, TBoxAPN2Status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->TBoxAPN2OperationAsync(_TBoxAPN2Operation, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxLoggingDownload(const TBoxSystemFunctions::LogDownloadCommand &_LogDownloadCommand, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::ConnectionInfo &_ConnectionInfo, const CommonAPI::CallInfo *_info) {
    if (!_LogDownloadCommand.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->TBoxLoggingDownload(_LogDownloadCommand, _internalCallStatus, _ConnectionInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxLoggingDownloadAsync(const TBoxSystemFunctions::LogDownloadCommand &_LogDownloadCommand, TBoxLoggingDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_LogDownloadCommand.validate()) {
        TBoxSystemFunctions::ConnectionInfo ConnectionInfo = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ConnectionInfo);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->TBoxLoggingDownloadAsync(_LogDownloadCommand, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxReset(const TBoxSystemFunctions::TBoxResetOption &_TBoxResetOption, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxResponse &_TBoxResponse, const CommonAPI::CallInfo *_info) {
    if (!_TBoxResetOption.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->TBoxReset(_TBoxResetOption, _internalCallStatus, _TBoxResponse, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxResetAsync(const TBoxSystemFunctions::TBoxResetOption &_TBoxResetOption, TBoxResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_TBoxResetOption.validate()) {
        TBoxSystemFunctions::TBoxResponse TBoxResponse = TBoxSystemFunctions::TBoxResponse::E_ACTIONFAILED;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, TBoxResponse);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->TBoxResetAsync(_TBoxResetOption, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxAPN2Status(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxAPN2Status &_TBoxAPN2Status, const CommonAPI::CallInfo *_info) {
    delegate_->TBoxAPN2Status(_internalCallStatus, _TBoxAPN2Status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxAPN2StatusAsync(TBoxAPN2StatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->TBoxAPN2StatusAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TBoxSystemFunctionsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TBoxSystemFunctionsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TBoxSystemFunctionsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TBoxSystemFunctionsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TBoxSystemFunctionsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::GREATWALL::TBOX::TBoxSystemFunctionsProxy,
    _AttributeExtension> {
    typedef typename ::v1::GREATWALL::TBOX::TBoxSystemFunctionsProxy<
            ::v1::GREATWALL::TBOX::TBoxSystemFunctionsExtensions::DoubleGPSDataAttributeExtension<_AttributeExtension>, 
            ::v1::GREATWALL::TBOX::TBoxSystemFunctionsExtensions::GPSDataAttributeExtension<_AttributeExtension>, 
            ::v1::GREATWALL::TBOX::TBoxSystemFunctionsExtensions::GPSFunctionAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_Box_System_Functions_PROXY_HPP_
