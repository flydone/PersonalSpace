/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_V2_X_SYSTEM_FUNCTIONS_HPP_
#define V1_GREATWALL_TBOX_T_BOX_V2_X_SYSTEM_FUNCTIONS_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

class TBoxV2XSystemFunctions {
public:
    virtual ~TBoxV2XSystemFunctions() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct V2XLOCKRespone : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        V2XLOCKRespone()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        V2XLOCKRespone(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const V2XLOCKRespone &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const V2XLOCKRespone &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const V2XLOCKRespone &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const V2XLOCKRespone &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const V2XLOCKRespone &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const V2XLOCKRespone &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct V2XStatus : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_DISABLE = 0,
            E_OFF = 1,
            E_ON = 2
        };
    
        V2XStatus()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_DISABLE)) {}
        V2XStatus(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_DISABLE):
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const V2XStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const V2XStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const V2XStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const V2XStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const V2XStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const V2XStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct V2XLOCKRequest : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        V2XLOCKRequest()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        V2XLOCKRequest(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const V2XLOCKRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const V2XLOCKRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const V2XLOCKRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const V2XLOCKRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const V2XLOCKRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const V2XLOCKRequest &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
};

const char* TBoxV2XSystemFunctions::getInterface() {
    return ("GREATWALL.TBOX.TBoxV2XSystemFunctions:v1_0");
}

CommonAPI::Version TBoxV2XSystemFunctions::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_BOX_V2_X_SYSTEM_FUNCTIONS_HPP_
