/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/TBOX/TBoxTSPComSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createTBoxTSPComSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< TBoxTSPComSomeIPProxy>(_address, _connection);
}

void initializeTBoxTSPComSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.TBOX.TBoxTSPCom:v1_0:TBoxTSPCom01",
        0x202, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         TBoxTSPCom::getInterface(),
         &createTBoxTSPComSomeIPProxy);
}

INITIALIZER(registerTBoxTSPComSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeTBoxTSPComSomeIPProxy);
}

TBoxTSPComSomeIPProxy::TBoxTSPComSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          tBoxTSPLoginState_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x9001), CommonAPI::SomeIP::method_id_t(0x1001), false, false, static_cast< ::v1::GREATWALL::TBOX::TBoxTSPCom_::TBoxTSPLoginStateDeployment_t* >(nullptr))
    {
    }

    TBoxTSPComSomeIPProxy::TBoxTSPLoginStateAttribute& TBoxTSPComSomeIPProxy::getTBoxTSPLoginStateAttribute() {
        return tBoxTSPLoginState_;
    }





    void TBoxTSPComSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1
