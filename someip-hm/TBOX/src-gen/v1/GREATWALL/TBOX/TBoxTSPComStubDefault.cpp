/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/TBOX/TBoxTSPComStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace TBOX {

TBoxTSPComStubDefault::TBoxTSPComStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(TBoxTSPCom::getInterfaceVersion()) {
}

const CommonAPI::Version& TBoxTSPComStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

TBoxTSPComStubRemoteEvent* TBoxTSPComStubDefault::initStubAdapter(const std::shared_ptr< TBoxTSPComStubAdapter> &_adapter) {
    CommonAPI::Stub<TBoxTSPComStubAdapter, TBoxTSPComStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState& TBoxTSPComStubDefault::getTBoxTSPLoginStateAttribute() {
     return tBoxTSPLoginStateAttributeValue_;
 }

 const ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState& TBoxTSPComStubDefault::getTBoxTSPLoginStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getTBoxTSPLoginStateAttribute();
 }

 void TBoxTSPComStubDefault::setTBoxTSPLoginStateAttribute(::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState _value) {
     std::shared_ptr<TBoxTSPComStubAdapter> stubAdapter = CommonAPI::Stub<TBoxTSPComStubAdapter,
     TBoxTSPComStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBoxTSPLoginStateAttribute(true);
         const bool valueChanged = (tBoxTSPLoginStateAttributeValue_ != _value);
         if (valueChanged) {
             tBoxTSPLoginStateAttributeValue_ = std::move(_value);
             fireTBoxTSPLoginStateAttributeChanged(tBoxTSPLoginStateAttributeValue_);
         }
         stubAdapter->lockTBoxTSPLoginStateAttribute(false);
     } else {
         const bool valueChanged = trySetTBoxTSPLoginStateAttribute(std::move(_value));
         if (valueChanged) {
             fireTBoxTSPLoginStateAttributeChanged(tBoxTSPLoginStateAttributeValue_);
         }
     }
}

 bool TBoxTSPComStubDefault::trySetTBoxTSPLoginStateAttribute(::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState _value) {
     if (!validateTBoxTSPLoginStateAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<TBoxTSPComStubAdapter> stubAdapter = CommonAPI::Stub<TBoxTSPComStubAdapter, TBoxTSPComStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockTBoxTSPLoginStateAttribute(true);
         valueChanged = (tBoxTSPLoginStateAttributeValue_ != _value);
         tBoxTSPLoginStateAttributeValue_ = std::move(_value);
         stubAdapter->lockTBoxTSPLoginStateAttribute(false);
     } else {
         valueChanged = (tBoxTSPLoginStateAttributeValue_ != _value);
         tBoxTSPLoginStateAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool TBoxTSPComStubDefault::validateTBoxTSPLoginStateAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState &_value) {
     (void)_value;
     return _value.validate();
 }






TBoxTSPComStubDefault::RemoteEventHandler::RemoteEventHandler(TBoxTSPComStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1
