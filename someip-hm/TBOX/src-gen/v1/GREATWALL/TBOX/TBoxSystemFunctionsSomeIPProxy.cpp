/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/TBOX/TBoxSystemFunctionsSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createTBoxSystemFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< TBoxSystemFunctionsSomeIPProxy>(_address, _connection);
}

void initializeTBoxSystemFunctionsSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.TBOX.TBoxSystemFunctions:v1_0:TBoxSystemFunctions01",
        0x203, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         TBoxSystemFunctions::getInterface(),
         &createTBoxSystemFunctionsSomeIPProxy);
}

INITIALIZER(registerTBoxSystemFunctionsSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeTBoxSystemFunctionsSomeIPProxy);
}

TBoxSystemFunctionsSomeIPProxy::TBoxSystemFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          doubleGPSData_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x4), CommonAPI::SomeIP::event_id_t(0x9002), CommonAPI::SomeIP::method_id_t(0x1003), true, false, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
          gPSData_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x9001), CommonAPI::SomeIP::method_id_t(0x1001), false, false, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
          gPSFunction_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x7), CommonAPI::SomeIP::event_id_t(0x9003), CommonAPI::SomeIP::method_id_t(0x0), false, false, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr))
,          upgradeProcess_(*this, 0x3, CommonAPI::SomeIP::event_id_t(0x8002), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr))),
          heartbeatCheck_(*this, 0x2, CommonAPI::SomeIP::event_id_t(0x8001), false, false, std::make_tuple()),
          tboxUpgrade_(*this, 0x3, CommonAPI::SomeIP::event_id_t(0x8004), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeResponseDeployment_t* >(nullptr))),
          tBOXCorrectionRTCMData_(*this, 0x5, CommonAPI::SomeIP::event_id_t(0x8005), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBOXCorrection_RTCM32Deployment_t* >(nullptr))),
          qXRTCM_StatusInfo_(*this, 0x6, CommonAPI::SomeIP::event_id_t(0x8006), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::QXRTCM_StatusCodeDeployment_t* >(nullptr))),
          upgradeResult_(*this, 0x3, CommonAPI::SomeIP::event_id_t(0x8003), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeResultDeployment_t* >(nullptr)))
    {
    }

    TBoxSystemFunctionsSomeIPProxy::DoubleGPSDataAttribute& TBoxSystemFunctionsSomeIPProxy::getDoubleGPSDataAttribute() {
        return doubleGPSData_;
    }
    TBoxSystemFunctionsSomeIPProxy::GPSDataAttribute& TBoxSystemFunctionsSomeIPProxy::getGPSDataAttribute() {
        return gPSData_;
    }
    TBoxSystemFunctionsSomeIPProxy::GPSFunctionAttribute& TBoxSystemFunctionsSomeIPProxy::getGPSFunctionAttribute() {
        return gPSFunction_;
    }

    TBoxSystemFunctionsSomeIPProxy::UpgradeProcessEvent& TBoxSystemFunctionsSomeIPProxy::getUpgradeProcessEvent() {
        return upgradeProcess_;
    }
    TBoxSystemFunctionsSomeIPProxy::HeartbeatCheckEvent& TBoxSystemFunctionsSomeIPProxy::getHeartbeatCheckEvent() {
        return heartbeatCheck_;
    }
    TBoxSystemFunctionsSomeIPProxy::TboxUpgradeEvent& TBoxSystemFunctionsSomeIPProxy::getTboxUpgradeEvent() {
        return tboxUpgrade_;
    }
    TBoxSystemFunctionsSomeIPProxy::TBOXCorrectionRTCMDataEvent& TBoxSystemFunctionsSomeIPProxy::getTBOXCorrectionRTCMDataEvent() {
        return tBOXCorrectionRTCMData_;
    }
    TBoxSystemFunctionsSomeIPProxy::QXRTCM_StatusInfoEvent& TBoxSystemFunctionsSomeIPProxy::getQXRTCM_StatusInfoEvent() {
        return qXRTCM_StatusInfo_;
    }
    TBoxSystemFunctionsSomeIPProxy::UpgradeResultEvent& TBoxSystemFunctionsSomeIPProxy::getUpgradeResultEvent() {
        return upgradeResult_;
    }

        void TBoxSystemFunctionsSomeIPProxy::TBoxDTC(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxDTCCode &_TBoxDTCCode, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< TBoxSystemFunctions::TBoxDTCCode, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxDTCCodeDeployment_t> deploy_TBoxDTCCode(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxDTCCodeDeployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::TBoxDTCCode,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxDTCCodeDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    _internalCallStatus,
    deploy_TBoxDTCCode);
    _TBoxDTCCode = deploy_TBoxDTCCode.getValue();
    }
    std::future<CommonAPI::CallStatus> TBoxSystemFunctionsSomeIPProxy::TBoxDTCAsync(TBoxDTCAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TBoxSystemFunctions::TBoxDTCCode, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxDTCCodeDeployment_t> deploy_TBoxDTCCode(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxDTCCodeDeployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::TBoxDTCCode,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxDTCCodeDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TBoxSystemFunctions::TBoxDTCCode, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxDTCCodeDeployment_t > _TBoxDTCCode) {
                if (_callback)
                    _callback(_internalCallStatus, _TBoxDTCCode.getValue());
            },
            std::make_tuple(deploy_TBoxDTCCode));
    }
        void TBoxSystemFunctionsSomeIPProxy::UpdateFileTransmit(const TBoxSystemFunctions::UpgradeComplete &_UpgradeComplete, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< TBoxSystemFunctions::UpgradeComplete, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeCompleteDeployment_t> deploy_UpgradeComplete(_UpgradeComplete, static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeCompleteDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::UpgradeComplete,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeCompleteDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1002),
            false,
            false,
    deploy_UpgradeComplete,
    _internalCallStatus);
    }
        void TBoxSystemFunctionsSomeIPProxy::TboxUpgrade(const TBoxSystemFunctions::UpgradeRequst &_UpgradeRequst, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< TBoxSystemFunctions::UpgradeRequst, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeRequstDeployment_t> deploy_UpgradeRequst(_UpgradeRequst, static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeRequstDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::UpgradeRequst,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeRequstDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7),
            false,
            false,
    deploy_UpgradeRequst,
    _internalCallStatus);
    }
        void TBoxSystemFunctionsSomeIPProxy::TBoxInfrastructureData(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::SN &_SN, TBoxSystemFunctions::FW0 &_FW0, TBoxSystemFunctions::SW0 &_SW0, TBoxSystemFunctions::FW1 &_FW1, TBoxSystemFunctions::SW1 &_SW1, TBoxSystemFunctions::COMP1 &_COMP1, TBoxSystemFunctions::COMP2 &_COMP2, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< TBoxSystemFunctions::SN, CommonAPI::SomeIP::StringDeployment> deploy_SN(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_SNDeployment);
            CommonAPI::Deployable< TBoxSystemFunctions::FW0, CommonAPI::SomeIP::StringDeployment> deploy_FW0(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_FW0Deployment);
            CommonAPI::Deployable< TBoxSystemFunctions::SW0, CommonAPI::SomeIP::StringDeployment> deploy_SW0(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_SW0Deployment);
            CommonAPI::Deployable< TBoxSystemFunctions::FW1, CommonAPI::SomeIP::StringDeployment> deploy_FW1(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_FW1Deployment);
            CommonAPI::Deployable< TBoxSystemFunctions::SW1, CommonAPI::SomeIP::StringDeployment> deploy_SW1(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_SW1Deployment);
            CommonAPI::Deployable< TBoxSystemFunctions::COMP1, CommonAPI::SomeIP::StringDeployment> deploy_COMP1(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_COMP1Deployment);
            CommonAPI::Deployable< TBoxSystemFunctions::COMP2, CommonAPI::SomeIP::StringDeployment> deploy_COMP2(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_COMP2Deployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::SN,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::FW0,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::SW0,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::FW1,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::SW1,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::COMP1,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::COMP2,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    _internalCallStatus,
    deploy_SN, deploy_FW0, deploy_SW0, deploy_FW1, deploy_SW1, deploy_COMP1, deploy_COMP2);
    _SN = deploy_SN.getValue();
    _FW0 = deploy_FW0.getValue();
    _SW0 = deploy_SW0.getValue();
    _FW1 = deploy_FW1.getValue();
    _SW1 = deploy_SW1.getValue();
    _COMP1 = deploy_COMP1.getValue();
    _COMP2 = deploy_COMP2.getValue();
    }
    std::future<CommonAPI::CallStatus> TBoxSystemFunctionsSomeIPProxy::TBoxInfrastructureDataAsync(TBoxInfrastructureDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TBoxSystemFunctions::SN, CommonAPI::SomeIP::StringDeployment> deploy_SN(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_SNDeployment);
        CommonAPI::Deployable< TBoxSystemFunctions::FW0, CommonAPI::SomeIP::StringDeployment> deploy_FW0(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_FW0Deployment);
        CommonAPI::Deployable< TBoxSystemFunctions::SW0, CommonAPI::SomeIP::StringDeployment> deploy_SW0(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_SW0Deployment);
        CommonAPI::Deployable< TBoxSystemFunctions::FW1, CommonAPI::SomeIP::StringDeployment> deploy_FW1(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_FW1Deployment);
        CommonAPI::Deployable< TBoxSystemFunctions::SW1, CommonAPI::SomeIP::StringDeployment> deploy_SW1(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_SW1Deployment);
        CommonAPI::Deployable< TBoxSystemFunctions::COMP1, CommonAPI::SomeIP::StringDeployment> deploy_COMP1(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_COMP1Deployment);
        CommonAPI::Deployable< TBoxSystemFunctions::COMP2, CommonAPI::SomeIP::StringDeployment> deploy_COMP2(&::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxInfrastructureData_COMP2Deployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::SN,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    TBoxSystemFunctions::FW0,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    TBoxSystemFunctions::SW0,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    TBoxSystemFunctions::FW1,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    TBoxSystemFunctions::SW1,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    TBoxSystemFunctions::COMP1,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    TBoxSystemFunctions::COMP2,
                    CommonAPI::SomeIP::StringDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TBoxSystemFunctions::SN, CommonAPI::SomeIP::StringDeployment > _SN, CommonAPI::Deployable< TBoxSystemFunctions::FW0, CommonAPI::SomeIP::StringDeployment > _FW0, CommonAPI::Deployable< TBoxSystemFunctions::SW0, CommonAPI::SomeIP::StringDeployment > _SW0, CommonAPI::Deployable< TBoxSystemFunctions::FW1, CommonAPI::SomeIP::StringDeployment > _FW1, CommonAPI::Deployable< TBoxSystemFunctions::SW1, CommonAPI::SomeIP::StringDeployment > _SW1, CommonAPI::Deployable< TBoxSystemFunctions::COMP1, CommonAPI::SomeIP::StringDeployment > _COMP1, CommonAPI::Deployable< TBoxSystemFunctions::COMP2, CommonAPI::SomeIP::StringDeployment > _COMP2) {
                if (_callback)
                    _callback(_internalCallStatus, _SN.getValue(), _FW0.getValue(), _SW0.getValue(), _FW1.getValue(), _SW1.getValue(), _COMP1.getValue(), _COMP2.getValue());
            },
            std::make_tuple(deploy_SN, deploy_FW0, deploy_SW0, deploy_FW1, deploy_SW1, deploy_COMP1, deploy_COMP2));
    }
        void TBoxSystemFunctionsSomeIPProxy::TBoxAPN2Operation(const TBoxSystemFunctions::TBoxAPN2Operation &_TBoxAPN2Operation, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxResponse &_TBoxResponse, TBoxSystemFunctions::TBoxAPN2Status &_TBoxAPN2Status, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< TBoxSystemFunctions::TBoxAPN2Operation, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2OperationDeployment_t> deploy_TBoxAPN2Operation(_TBoxAPN2Operation, static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2OperationDeployment_t* >(nullptr));
            CommonAPI::Deployable< TBoxSystemFunctions::TBoxResponse, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t> deploy_TBoxResponse(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t* >(nullptr));
            CommonAPI::Deployable< TBoxSystemFunctions::TBoxAPN2Status, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t> deploy_TBoxAPN2Status(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::TBoxAPN2Operation,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2OperationDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::TBoxResponse,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t
                    >,
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::TBoxAPN2Status,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_TBoxAPN2Operation,
    _internalCallStatus,
    deploy_TBoxResponse, deploy_TBoxAPN2Status);
    _TBoxResponse = deploy_TBoxResponse.getValue();
    _TBoxAPN2Status = deploy_TBoxAPN2Status.getValue();
    }
    std::future<CommonAPI::CallStatus> TBoxSystemFunctionsSomeIPProxy::TBoxAPN2OperationAsync(const TBoxSystemFunctions::TBoxAPN2Operation &_TBoxAPN2Operation, TBoxAPN2OperationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TBoxSystemFunctions::TBoxAPN2Operation, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2OperationDeployment_t> deploy_TBoxAPN2Operation(_TBoxAPN2Operation, static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2OperationDeployment_t* >(nullptr));
        CommonAPI::Deployable< TBoxSystemFunctions::TBoxResponse, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t> deploy_TBoxResponse(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t* >(nullptr));
        CommonAPI::Deployable< TBoxSystemFunctions::TBoxAPN2Status, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t> deploy_TBoxAPN2Status(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::TBoxAPN2Operation,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2OperationDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::TBoxResponse,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t
                >,
                CommonAPI::Deployable<
                    TBoxSystemFunctions::TBoxAPN2Status,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_TBoxAPN2Operation,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TBoxSystemFunctions::TBoxResponse, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t > _TBoxResponse, CommonAPI::Deployable< TBoxSystemFunctions::TBoxAPN2Status, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t > _TBoxAPN2Status) {
                if (_callback)
                    _callback(_internalCallStatus, _TBoxResponse.getValue(), _TBoxAPN2Status.getValue());
            },
            std::make_tuple(deploy_TBoxResponse, deploy_TBoxAPN2Status));
    }
        void TBoxSystemFunctionsSomeIPProxy::TBoxLoggingDownload(const TBoxSystemFunctions::LogDownloadCommand &_LogDownloadCommand, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::ConnectionInfo &_ConnectionInfo, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< TBoxSystemFunctions::LogDownloadCommand, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::LogDownloadCommandDeployment_t> deploy_LogDownloadCommand(_LogDownloadCommand, static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::LogDownloadCommandDeployment_t* >(nullptr));
            CommonAPI::Deployable< TBoxSystemFunctions::ConnectionInfo, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::ConnectionInfoDeployment_t> deploy_ConnectionInfo(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::ConnectionInfoDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::LogDownloadCommand,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::LogDownloadCommandDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::ConnectionInfo,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::ConnectionInfoDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_LogDownloadCommand,
    _internalCallStatus,
    deploy_ConnectionInfo);
    _ConnectionInfo = deploy_ConnectionInfo.getValue();
    }
    std::future<CommonAPI::CallStatus> TBoxSystemFunctionsSomeIPProxy::TBoxLoggingDownloadAsync(const TBoxSystemFunctions::LogDownloadCommand &_LogDownloadCommand, TBoxLoggingDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TBoxSystemFunctions::LogDownloadCommand, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::LogDownloadCommandDeployment_t> deploy_LogDownloadCommand(_LogDownloadCommand, static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::LogDownloadCommandDeployment_t* >(nullptr));
        CommonAPI::Deployable< TBoxSystemFunctions::ConnectionInfo, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::ConnectionInfoDeployment_t> deploy_ConnectionInfo(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::ConnectionInfoDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::LogDownloadCommand,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::LogDownloadCommandDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::ConnectionInfo,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::ConnectionInfoDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_LogDownloadCommand,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TBoxSystemFunctions::ConnectionInfo, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::ConnectionInfoDeployment_t > _ConnectionInfo) {
                if (_callback)
                    _callback(_internalCallStatus, _ConnectionInfo.getValue());
            },
            std::make_tuple(deploy_ConnectionInfo));
    }
        void TBoxSystemFunctionsSomeIPProxy::TBoxReset(const TBoxSystemFunctions::TBoxResetOption &_TBoxResetOption, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxResponse &_TBoxResponse, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< TBoxSystemFunctions::TBoxResetOption, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResetOptionDeployment_t> deploy_TBoxResetOption(_TBoxResetOption, static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResetOptionDeployment_t* >(nullptr));
            CommonAPI::Deployable< TBoxSystemFunctions::TBoxResponse, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t> deploy_TBoxResponse(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::TBoxResetOption,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResetOptionDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::TBoxResponse,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_TBoxResetOption,
    _internalCallStatus,
    deploy_TBoxResponse);
    _TBoxResponse = deploy_TBoxResponse.getValue();
    }
    std::future<CommonAPI::CallStatus> TBoxSystemFunctionsSomeIPProxy::TBoxResetAsync(const TBoxSystemFunctions::TBoxResetOption &_TBoxResetOption, TBoxResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TBoxSystemFunctions::TBoxResetOption, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResetOptionDeployment_t> deploy_TBoxResetOption(_TBoxResetOption, static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResetOptionDeployment_t* >(nullptr));
        CommonAPI::Deployable< TBoxSystemFunctions::TBoxResponse, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t> deploy_TBoxResponse(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::TBoxResetOption,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResetOptionDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::TBoxResponse,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_TBoxResetOption,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TBoxSystemFunctions::TBoxResponse, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxResponseDeployment_t > _TBoxResponse) {
                if (_callback)
                    _callback(_internalCallStatus, _TBoxResponse.getValue());
            },
            std::make_tuple(deploy_TBoxResponse));
    }
        void TBoxSystemFunctionsSomeIPProxy::TBoxAPN2Status(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxAPN2Status &_TBoxAPN2Status, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< TBoxSystemFunctions::TBoxAPN2Status, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t> deploy_TBoxAPN2Status(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxSystemFunctions::TBoxAPN2Status,
                        ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    _internalCallStatus,
    deploy_TBoxAPN2Status);
    _TBoxAPN2Status = deploy_TBoxAPN2Status.getValue();
    }
    std::future<CommonAPI::CallStatus> TBoxSystemFunctionsSomeIPProxy::TBoxAPN2StatusAsync(TBoxAPN2StatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TBoxSystemFunctions::TBoxAPN2Status, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t> deploy_TBoxAPN2Status(static_cast< ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxSystemFunctions::TBoxAPN2Status,
                    ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TBoxSystemFunctions::TBoxAPN2Status, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBoxAPN2StatusDeployment_t > _TBoxAPN2Status) {
                if (_callback)
                    _callback(_internalCallStatus, _TBoxAPN2Status.getValue());
            },
            std::make_tuple(deploy_TBoxAPN2Status));
    }



    void TBoxSystemFunctionsSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1
