/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_Box_Reservation_Functions_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_Box_Reservation_Functions_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxReservationFunctionsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename ... _AttributeExtensions>
class TBoxReservationFunctionsProxy
    : virtual public TBoxReservationFunctions,
      virtual public TBoxReservationFunctionsProxyBase,
      virtual public _AttributeExtensions... {
public:
    TBoxReservationFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TBoxReservationFunctionsProxy();

    typedef TBoxReservationFunctions InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute LocalFOTAResPar.
     */
    virtual LocalFOTAResParAttribute& getLocalFOTAResParAttribute() {
        return delegate_->getLocalFOTAResParAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute LocalChargeResPar.
     */
    virtual LocalChargeResParAttribute& getLocalChargeResParAttribute() {
        return delegate_->getLocalChargeResParAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast RemoteFOTAReservation.
     */
    virtual RemoteFOTAReservationEvent& getRemoteFOTAReservationEvent() {
        return delegate_->getRemoteFOTAReservationEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast RemoteChargeReservation.
     */
    virtual RemoteChargeReservationEvent& getRemoteChargeReservationEvent() {
        return delegate_->getRemoteChargeReservationEvent();
    }

    /**
     * Calls RemoteFOTAReservation with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RemoteFOTAReservation(const TBoxReservationFunctions::ReservationACK &_ReservationACK, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls LocalChargeReservation with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void LocalChargeReservation(const TBoxReservationFunctions::ChargMode &_ChargMode, const TBoxReservationFunctions::TimeArray &_StartTime, const TBoxReservationFunctions::Repeat &_Repeat, const TBoxReservationFunctions::TimeArray &_EndTime, CommonAPI::CallStatus &_internalCallStatus, TBoxReservationFunctions::ReservationACK &_ReservationACK, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls LocalChargeReservation with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> LocalChargeReservationAsync(const TBoxReservationFunctions::ChargMode &_ChargMode, const TBoxReservationFunctions::TimeArray &_StartTime, const TBoxReservationFunctions::Repeat &_Repeat, const TBoxReservationFunctions::TimeArray &_EndTime, LocalChargeReservationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls LocalFOTAReservation with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void LocalFOTAReservation(const TBoxReservationFunctions::ReservationOperation &_ReservationOperation, const TBoxReservationFunctions::TimeArray &_UpdateTime, CommonAPI::CallStatus &_internalCallStatus, TBoxReservationFunctions::ReservationACK &_ReservationACK, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls LocalFOTAReservation with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> LocalFOTAReservationAsync(const TBoxReservationFunctions::ReservationOperation &_ReservationOperation, const TBoxReservationFunctions::TimeArray &_UpdateTime, LocalFOTAReservationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls RemoteChargeReservation with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RemoteChargeReservation(const TBoxReservationFunctions::ReservationACK &_ReservationACK, CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< TBoxReservationFunctionsProxyBase> delegate_;
};

typedef TBoxReservationFunctionsProxy<> TBoxReservationFunctionsProxyDefault;

namespace TBoxReservationFunctionsExtensions {
    template <template <typename > class _ExtensionType>
    class LocalFOTAResParAttributeExtension {
     public:
        typedef _ExtensionType< TBoxReservationFunctionsProxyBase::LocalFOTAResParAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxReservationFunctionsProxyBase::LocalFOTAResParAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        LocalFOTAResParAttributeExtension(TBoxReservationFunctionsProxyBase& proxy): attributeExtension_(proxy.getLocalFOTAResParAttribute()) {
        }
    
        inline extension_type& getLocalFOTAResParAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class LocalChargeResParAttributeExtension {
     public:
        typedef _ExtensionType< TBoxReservationFunctionsProxyBase::LocalChargeResParAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxReservationFunctionsProxyBase::LocalChargeResParAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        LocalChargeResParAttributeExtension(TBoxReservationFunctionsProxyBase& proxy): attributeExtension_(proxy.getLocalChargeResParAttribute()) {
        }
    
        inline extension_type& getLocalChargeResParAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace TBoxReservationFunctionsExtensions

//
// TBoxReservationFunctionsProxy Implementation
//
template <typename ... _AttributeExtensions>
TBoxReservationFunctionsProxy<_AttributeExtensions...>::TBoxReservationFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< TBoxReservationFunctionsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< TBoxReservationFunctionsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TBoxReservationFunctionsProxy<_AttributeExtensions...>::~TBoxReservationFunctionsProxy() {
}

template <typename ... _AttributeExtensions>
void TBoxReservationFunctionsProxy<_AttributeExtensions...>::RemoteFOTAReservation(const TBoxReservationFunctions::ReservationACK &_ReservationACK, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_ReservationACK.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->RemoteFOTAReservation(_ReservationACK, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void TBoxReservationFunctionsProxy<_AttributeExtensions...>::LocalChargeReservation(const TBoxReservationFunctions::ChargMode &_ChargMode, const TBoxReservationFunctions::TimeArray &_StartTime, const TBoxReservationFunctions::Repeat &_Repeat, const TBoxReservationFunctions::TimeArray &_EndTime, CommonAPI::CallStatus &_internalCallStatus, TBoxReservationFunctions::ReservationACK &_ReservationACK, const CommonAPI::CallInfo *_info) {
    if (!_ChargMode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_Repeat.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->LocalChargeReservation(_ChargMode, _StartTime, _Repeat, _EndTime, _internalCallStatus, _ReservationACK, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxReservationFunctionsProxy<_AttributeExtensions...>::LocalChargeReservationAsync(const TBoxReservationFunctions::ChargMode &_ChargMode, const TBoxReservationFunctions::TimeArray &_StartTime, const TBoxReservationFunctions::Repeat &_Repeat, const TBoxReservationFunctions::TimeArray &_EndTime, LocalChargeReservationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_ChargMode.validate()) {
        TBoxReservationFunctions::ReservationACK ReservationACK = TBoxReservationFunctions::ReservationACK::E_ACTIONFAILED;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ReservationACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_Repeat.validate()) {
        TBoxReservationFunctions::ReservationACK ReservationACK = TBoxReservationFunctions::ReservationACK::E_ACTIONFAILED;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ReservationACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->LocalChargeReservationAsync(_ChargMode, _StartTime, _Repeat, _EndTime, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxReservationFunctionsProxy<_AttributeExtensions...>::LocalFOTAReservation(const TBoxReservationFunctions::ReservationOperation &_ReservationOperation, const TBoxReservationFunctions::TimeArray &_UpdateTime, CommonAPI::CallStatus &_internalCallStatus, TBoxReservationFunctions::ReservationACK &_ReservationACK, const CommonAPI::CallInfo *_info) {
    if (!_ReservationOperation.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->LocalFOTAReservation(_ReservationOperation, _UpdateTime, _internalCallStatus, _ReservationACK, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TBoxReservationFunctionsProxy<_AttributeExtensions...>::LocalFOTAReservationAsync(const TBoxReservationFunctions::ReservationOperation &_ReservationOperation, const TBoxReservationFunctions::TimeArray &_UpdateTime, LocalFOTAReservationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_ReservationOperation.validate()) {
        TBoxReservationFunctions::ReservationACK ReservationACK = TBoxReservationFunctions::ReservationACK::E_ACTIONFAILED;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ReservationACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->LocalFOTAReservationAsync(_ReservationOperation, _UpdateTime, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TBoxReservationFunctionsProxy<_AttributeExtensions...>::RemoteChargeReservation(const TBoxReservationFunctions::ReservationACK &_ReservationACK, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_ReservationACK.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->RemoteChargeReservation(_ReservationACK, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TBoxReservationFunctionsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TBoxReservationFunctionsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TBoxReservationFunctionsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TBoxReservationFunctionsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TBoxReservationFunctionsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::GREATWALL::TBOX::TBoxReservationFunctionsProxy,
    _AttributeExtension> {
    typedef typename ::v1::GREATWALL::TBOX::TBoxReservationFunctionsProxy<
            ::v1::GREATWALL::TBOX::TBoxReservationFunctionsExtensions::LocalFOTAResParAttributeExtension<_AttributeExtension>, 
            ::v1::GREATWALL::TBOX::TBoxReservationFunctionsExtensions::LocalChargeResParAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_Box_Reservation_Functions_PROXY_HPP_
