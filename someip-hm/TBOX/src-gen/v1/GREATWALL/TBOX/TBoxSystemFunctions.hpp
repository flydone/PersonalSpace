/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_SYSTEM_FUNCTIONS_HPP_
#define V1_GREATWALL_TBOX_T_BOX_SYSTEM_FUNCTIONS_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

class TBoxSystemFunctions {
public:
    virtual ~TBoxSystemFunctions() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    typedef std::vector< uint32_t> TBoxDTCCode;
    typedef std::string SN;
    typedef std::string DoubleGPSRawData;
    typedef std::string COMP2;
    
    struct QXRTCM_StatusCode : CommonAPI::Enumeration< uint16_t> {
        enum Literal : uint16_t {
            E_ACCOUNTAUTHSUCCEES = 2001,
            E_PPECERTIFICATESUCCEES = 2300,
            E_OSSCSCONNECTED = 2301,
            E_PPESTARTED = 2302,
            E_PPE_UPLOAD_GGA_SUCCESSFULLY = 2303,
            E_NETABNORMAL = 3001,
            E_ACCOUNTAUTHFAIL = 3002,
            E_AKASEXPIRED = 3003,
            E_MANUALMODEACCOUNTNOTBOUND = 3004,
            E_ACCOUNTNOTACTIVATED = 3005,
            E_NOACCOUNTAVAILABLE = 3006,
            E_ACCOUNTKICK = 3007,
            E_ACCOUNTEXPIRE = 3008,
            E_ABNORMALACCOUNTCONFIG_AK_AS = 3100,
            E_ABNORMALACCOUNTCONFIG_DID_DT = 3110,
            E_PPECERTIFICATFAILSOR_ALARM = 3300,
            E_PPEFAIL = 3301,
            E_EPHEMERISDATAFAIL = 4010,
            E_BASESTATIONUNAVAILABLE = 4111,
            E_BASESTATIONOBSUNAVAILABLE = 4112,
            E_POORGNSS = 4113,
            E_STARTCOMMANDFAIL = 4114,
            E_AGE60S = 4115,
            E_SYSTEMRESOURCEEXCEPTION = 4116,
            E_CSCONNECTIONFAIL = 4300,
            E_SSLERROR = 4311
        };
    
        QXRTCM_StatusCode()
            : CommonAPI::Enumeration< uint16_t>(static_cast< uint16_t>(Literal::E_ACCOUNTAUTHSUCCEES)) {}
        QXRTCM_StatusCode(Literal _literal)
            : CommonAPI::Enumeration< uint16_t>(static_cast< uint16_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint16_t>(Literal::E_ACCOUNTAUTHSUCCEES):
                case static_cast< uint16_t>(Literal::E_PPECERTIFICATESUCCEES):
                case static_cast< uint16_t>(Literal::E_OSSCSCONNECTED):
                case static_cast< uint16_t>(Literal::E_PPESTARTED):
                case static_cast< uint16_t>(Literal::E_PPE_UPLOAD_GGA_SUCCESSFULLY):
                case static_cast< uint16_t>(Literal::E_NETABNORMAL):
                case static_cast< uint16_t>(Literal::E_ACCOUNTAUTHFAIL):
                case static_cast< uint16_t>(Literal::E_AKASEXPIRED):
                case static_cast< uint16_t>(Literal::E_MANUALMODEACCOUNTNOTBOUND):
                case static_cast< uint16_t>(Literal::E_ACCOUNTNOTACTIVATED):
                case static_cast< uint16_t>(Literal::E_NOACCOUNTAVAILABLE):
                case static_cast< uint16_t>(Literal::E_ACCOUNTKICK):
                case static_cast< uint16_t>(Literal::E_ACCOUNTEXPIRE):
                case static_cast< uint16_t>(Literal::E_ABNORMALACCOUNTCONFIG_AK_AS):
                case static_cast< uint16_t>(Literal::E_ABNORMALACCOUNTCONFIG_DID_DT):
                case static_cast< uint16_t>(Literal::E_PPECERTIFICATFAILSOR_ALARM):
                case static_cast< uint16_t>(Literal::E_PPEFAIL):
                case static_cast< uint16_t>(Literal::E_EPHEMERISDATAFAIL):
                case static_cast< uint16_t>(Literal::E_BASESTATIONUNAVAILABLE):
                case static_cast< uint16_t>(Literal::E_BASESTATIONOBSUNAVAILABLE):
                case static_cast< uint16_t>(Literal::E_POORGNSS):
                case static_cast< uint16_t>(Literal::E_STARTCOMMANDFAIL):
                case static_cast< uint16_t>(Literal::E_AGE60S):
                case static_cast< uint16_t>(Literal::E_SYSTEMRESOURCEEXCEPTION):
                case static_cast< uint16_t>(Literal::E_CSCONNECTIONFAIL):
                case static_cast< uint16_t>(Literal::E_SSLERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const QXRTCM_StatusCode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const QXRTCM_StatusCode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const QXRTCM_StatusCode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const QXRTCM_StatusCode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const QXRTCM_StatusCode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const QXRTCM_StatusCode &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint16_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint16_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint16_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint16_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint16_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint16_t>(_value)); }
    };
    
    struct UpgradeRequst : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_REQUEST = 0,
            E_RESERVED = 1
        };
    
        UpgradeRequst()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_REQUEST)) {}
        UpgradeRequst(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_REQUEST):
                case static_cast< uint8_t>(Literal::E_RESERVED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const UpgradeRequst &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const UpgradeRequst &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const UpgradeRequst &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const UpgradeRequst &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const UpgradeRequst &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const UpgradeRequst &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef std::string GPSRawData;
    typedef uint8_t UpgradeProcess;
    
    struct TBoxAPN2Operation : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_CLOSE = 0,
            E_OPEN = 1
        };
    
        TBoxAPN2Operation()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_CLOSE)) {}
        TBoxAPN2Operation(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_CLOSE):
                case static_cast< uint8_t>(Literal::E_OPEN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxAPN2Operation &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxAPN2Operation &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxAPN2Operation &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxAPN2Operation &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxAPN2Operation &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxAPN2Operation &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef std::string COMP1;
    typedef std::string FW0;
    
    struct UpgradeResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_SUCCESS = 0,
            E_FAIL_FILE_NAME_WRONG = 1,
            E_FAIL_SAFETY_FAILED = 2,
            E_FAIL_VEHICLE_CONDITION_ABNORMAL = 3,
            E_FAIL_MCU_ABNORMAL = 4,
            E_FAIL_SOC_ABNORMAL = 5,
            E_FAIL_FIRMWARE_ABNORMAL = 6,
            E_FAIL_RESERVED_1 = 7
        };
    
        UpgradeResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_SUCCESS)) {}
        UpgradeResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_SUCCESS):
                case static_cast< uint8_t>(Literal::E_FAIL_FILE_NAME_WRONG):
                case static_cast< uint8_t>(Literal::E_FAIL_SAFETY_FAILED):
                case static_cast< uint8_t>(Literal::E_FAIL_VEHICLE_CONDITION_ABNORMAL):
                case static_cast< uint8_t>(Literal::E_FAIL_MCU_ABNORMAL):
                case static_cast< uint8_t>(Literal::E_FAIL_SOC_ABNORMAL):
                case static_cast< uint8_t>(Literal::E_FAIL_FIRMWARE_ABNORMAL):
                case static_cast< uint8_t>(Literal::E_FAIL_RESERVED_1):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const UpgradeResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const UpgradeResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const UpgradeResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const UpgradeResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const UpgradeResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const UpgradeResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct LogDownloadCommand : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_DISABLE_LOG_DWN = 0,
            E_ENABLE_LOG_DWN = 1
        };
    
        LogDownloadCommand()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_DISABLE_LOG_DWN)) {}
        LogDownloadCommand(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_DISABLE_LOG_DWN):
                case static_cast< uint8_t>(Literal::E_ENABLE_LOG_DWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LogDownloadCommand &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LogDownloadCommand &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LogDownloadCommand &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LogDownloadCommand &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LogDownloadCommand &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LogDownloadCommand &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef std::vector< uint8_t> ConnectionInfo;
    typedef std::string SW1;
    
    struct UpgradeComplete : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NOTIFY = 0,
            E_RESERVED = 1
        };
    
        UpgradeComplete()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NOTIFY)) {}
        UpgradeComplete(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NOTIFY):
                case static_cast< uint8_t>(Literal::E_RESERVED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const UpgradeComplete &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const UpgradeComplete &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const UpgradeComplete &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const UpgradeComplete &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const UpgradeComplete &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const UpgradeComplete &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct TBoxResetOption : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_MANUALRESET = 0,
            E_RESERVED = 1
        };
    
        TBoxResetOption()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_MANUALRESET)) {}
        TBoxResetOption(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_MANUALRESET):
                case static_cast< uint8_t>(Literal::E_RESERVED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxResetOption &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxResetOption &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxResetOption &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxResetOption &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxResetOption &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxResetOption &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct TBoxResponse : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_ACTIONFAILED = 0,
            E_ACTIONSUCCEED = 1
        };
    
        TBoxResponse()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_ACTIONFAILED)) {}
        TBoxResponse(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_ACTIONFAILED):
                case static_cast< uint8_t>(Literal::E_ACTIONSUCCEED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxResponse &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxResponse &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxResponse &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxResponse &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxResponse &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxResponse &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct TBoxAPN2Status : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_DISCONNECTED = 0,
            E_CONNECTED = 1
        };
    
        TBoxAPN2Status()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_DISCONNECTED)) {}
        TBoxAPN2Status(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_DISCONNECTED):
                case static_cast< uint8_t>(Literal::E_CONNECTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxAPN2Status &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxAPN2Status &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxAPN2Status &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxAPN2Status &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxAPN2Status &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxAPN2Status &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef std::string FW1;
    
    struct UpgradeResponse : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_ALLOW = 0,
            E_NOTALLOW_VEHICLE_SOC_LOW = 1,
            E_NOTALLOW_VEHICLE_IS_NOT_IN_P_GEAR = 2,
            E_NOTALLOW_VEHICLE_SPEED_IS_NOT_0 = 3,
            E_NOTALLOW_T_BOX_HAS_CALL_SERVICE = 4,
            E_NOTALLOW_RESERVED_1 = 5,
            E_NOTALLOW_RESERVED_2 = 6
        };
    
        UpgradeResponse()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_ALLOW)) {}
        UpgradeResponse(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_ALLOW):
                case static_cast< uint8_t>(Literal::E_NOTALLOW_VEHICLE_SOC_LOW):
                case static_cast< uint8_t>(Literal::E_NOTALLOW_VEHICLE_IS_NOT_IN_P_GEAR):
                case static_cast< uint8_t>(Literal::E_NOTALLOW_VEHICLE_SPEED_IS_NOT_0):
                case static_cast< uint8_t>(Literal::E_NOTALLOW_T_BOX_HAS_CALL_SERVICE):
                case static_cast< uint8_t>(Literal::E_NOTALLOW_RESERVED_1):
                case static_cast< uint8_t>(Literal::E_NOTALLOW_RESERVED_2):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const UpgradeResponse &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const UpgradeResponse &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const UpgradeResponse &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const UpgradeResponse &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const UpgradeResponse &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const UpgradeResponse &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef std::string GPSInfo;
    typedef std::string SW0;
    typedef std::vector< uint8_t> TBOXCorrection_RTCM32;
};

const char* TBoxSystemFunctions::getInterface() {
    return ("GREATWALL.TBOX.TBoxSystemFunctions:v1_0");
}

CommonAPI::Version TBoxSystemFunctions::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_BOX_SYSTEM_FUNCTIONS_HPP_
