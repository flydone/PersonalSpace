/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/TBOX/TBoxSystemFunctionsStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace TBOX {

TBoxSystemFunctionsStubDefault::TBoxSystemFunctionsStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(TBoxSystemFunctions::getInterfaceVersion()) {
}

const CommonAPI::Version& TBoxSystemFunctionsStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

TBoxSystemFunctionsStubRemoteEvent* TBoxSystemFunctionsStubDefault::initStubAdapter(const std::shared_ptr< TBoxSystemFunctionsStubAdapter> &_adapter) {
    CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData& TBoxSystemFunctionsStubDefault::getDoubleGPSDataAttribute() {
     return doubleGPSDataAttributeValue_;
 }

 const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData& TBoxSystemFunctionsStubDefault::getDoubleGPSDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDoubleGPSDataAttribute();
 }

 void TBoxSystemFunctionsStubDefault::setDoubleGPSDataAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData _value) {
     std::shared_ptr<TBoxSystemFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter,
     TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDoubleGPSDataAttribute(true);
         const bool valueChanged = (doubleGPSDataAttributeValue_ != _value);
         if (valueChanged) {
             doubleGPSDataAttributeValue_ = std::move(_value);
             fireDoubleGPSDataAttributeChanged(doubleGPSDataAttributeValue_);
         }
         stubAdapter->lockDoubleGPSDataAttribute(false);
     } else {
         const bool valueChanged = trySetDoubleGPSDataAttribute(std::move(_value));
         if (valueChanged) {
             fireDoubleGPSDataAttributeChanged(doubleGPSDataAttributeValue_);
         }
     }
}

 bool TBoxSystemFunctionsStubDefault::trySetDoubleGPSDataAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData _value) {
     if (!validateDoubleGPSDataAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<TBoxSystemFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDoubleGPSDataAttribute(true);
         valueChanged = (doubleGPSDataAttributeValue_ != _value);
         doubleGPSDataAttributeValue_ = std::move(_value);
         stubAdapter->lockDoubleGPSDataAttribute(false);
     } else {
         valueChanged = (doubleGPSDataAttributeValue_ != _value);
         doubleGPSDataAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool TBoxSystemFunctionsStubDefault::validateDoubleGPSDataAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData &_value) {
     (void)_value;
     return true;
 }


 const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData& TBoxSystemFunctionsStubDefault::getGPSDataAttribute() {
     return gPSDataAttributeValue_;
 }

 const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData& TBoxSystemFunctionsStubDefault::getGPSDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getGPSDataAttribute();
 }

 void TBoxSystemFunctionsStubDefault::setGPSDataAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData _value) {
     std::shared_ptr<TBoxSystemFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter,
     TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockGPSDataAttribute(true);
         const bool valueChanged = (gPSDataAttributeValue_ != _value);
         if (valueChanged) {
             gPSDataAttributeValue_ = std::move(_value);
             fireGPSDataAttributeChanged(gPSDataAttributeValue_);
         }
         stubAdapter->lockGPSDataAttribute(false);
     } else {
         const bool valueChanged = trySetGPSDataAttribute(std::move(_value));
         if (valueChanged) {
             fireGPSDataAttributeChanged(gPSDataAttributeValue_);
         }
     }
}

 bool TBoxSystemFunctionsStubDefault::trySetGPSDataAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData _value) {
     if (!validateGPSDataAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<TBoxSystemFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockGPSDataAttribute(true);
         valueChanged = (gPSDataAttributeValue_ != _value);
         gPSDataAttributeValue_ = std::move(_value);
         stubAdapter->lockGPSDataAttribute(false);
     } else {
         valueChanged = (gPSDataAttributeValue_ != _value);
         gPSDataAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool TBoxSystemFunctionsStubDefault::validateGPSDataAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData &_value) {
     (void)_value;
     return true;
 }


 const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo& TBoxSystemFunctionsStubDefault::getGPSFunctionAttribute() {
     return gPSFunctionAttributeValue_;
 }

 const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo& TBoxSystemFunctionsStubDefault::getGPSFunctionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getGPSFunctionAttribute();
 }

 void TBoxSystemFunctionsStubDefault::setGPSFunctionAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo _value) {
     std::shared_ptr<TBoxSystemFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter,
     TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockGPSFunctionAttribute(true);
         const bool valueChanged = (gPSFunctionAttributeValue_ != _value);
         if (valueChanged) {
             gPSFunctionAttributeValue_ = std::move(_value);
             fireGPSFunctionAttributeChanged(gPSFunctionAttributeValue_);
         }
         stubAdapter->lockGPSFunctionAttribute(false);
     } else {
         const bool valueChanged = trySetGPSFunctionAttribute(std::move(_value));
         if (valueChanged) {
             fireGPSFunctionAttributeChanged(gPSFunctionAttributeValue_);
         }
     }
}

 bool TBoxSystemFunctionsStubDefault::trySetGPSFunctionAttribute(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo _value) {
     if (!validateGPSFunctionAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<TBoxSystemFunctionsStubAdapter> stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockGPSFunctionAttribute(true);
         valueChanged = (gPSFunctionAttributeValue_ != _value);
         gPSFunctionAttributeValue_ = std::move(_value);
         stubAdapter->lockGPSFunctionAttribute(false);
     } else {
         valueChanged = (gPSFunctionAttributeValue_ != _value);
         gPSFunctionAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool TBoxSystemFunctionsStubDefault::validateGPSFunctionAttributeRequestedValue(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo &_value) {
     (void)_value;
     return true;
 }



void TBoxSystemFunctionsStubDefault::TBoxDTC(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxDTCReply_t _reply) {
    (void)_client;
    TBoxSystemFunctions::TBoxDTCCode TBoxDTCCode = {};
    _reply(TBoxDTCCode);
}

void TBoxSystemFunctionsStubDefault::UpdateFileTransmit(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::UpgradeComplete _UpgradeComplete) {
    (void)_client;
    (void)_UpgradeComplete;
}

void TBoxSystemFunctionsStubDefault::TboxUpgrade(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::UpgradeRequst _UpgradeRequst) {
    (void)_client;
    (void)_UpgradeRequst;
}

void TBoxSystemFunctionsStubDefault::TBoxInfrastructureData(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxInfrastructureDataReply_t _reply) {
    (void)_client;
    TBoxSystemFunctions::SN SN = "";
    TBoxSystemFunctions::FW0 FW0 = "";
    TBoxSystemFunctions::SW0 SW0 = "";
    TBoxSystemFunctions::FW1 FW1 = "";
    TBoxSystemFunctions::SW1 SW1 = "";
    TBoxSystemFunctions::COMP1 COMP1 = "";
    TBoxSystemFunctions::COMP2 COMP2 = "";
    _reply(SN, FW0, SW0, FW1, SW1, COMP1, COMP2);
}

void TBoxSystemFunctionsStubDefault::TBoxAPN2Operation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::TBoxAPN2Operation _TBoxAPN2Operation, TBoxAPN2OperationReply_t _reply) {
    (void)_client;
    (void)_TBoxAPN2Operation;
    TBoxSystemFunctions::TBoxResponse TBoxResponse = TBoxSystemFunctions::TBoxResponse::E_ACTIONFAILED;
    TBoxSystemFunctions::TBoxAPN2Status TBoxAPN2Status = TBoxSystemFunctions::TBoxAPN2Status::E_DISCONNECTED;
    if (!TBoxResponse.validate()) {
        return;
    }
    if (!TBoxAPN2Status.validate()) {
        return;
    }
    _reply(TBoxResponse, TBoxAPN2Status);
}

void TBoxSystemFunctionsStubDefault::TBoxLoggingDownload(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::LogDownloadCommand _LogDownloadCommand, TBoxLoggingDownloadReply_t _reply) {
    (void)_client;
    (void)_LogDownloadCommand;
    TBoxSystemFunctions::ConnectionInfo ConnectionInfo = {};
    _reply(ConnectionInfo);
}

void TBoxSystemFunctionsStubDefault::TBoxReset(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::TBoxResetOption _TBoxResetOption, TBoxResetReply_t _reply) {
    (void)_client;
    (void)_TBoxResetOption;
    TBoxSystemFunctions::TBoxResponse TBoxResponse = TBoxSystemFunctions::TBoxResponse::E_ACTIONFAILED;
    if (!TBoxResponse.validate()) {
        return;
    }
    _reply(TBoxResponse);
}

void TBoxSystemFunctionsStubDefault::TBoxAPN2Status(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxAPN2StatusReply_t _reply) {
    (void)_client;
    TBoxSystemFunctions::TBoxAPN2Status TBoxAPN2Status = TBoxSystemFunctions::TBoxAPN2Status::E_DISCONNECTED;
    if (!TBoxAPN2Status.validate()) {
        return;
    }
    _reply(TBoxAPN2Status);
}


void TBoxSystemFunctionsStubDefault::fireUpgradeProcessEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeProcess &_UpgradeProcess) {
    TBoxSystemFunctionsStub::fireUpgradeProcessEvent(_UpgradeProcess);
}
void TBoxSystemFunctionsStubDefault::fireHeartbeatCheckEvent() {
    TBoxSystemFunctionsStub::fireHeartbeatCheckEvent();
}
void TBoxSystemFunctionsStubDefault::fireTboxUpgradeEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResponse &_UpgradeResponse) {
    if (!_UpgradeResponse.validate()) {
        return;
    }
    TBoxSystemFunctionsStub::fireTboxUpgradeEvent(_UpgradeResponse);
}
void TBoxSystemFunctionsStubDefault::fireTBOXCorrectionRTCMDataEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::TBOXCorrection_RTCM32 &_TBOXCorrection_RTCM32) {
    TBoxSystemFunctionsStub::fireTBOXCorrectionRTCMDataEvent(_TBOXCorrection_RTCM32);
}
void TBoxSystemFunctionsStubDefault::fireQXRTCM_StatusInfoEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::QXRTCM_StatusCode &_QXRTCM_StatusCode) {
    if (!_QXRTCM_StatusCode.validate()) {
        return;
    }
    TBoxSystemFunctionsStub::fireQXRTCM_StatusInfoEvent(_QXRTCM_StatusCode);
}
void TBoxSystemFunctionsStubDefault::fireUpgradeResultEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResult &_UpgradeResult) {
    if (!_UpgradeResult.validate()) {
        return;
    }
    TBoxSystemFunctionsStub::fireUpgradeResultEvent(_UpgradeResult);
}


TBoxSystemFunctionsStubDefault::RemoteEventHandler::RemoteEventHandler(TBoxSystemFunctionsStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1
