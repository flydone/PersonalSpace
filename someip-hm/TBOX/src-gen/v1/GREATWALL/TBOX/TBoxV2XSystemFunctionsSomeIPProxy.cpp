/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/TBOX/TBoxV2XSystemFunctionsSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createTBoxV2XSystemFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< TBoxV2XSystemFunctionsSomeIPProxy>(_address, _connection);
}

void initializeTBoxV2XSystemFunctionsSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.TBOX.TBoxV2XSystemFunctions:v1_0:TBoxV2XSystemFunctions01",
        0x208, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         TBoxV2XSystemFunctions::getInterface(),
         &createTBoxV2XSystemFunctionsSomeIPProxy);
}

INITIALIZER(registerTBoxV2XSystemFunctionsSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeTBoxV2XSystemFunctionsSomeIPProxy);
}

TBoxV2XSystemFunctionsSomeIPProxy::TBoxV2XSystemFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          v2XFunctionStatus_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x9001), CommonAPI::SomeIP::method_id_t(0x1001), false, false, static_cast< ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XStatusDeployment_t* >(nullptr))
    {
    }

    TBoxV2XSystemFunctionsSomeIPProxy::V2XFunctionStatusAttribute& TBoxV2XSystemFunctionsSomeIPProxy::getV2XFunctionStatusAttribute() {
        return v2XFunctionStatus_;
    }


        void TBoxV2XSystemFunctionsSomeIPProxy::V2XLockSwitch(const TBoxV2XSystemFunctions::V2XLOCKRequest &_V2XLOCKRequest, CommonAPI::CallStatus &_internalCallStatus, TBoxV2XSystemFunctions::V2XLOCKRespone &_V2XLOCKRespone, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< TBoxV2XSystemFunctions::V2XLOCKRequest, ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKRequestDeployment_t> deploy_V2XLOCKRequest(_V2XLOCKRequest, static_cast< ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKRequestDeployment_t* >(nullptr));
            CommonAPI::Deployable< TBoxV2XSystemFunctions::V2XLOCKRespone, ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKResponeDeployment_t> deploy_V2XLOCKRespone(static_cast< ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKResponeDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxV2XSystemFunctions::V2XLOCKRequest,
                        ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKRequestDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        TBoxV2XSystemFunctions::V2XLOCKRespone,
                        ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKResponeDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_V2XLOCKRequest,
    _internalCallStatus,
    deploy_V2XLOCKRespone);
    _V2XLOCKRespone = deploy_V2XLOCKRespone.getValue();
    }
    std::future<CommonAPI::CallStatus> TBoxV2XSystemFunctionsSomeIPProxy::V2XLockSwitchAsync(const TBoxV2XSystemFunctions::V2XLOCKRequest &_V2XLOCKRequest, V2XLockSwitchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< TBoxV2XSystemFunctions::V2XLOCKRequest, ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKRequestDeployment_t> deploy_V2XLOCKRequest(_V2XLOCKRequest, static_cast< ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKRequestDeployment_t* >(nullptr));
        CommonAPI::Deployable< TBoxV2XSystemFunctions::V2XLOCKRespone, ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKResponeDeployment_t> deploy_V2XLOCKRespone(static_cast< ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKResponeDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxV2XSystemFunctions::V2XLOCKRequest,
                    ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKRequestDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    TBoxV2XSystemFunctions::V2XLOCKRespone,
                    ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKResponeDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_V2XLOCKRequest,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TBoxV2XSystemFunctions::V2XLOCKRespone, ::v1::GREATWALL::TBOX::TBoxV2XSystemFunctions_::V2XLOCKResponeDeployment_t > _V2XLOCKRespone) {
                if (_callback)
                    _callback(_internalCallStatus, _V2XLOCKRespone.getValue());
            },
            std::make_tuple(deploy_V2XLOCKRespone));
    }



    void TBoxV2XSystemFunctionsSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1
