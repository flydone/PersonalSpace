/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_SPE_Location_5_G_STUB_DEFAULT_HPP_
#define V1_GREATWALL_TBOX_SPE_Location_5_G_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/GREATWALL/TBOX/SPELocation_5GStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace TBOX {

/**
 * Provides a default implementation for SPELocation_5GStubRemoteEvent and
 * SPELocation_5GStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT SPELocation_5GStubDefault
    : public virtual SPELocation_5GStub {
public:
    COMMONAPI_EXPORT SPELocation_5GStubDefault();

    COMMONAPI_EXPORT SPELocation_5GStubRemoteEvent* initStubAdapter(const std::shared_ptr< SPELocation_5GStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct& getNtfSPELocationAttribute();
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct& getNtfSPELocationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setNtfSPELocationAttribute(::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct _value);



    
protected:
    COMMONAPI_EXPORT virtual bool trySetNtfSPELocationAttribute(::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct _value);
    COMMONAPI_EXPORT virtual bool validateNtfSPELocationAttributeRequestedValue(const ::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct &_value);
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual SPELocation_5GStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(SPELocation_5GStubDefault *_defaultStub);



    private:
        SPELocation_5GStubDefault *defaultStub_;
    };
protected:
    SPELocation_5GStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    ::v1::GREATWALL::TBOX::SPELocation_5G::SPELocationStruct ntfSPELocationAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_SPE_Location_5_G_STUB_DEFAULT
