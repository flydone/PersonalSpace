/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_Box_System_Functions_STUB_HPP_
#define V1_GREATWALL_TBOX_T_Box_System_Functions_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/GREATWALL/TBOX/TBoxSystemFunctions.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service TBoxSystemFunctions. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class TBoxSystemFunctionsStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual TBoxSystemFunctions {
 public:
    ///Notifies all remote listeners about a change of value of the attribute DoubleGPSData.
    virtual void fireDoubleGPSDataAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData& DoubleGPSData) = 0;
    ///Notifies all remote listeners about a change of value of the attribute GPSData.
    virtual void fireGPSDataAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData& GPSData) = 0;
    ///Notifies all remote listeners about a change of value of the attribute GPSFunction.
    virtual void fireGPSFunctionAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo& GPSFunction) = 0;

    /**
    * Sends a broadcast event for UpgradeProcess. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireUpgradeProcessEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeProcess &_UpgradeProcess) = 0;
    /**
    * Sends a broadcast event for HeartbeatCheck. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireHeartbeatCheckEvent() = 0;
    /**
    * Sends a broadcast event for TboxUpgrade. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireTboxUpgradeEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResponse &_UpgradeResponse) = 0;
    /**
    * Sends a broadcast event for TBOXCorrectionRTCMData. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireTBOXCorrectionRTCMDataEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::TBOXCorrection_RTCM32 &_TBOXCorrection_RTCM32) = 0;
    /**
    * Sends a broadcast event for QXRTCM_StatusInfo. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireQXRTCM_StatusInfoEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::QXRTCM_StatusCode &_QXRTCM_StatusCode) = 0;
    /**
    * Sends a broadcast event for UpgradeResult. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireUpgradeResultEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResult &_UpgradeResult) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockDoubleGPSDataAttribute(bool _lockAccess) {
        if (_lockAccess) {
            doubleGPSDataMutex_.lock();
        } else {
            doubleGPSDataMutex_.unlock();
        }
    }
    void lockGPSDataAttribute(bool _lockAccess) {
        if (_lockAccess) {
            gPSDataMutex_.lock();
        } else {
            gPSDataMutex_.unlock();
        }
    }
    void lockGPSFunctionAttribute(bool _lockAccess) {
        if (_lockAccess) {
            gPSFunctionMutex_.lock();
        } else {
            gPSFunctionMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

    std::recursive_mutex doubleGPSDataMutex_;
    std::recursive_mutex gPSDataMutex_;
    std::recursive_mutex gPSFunctionMutex_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for TBoxSystemFunctions.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TBoxSystemFunctionsStubRemoteEvent
{
public:
    virtual ~TBoxSystemFunctionsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service TBoxSystemFunctions to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TBoxSystemFunctionsStub
    : public virtual CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>
{
public:
    typedef std::function<void (TBoxSystemFunctions::TBoxDTCCode _TBoxDTCCode)>TBoxDTCReply_t;
    typedef std::function<void (TBoxSystemFunctions::SN _SN, TBoxSystemFunctions::FW0 _FW0, TBoxSystemFunctions::SW0 _SW0, TBoxSystemFunctions::FW1 _FW1, TBoxSystemFunctions::SW1 _SW1, TBoxSystemFunctions::COMP1 _COMP1, TBoxSystemFunctions::COMP2 _COMP2)>TBoxInfrastructureDataReply_t;
    typedef std::function<void (TBoxSystemFunctions::TBoxResponse _TBoxResponse, TBoxSystemFunctions::TBoxAPN2Status _TBoxAPN2Status)>TBoxAPN2OperationReply_t;
    typedef std::function<void (TBoxSystemFunctions::ConnectionInfo _ConnectionInfo)>TBoxLoggingDownloadReply_t;
    typedef std::function<void (TBoxSystemFunctions::TBoxResponse _TBoxResponse)>TBoxResetReply_t;
    typedef std::function<void (TBoxSystemFunctions::TBoxAPN2Status _TBoxAPN2Status)>TBoxAPN2StatusReply_t;

    virtual ~TBoxSystemFunctionsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }

    /// Provides getter access to the attribute DoubleGPSData
    virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData &getDoubleGPSDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDoubleGPSDataAttributeChanged(::v1::GREATWALL::TBOX::TBoxSystemFunctions::DoubleGPSRawData _value) {
    auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDoubleGPSDataAttributeChanged(_value);
    }
    void lockDoubleGPSDataAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDoubleGPSDataAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute GPSData
    virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData &getGPSDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireGPSDataAttributeChanged(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSRawData _value) {
    auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireGPSDataAttributeChanged(_value);
    }
    void lockGPSDataAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockGPSDataAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute GPSFunction
    virtual const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo &getGPSFunctionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireGPSFunctionAttributeChanged(::v1::GREATWALL::TBOX::TBoxSystemFunctions::GPSInfo _value) {
    auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireGPSFunctionAttributeChanged(_value);
    }
    void lockGPSFunctionAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockGPSFunctionAttribute(_lockAccess);
    }

    /// This is the method that will be called on remote calls on the method TBoxDTC.
    virtual void TBoxDTC(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxDTCReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method UpdateFileTransmit.
    virtual void UpdateFileTransmit(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::UpgradeComplete _UpgradeComplete) = 0;
    /// This is the method that will be called on remote calls on the method TboxUpgrade.
    virtual void TboxUpgrade(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::UpgradeRequst _UpgradeRequst) = 0;
    /// This is the method that will be called on remote calls on the method TBoxInfrastructureData.
    virtual void TBoxInfrastructureData(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxInfrastructureDataReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method TBoxAPN2Operation.
    virtual void TBoxAPN2Operation(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::TBoxAPN2Operation _TBoxAPN2Operation, TBoxAPN2OperationReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method TBoxLoggingDownload.
    virtual void TBoxLoggingDownload(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::LogDownloadCommand _LogDownloadCommand, TBoxLoggingDownloadReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method TBoxReset.
    virtual void TBoxReset(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxSystemFunctions::TBoxResetOption _TBoxResetOption, TBoxResetReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method TBoxAPN2Status.
    virtual void TBoxAPN2Status(const std::shared_ptr<CommonAPI::ClientId> _client, TBoxAPN2StatusReply_t _reply) = 0;
    /// Sends a broadcast event for UpgradeProcess.
    virtual void fireUpgradeProcessEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeProcess &_UpgradeProcess) {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireUpgradeProcessEvent(_UpgradeProcess);
    }
    /// Sends a broadcast event for HeartbeatCheck.
    virtual void fireHeartbeatCheckEvent() {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireHeartbeatCheckEvent();
    }
    /// Sends a broadcast event for TboxUpgrade.
    virtual void fireTboxUpgradeEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResponse &_UpgradeResponse) {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireTboxUpgradeEvent(_UpgradeResponse);
    }
    /// Sends a broadcast event for TBOXCorrectionRTCMData.
    virtual void fireTBOXCorrectionRTCMDataEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::TBOXCorrection_RTCM32 &_TBOXCorrection_RTCM32) {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireTBOXCorrectionRTCMDataEvent(_TBOXCorrection_RTCM32);
    }
    /// Sends a broadcast event for QXRTCM_StatusInfo.
    virtual void fireQXRTCM_StatusInfoEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::QXRTCM_StatusCode &_QXRTCM_StatusCode) {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireQXRTCM_StatusInfoEvent(_QXRTCM_StatusCode);
    }
    /// Sends a broadcast event for UpgradeResult.
    virtual void fireUpgradeResultEvent(const ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResult &_UpgradeResult) {
        auto stubAdapter = CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireUpgradeResultEvent(_UpgradeResult);
    }

    
    using CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<TBoxSystemFunctionsStubAdapter, TBoxSystemFunctionsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef TBoxSystemFunctionsStubRemoteEvent RemoteEventType;
    typedef TBoxSystemFunctions StubInterface;
};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_Box_System_Functions_STUB_HPP_
