/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_SYSTEM_FUNCTIONS_SOMEIP_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_BOX_SYSTEM_FUNCTIONS_SOMEIP_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxSystemFunctionsProxyBase.hpp>
#include <v1/GREATWALL/TBOX/TBoxSystemFunctionsSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Attribute.hpp>
#include <CommonAPI/SomeIP/Event.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace TBOX {

class TBoxSystemFunctionsSomeIPProxy
    : virtual public TBoxSystemFunctionsProxyBase,
    virtual public CommonAPI::SomeIP::Proxy {
public:
    TBoxSystemFunctionsSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~TBoxSystemFunctionsSomeIPProxy() { }

    virtual DoubleGPSDataAttribute& getDoubleGPSDataAttribute();
    virtual GPSDataAttribute& getGPSDataAttribute();
    virtual GPSFunctionAttribute& getGPSFunctionAttribute();

    virtual UpgradeProcessEvent& getUpgradeProcessEvent();
    virtual HeartbeatCheckEvent& getHeartbeatCheckEvent();
    virtual TboxUpgradeEvent& getTboxUpgradeEvent();
    virtual TBOXCorrectionRTCMDataEvent& getTBOXCorrectionRTCMDataEvent();
    virtual QXRTCM_StatusInfoEvent& getQXRTCM_StatusInfoEvent();
    virtual UpgradeResultEvent& getUpgradeResultEvent();

    virtual void TBoxDTC(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxDTCCode &_TBoxDTCCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxDTCAsync(TBoxDTCAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void UpdateFileTransmit(const TBoxSystemFunctions::UpgradeComplete &_UpgradeComplete, CommonAPI::CallStatus &_internalCallStatus);
    virtual void TboxUpgrade(const TBoxSystemFunctions::UpgradeRequst &_UpgradeRequst, CommonAPI::CallStatus &_internalCallStatus);
    virtual void TBoxInfrastructureData(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::SN &_SN, TBoxSystemFunctions::FW0 &_FW0, TBoxSystemFunctions::SW0 &_SW0, TBoxSystemFunctions::FW1 &_FW1, TBoxSystemFunctions::SW1 &_SW1, TBoxSystemFunctions::COMP1 &_COMP1, TBoxSystemFunctions::COMP2 &_COMP2, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxInfrastructureDataAsync(TBoxInfrastructureDataAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void TBoxAPN2Operation(const TBoxSystemFunctions::TBoxAPN2Operation &_TBoxAPN2Operation, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxResponse &_TBoxResponse, TBoxSystemFunctions::TBoxAPN2Status &_TBoxAPN2Status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxAPN2OperationAsync(const TBoxSystemFunctions::TBoxAPN2Operation &_TBoxAPN2Operation, TBoxAPN2OperationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void TBoxLoggingDownload(const TBoxSystemFunctions::LogDownloadCommand &_LogDownloadCommand, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::ConnectionInfo &_ConnectionInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxLoggingDownloadAsync(const TBoxSystemFunctions::LogDownloadCommand &_LogDownloadCommand, TBoxLoggingDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void TBoxReset(const TBoxSystemFunctions::TBoxResetOption &_TBoxResetOption, CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxResponse &_TBoxResponse, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxResetAsync(const TBoxSystemFunctions::TBoxResetOption &_TBoxResetOption, TBoxResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void TBoxAPN2Status(CommonAPI::CallStatus &_internalCallStatus, TBoxSystemFunctions::TBoxAPN2Status &_TBoxAPN2Status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> TBoxAPN2StatusAsync(TBoxAPN2StatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

private:

    CommonAPI::SomeIP::ObservableAttribute<CommonAPI::SomeIP::ReadonlyAttribute<DoubleGPSDataAttribute, CommonAPI::SomeIP::StringDeployment>> doubleGPSData_;
    CommonAPI::SomeIP::ObservableAttribute<CommonAPI::SomeIP::ReadonlyAttribute<GPSDataAttribute, CommonAPI::SomeIP::StringDeployment>> gPSData_;
    CommonAPI::SomeIP::ObservableAttribute<CommonAPI::SomeIP::ReadonlyAttribute<GPSFunctionAttribute, CommonAPI::SomeIP::StringDeployment>> gPSFunction_;

     CommonAPI::SomeIP::Event<UpgradeProcessEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeProcess, CommonAPI::SomeIP::IntegerDeployment<uint8_t> >> upgradeProcess_;
     CommonAPI::SomeIP::Event<HeartbeatCheckEvent> heartbeatCheck_;
     CommonAPI::SomeIP::Event<TboxUpgradeEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResponse, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeResponseDeployment_t >> tboxUpgrade_;
     CommonAPI::SomeIP::Event<TBOXCorrectionRTCMDataEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxSystemFunctions::TBOXCorrection_RTCM32, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::TBOXCorrection_RTCM32Deployment_t >> tBOXCorrectionRTCMData_;
     CommonAPI::SomeIP::Event<QXRTCM_StatusInfoEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxSystemFunctions::QXRTCM_StatusCode, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::QXRTCM_StatusCodeDeployment_t >> qXRTCM_StatusInfo_;
     CommonAPI::SomeIP::Event<UpgradeResultEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxSystemFunctions::UpgradeResult, ::v1::GREATWALL::TBOX::TBoxSystemFunctions_::UpgradeResultDeployment_t >> upgradeResult_;

};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_TBOX_T_Box_System_Functions_SOMEIP_PROXY_HPP_
