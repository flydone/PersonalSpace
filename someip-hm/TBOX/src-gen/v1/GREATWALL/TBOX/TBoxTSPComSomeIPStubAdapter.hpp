/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_TSP_COM_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GREATWALL_TBOX_T_BOX_TSP_COM_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/GREATWALL/TBOX/TBoxTSPComStub.hpp>
#include <v1/GREATWALL/TBOX/TBoxTSPComSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename _Stub = ::v1::GREATWALL::TBOX::TBoxTSPComStub, typename... _Stubs>
class TBoxTSPComSomeIPStubAdapterInternal
    : public virtual TBoxTSPComStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> TBoxTSPComSomeIPStubAdapterHelper;

    ~TBoxTSPComSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        TBoxTSPComSomeIPStubAdapterHelper::deinit();
    }

    void fireTBoxTSPLoginStateAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState& value);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTSPComStub,
        CommonAPI::Version
    > getTBoxTSPComInterfaceVersionStubDispatcher;

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTSPComStub,
        ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState,
        ::v1::GREATWALL::TBOX::TBoxTSPCom_::TBoxTSPLoginStateDeployment_t
    > getTBoxTSPLoginStateAttributeStubDispatcher;


    TBoxTSPComSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        TBoxTSPComSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< TBoxTSPComStub>(_stub))
    {

                TBoxTSPComSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1001) }, &getTBoxTSPLoginStateAttributeStubDispatcher );
        
        std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9001), itsEventGroups, true);
            fireTBoxTSPLoginStateAttributeChanged(std::dynamic_pointer_cast< ::v1::GREATWALL::TBOX::TBoxTSPComStub>(_stub)->getTBoxTSPLoginStateAttribute(clientId));
        }

    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTSPComStub,
    CommonAPI::Version
    > TBoxTSPComSomeIPStubAdapterInternal<_Stub, _Stubs...>::getTBoxTSPComInterfaceVersionStubDispatcher(&TBoxTSPComStub::lockInterfaceVersionAttribute, &TBoxTSPComStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTSPComStub,
    ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState,
    ::v1::GREATWALL::TBOX::TBoxTSPCom_::TBoxTSPLoginStateDeployment_t
> TBoxTSPComSomeIPStubAdapterInternal<_Stub, _Stubs...>::getTBoxTSPLoginStateAttributeStubDispatcher(
    &TBoxTSPComStub::lockTBoxTSPLoginStateAttribute,
    &TBoxTSPComStub::getTBoxTSPLoginStateAttribute, false);

template <typename _Stub, typename... _Stubs>
void TBoxTSPComSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireTBoxTSPLoginStateAttributeChanged(const ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState& value) {
    CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState, ::v1::GREATWALL::TBOX::TBoxTSPCom_::TBoxTSPLoginStateDeployment_t> deployedValue(value, static_cast< ::v1::GREATWALL::TBOX::TBoxTSPCom_::TBoxTSPLoginStateDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::GREATWALL::TBOX::TBoxTSPCom::TBoxTSPLoginState,
                ::v1::GREATWALL::TBOX::TBoxTSPCom_::TBoxTSPLoginStateDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x9001),
        false,
        deployedValue
    );
}

template <typename _Stub = ::v1::GREATWALL::TBOX::TBoxTSPComStub, typename... _Stubs>
class TBoxTSPComSomeIPStubAdapter
    : public TBoxTSPComSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< TBoxTSPComSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    TBoxTSPComSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          TBoxTSPComSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_TBOX_T_Box_TSP_Com_SOMEIP_STUB_ADAPTER_HPP_
