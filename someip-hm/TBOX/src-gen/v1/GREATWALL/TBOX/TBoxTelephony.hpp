/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_TELEPHONY_HPP_
#define V1_GREATWALL_TBOX_T_BOX_TELEPHONY_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

class TBoxTelephony {
public:
    virtual ~TBoxTelephony() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    typedef std::vector< uint8_t> TBoxTelephoneNumber;
    typedef uint16_t MCC;
    typedef std::string NetworkProvider;
    typedef uint8_t MNC;
    struct TBoxNetworkProviderStruct : CommonAPI::Struct< MCC, MNC, NetworkProvider> {
    
        TBoxNetworkProviderStruct()
        {
            std::get< 0>(values_) = MCC();
            std::get< 1>(values_) = MNC();
            std::get< 2>(values_) = NetworkProvider();
        }
        TBoxNetworkProviderStruct(const MCC &_MCC, const MNC &_MNC, const NetworkProvider &_NetworkProvider)
        {
            std::get< 0>(values_) = _MCC;
            std::get< 1>(values_) = _MNC;
            std::get< 2>(values_) = _NetworkProvider;
        }
        inline const MCC &getMCC() const { return std::get< 0>(values_); }
        inline void setMCC(const MCC &_value) { std::get< 0>(values_) = _value; }
        inline const MNC &getMNC() const { return std::get< 1>(values_); }
        inline void setMNC(const MNC &_value) { std::get< 1>(values_) = _value; }
        inline const NetworkProvider &getNetworkProvider() const { return std::get< 2>(values_); }
        inline void setNetworkProvider(const NetworkProvider &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const TBoxNetworkProviderStruct& _other) const {
        return (getMCC() == _other.getMCC() && getMNC() == _other.getMNC() && getNetworkProvider() == _other.getNetworkProvider());
        }
        inline bool operator!=(const TBoxNetworkProviderStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct TBoxCallType : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_I_CALL = 0,
            E_B_CALL = 1,
            E_AUTO_E_CALL = 2,
            E_MANUAL_E_CALL = 3,
            E_VOICE_CALL = 4,
            E_VIDEO_CALL = 5,
            E_E_CALLBACK = 6,
            E_INCOMING_CALL = 7
        };
    
        TBoxCallType()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_I_CALL)) {}
        TBoxCallType(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_I_CALL):
                case static_cast< uint8_t>(Literal::E_B_CALL):
                case static_cast< uint8_t>(Literal::E_AUTO_E_CALL):
                case static_cast< uint8_t>(Literal::E_MANUAL_E_CALL):
                case static_cast< uint8_t>(Literal::E_VOICE_CALL):
                case static_cast< uint8_t>(Literal::E_VIDEO_CALL):
                case static_cast< uint8_t>(Literal::E_E_CALLBACK):
                case static_cast< uint8_t>(Literal::E_INCOMING_CALL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxCallType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxCallType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxCallType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxCallType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxCallType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxCallType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct TBoxResponse : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_ACTIONFAILED = 0,
            E_ACTIONSUCCEED = 1
        };
    
        TBoxResponse()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_ACTIONFAILED)) {}
        TBoxResponse(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_ACTIONFAILED):
                case static_cast< uint8_t>(Literal::E_ACTIONSUCCEED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxResponse &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxResponse &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxResponse &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxResponse &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxResponse &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxResponse &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef std::string IMSI;
    
    struct TBoxSimMode : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OUT_OF_COVERAGE = 0,
            E_SEARCHING = 1,
            E_FLIGHT_MODE = 2,
            E_LIMITED_SERVICE = 3,
            E_FULL_SERVICE = 4
        };
    
        TBoxSimMode()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OUT_OF_COVERAGE)) {}
        TBoxSimMode(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OUT_OF_COVERAGE):
                case static_cast< uint8_t>(Literal::E_SEARCHING):
                case static_cast< uint8_t>(Literal::E_FLIGHT_MODE):
                case static_cast< uint8_t>(Literal::E_LIMITED_SERVICE):
                case static_cast< uint8_t>(Literal::E_FULL_SERVICE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxSimMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxSimMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxSimMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxSimMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxSimMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxSimMode &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct TBoxSimState : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NORMAL = 0,
            E_LOCKED = 1,
            E_NOT_EXISTS = 2,
            E_ERROR = 3
        };
    
        TBoxSimState()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NORMAL)) {}
        TBoxSimState(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NORMAL):
                case static_cast< uint8_t>(Literal::E_LOCKED):
                case static_cast< uint8_t>(Literal::E_NOT_EXISTS):
                case static_cast< uint8_t>(Literal::E_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxSimState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxSimState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxSimState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxSimState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxSimState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxSimState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    struct TBoxSimStatusStruct : CommonAPI::Struct< TBoxSimState, TBoxSimMode> {
    
        TBoxSimStatusStruct()
        {
            std::get< 0>(values_) = TBoxSimState();
            std::get< 1>(values_) = TBoxSimMode();
        }
        TBoxSimStatusStruct(const TBoxSimState &_TBoxSimState, const TBoxSimMode &_TBoxSimMode)
        {
            std::get< 0>(values_) = _TBoxSimState;
            std::get< 1>(values_) = _TBoxSimMode;
        }
        inline const TBoxSimState &getTBoxSimState() const { return std::get< 0>(values_); }
        inline void setTBoxSimState(const TBoxSimState &_value) { std::get< 0>(values_) = _value; }
        inline const TBoxSimMode &getTBoxSimMode() const { return std::get< 1>(values_); }
        inline void setTBoxSimMode(const TBoxSimMode &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const TBoxSimStatusStruct& _other) const {
        return (getTBoxSimState() == _other.getTBoxSimState() && getTBoxSimMode() == _other.getTBoxSimMode());
        }
        inline bool operator!=(const TBoxSimStatusStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct TBoxCallOperation : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_RESUME = 0,
            E_PAUSE = 1,
            E_ACCEPT = 2,
            E_REJECT = 3,
            E_HANGUP = 4,
            E_NOT_AUTHORIZED = 5
        };
    
        TBoxCallOperation()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_RESUME)) {}
        TBoxCallOperation(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_RESUME):
                case static_cast< uint8_t>(Literal::E_PAUSE):
                case static_cast< uint8_t>(Literal::E_ACCEPT):
                case static_cast< uint8_t>(Literal::E_REJECT):
                case static_cast< uint8_t>(Literal::E_HANGUP):
                case static_cast< uint8_t>(Literal::E_NOT_AUTHORIZED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxCallOperation &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxCallOperation &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxCallOperation &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxCallOperation &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxCallOperation &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxCallOperation &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef int64_t long64;
    typedef std::string IMEI;
    typedef std::string ICCID;
    
    struct TBoxNetType : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NONETWORKAVAILABLE = 0,
            E_GPRS = 1,
            E_EGPRS = 2,
            E_WCDMA = 3,
            E_HSDPA = 4,
            E_LTE = 5,
            E_5G = 6
        };
    
        TBoxNetType()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NONETWORKAVAILABLE)) {}
        TBoxNetType(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NONETWORKAVAILABLE):
                case static_cast< uint8_t>(Literal::E_GPRS):
                case static_cast< uint8_t>(Literal::E_EGPRS):
                case static_cast< uint8_t>(Literal::E_WCDMA):
                case static_cast< uint8_t>(Literal::E_HSDPA):
                case static_cast< uint8_t>(Literal::E_LTE):
                case static_cast< uint8_t>(Literal::E_5G):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxNetType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxNetType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxNetType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxNetType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxNetType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxNetType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef int16_t SignalStrenghRawData;
    struct TBoxSignalStrengthStruct : CommonAPI::Struct< TBoxNetType, SignalStrenghRawData> {
    
        TBoxSignalStrengthStruct()
        {
            std::get< 0>(values_) = TBoxNetType();
            std::get< 1>(values_) = SignalStrenghRawData();
        }
        TBoxSignalStrengthStruct(const TBoxNetType &_TBoxNetType, const SignalStrenghRawData &_SignalStrengthRawData)
        {
            std::get< 0>(values_) = _TBoxNetType;
            std::get< 1>(values_) = _SignalStrengthRawData;
        }
        inline const TBoxNetType &getTBoxNetType() const { return std::get< 0>(values_); }
        inline void setTBoxNetType(const TBoxNetType &_value) { std::get< 0>(values_) = _value; }
        inline const SignalStrenghRawData &getSignalStrengthRawData() const { return std::get< 1>(values_); }
        inline void setSignalStrengthRawData(const SignalStrenghRawData &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const TBoxSignalStrengthStruct& _other) const {
        return (getTBoxNetType() == _other.getTBoxNetType() && getSignalStrengthRawData() == _other.getSignalStrengthRawData());
        }
        inline bool operator!=(const TBoxSignalStrengthStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct TBoxCallState : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_IDLE = 0,
            E_DIALING = 1,
            E_CALLING = 2,
            E_REMOTE_CALLING = 3,
            E_ACCEPTED = 4,
            E_REMOTE_ACCEPTED = 5,
            E_ON_GOING = 6,
            E_ON_HOLD = 7,
            E_HANGUP = 8,
            E_REMOTE_HANGUP = 9,
            E_REJECTED = 10,
            E_REMOTE_REJECTED = 11,
            E_NO_ANSWER = 12,
            E_BUSY = 13,
            E_CONNECTION_ERROR = 14,
            E_ECALL_ACTIVATED = 15,
            E_TERMINATED = 16
        };
    
        TBoxCallState()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_IDLE)) {}
        TBoxCallState(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_IDLE):
                case static_cast< uint8_t>(Literal::E_DIALING):
                case static_cast< uint8_t>(Literal::E_CALLING):
                case static_cast< uint8_t>(Literal::E_REMOTE_CALLING):
                case static_cast< uint8_t>(Literal::E_ACCEPTED):
                case static_cast< uint8_t>(Literal::E_REMOTE_ACCEPTED):
                case static_cast< uint8_t>(Literal::E_ON_GOING):
                case static_cast< uint8_t>(Literal::E_ON_HOLD):
                case static_cast< uint8_t>(Literal::E_HANGUP):
                case static_cast< uint8_t>(Literal::E_REMOTE_HANGUP):
                case static_cast< uint8_t>(Literal::E_REJECTED):
                case static_cast< uint8_t>(Literal::E_REMOTE_REJECTED):
                case static_cast< uint8_t>(Literal::E_NO_ANSWER):
                case static_cast< uint8_t>(Literal::E_BUSY):
                case static_cast< uint8_t>(Literal::E_CONNECTION_ERROR):
                case static_cast< uint8_t>(Literal::E_ECALL_ACTIVATED):
                case static_cast< uint8_t>(Literal::E_TERMINATED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TBoxCallState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TBoxCallState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TBoxCallState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TBoxCallState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TBoxCallState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TBoxCallState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
};

const char* TBoxTelephony::getInterface() {
    return ("GREATWALL.TBOX.TBoxTelephony:v1_0");
}

CommonAPI::Version TBoxTelephony::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_BOX_TELEPHONY_HPP_
