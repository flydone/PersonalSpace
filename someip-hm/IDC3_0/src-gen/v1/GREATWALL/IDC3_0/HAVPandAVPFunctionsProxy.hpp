/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_IDC3_0_HAV_Pand_AVP_Functions_PROXY_HPP_
#define V1_GREATWALL_IDC3_0_HAV_Pand_AVP_Functions_PROXY_HPP_

#include <v1/GREATWALL/IDC3_0/HAVPandAVPFunctionsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace IDC3_0 {

template <typename ... _AttributeExtensions>
class HAVPandAVPFunctionsProxy
    : virtual public HAVPandAVPFunctions,
      virtual public HAVPandAVPFunctionsProxyBase,
      virtual public _AttributeExtensions... {
public:
    HAVPandAVPFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~HAVPandAVPFunctionsProxy();

    typedef HAVPandAVPFunctions InterfaceType;



    /**
     * Returns the wrapper class that provides access to the broadcast HAVPPathMap.
     */
    virtual HAVPPathMapEvent& getHAVPPathMapEvent() {
        return delegate_->getHAVPPathMapEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast SideBsdDispErrStsInfo.
     */
    virtual SideBsdDispErrStsInfoEvent& getSideBsdDispErrStsInfoEvent() {
        return delegate_->getSideBsdDispErrStsInfoEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast AVMDispReq.
     */
    virtual AVMDispReqEvent& getAVMDispReqEvent() {
        return delegate_->getAVMDispReqEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast HAVPPathInfo.
     */
    virtual HAVPPathInfoEvent& getHAVPPathInfoEvent() {
        return delegate_->getHAVPPathInfoEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast HAVPRendergInfo.
     */
    virtual HAVPRendergInfoEvent& getHAVPRendergInfoEvent() {
        return delegate_->getHAVPRendergInfoEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast SideBsdDispStsInfo.
     */
    virtual SideBsdDispStsInfoEvent& getSideBsdDispStsInfoEvent() {
        return delegate_->getSideBsdDispStsInfoEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast HAVP_SVPScrnDispInfo.
     */
    virtual HAVP_SVPScrnDispInfoEvent& getHAVP_SVPScrnDispInfoEvent() {
        return delegate_->getHAVP_SVPScrnDispInfoEvent();
    }

    /**
     * Calls SideBsdDisp with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SideBsdDisp(const HAVPandAVPFunctions::SideBsdDispRequest &_SideBsdDispReq, CommonAPI::CallStatus &_internalCallStatus, HAVPandAVPFunctions::SideBsdDispSts &_SideBsdDispResp, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SideBsdDisp with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SideBsdDispAsync(const HAVPandAVPFunctions::SideBsdDispRequest &_SideBsdDispReq, SideBsdDispAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls AVMDispResp with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void AVMDispResp(const HAVPandAVPFunctions::AVMStsResp &_AVMStsResp, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls HAVP_SVPSwtReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void HAVP_SVPSwtReq(const HAVPandAVPFunctions::BtnEnaReq &_BtnEnaReq, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls PrkgAreaReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PrkgAreaReq(const HAVPandAVPFunctions::SetPrkgArea &_SetPrkgArea, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls AutoReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void AutoReq(const HAVPandAVPFunctions::AutoPushReq &_AutoPushReq, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls PrkgFlrReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PrkgFlrReq(const HAVPandAVPFunctions::SetMapFlr &_SetMapFlr, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls SVPReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SVPReq(const HAVPandAVPFunctions::SVPfunctionReq &_SVPfunctionReq, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls PrkgTypReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PrkgTypReq(const HAVPandAVPFunctions::SetPrkgSlotTyp &_SetPrkgSlotTyp, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls TarPrkgIDReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TarPrkgIDReq(const HAVPandAVPFunctions::TarMapID &_TarMapID, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls LvngPOIReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void LvngPOIReq(const HAVPandAVPFunctions::SetLvngPOI &_SetLvngPOI, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls PrkgLotMapUpdSt with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PrkgLotMapUpdSt(const HAVPandAVPFunctions::MapUpdSt &_MapUpdSt, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls NearSlotIDReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void NearSlotIDReq(const HAVPandAVPFunctions::SelNearSlotID &_SelNearSlotID, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls PrkgSlotReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PrkgSlotReq(const HAVPandAVPFunctions::SetPrkgSlot &_SetPrkgSlot, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls HAVPReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void HAVPReq(const HAVPandAVPFunctions::HAVPfunctionReq &_HAVPfunctionReq, CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< HAVPandAVPFunctionsProxyBase> delegate_;
};

typedef HAVPandAVPFunctionsProxy<> HAVPandAVPFunctionsProxyDefault;


//
// HAVPandAVPFunctionsProxy Implementation
//
template <typename ... _AttributeExtensions>
HAVPandAVPFunctionsProxy<_AttributeExtensions...>::HAVPandAVPFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< HAVPandAVPFunctionsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< HAVPandAVPFunctionsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
HAVPandAVPFunctionsProxy<_AttributeExtensions...>::~HAVPandAVPFunctionsProxy() {
}

template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::SideBsdDisp(const HAVPandAVPFunctions::SideBsdDispRequest &_SideBsdDispReq, CommonAPI::CallStatus &_internalCallStatus, HAVPandAVPFunctions::SideBsdDispSts &_SideBsdDispResp, const CommonAPI::CallInfo *_info) {
    if (!_SideBsdDispReq.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SideBsdDisp(_SideBsdDispReq, _internalCallStatus, _SideBsdDispResp, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> HAVPandAVPFunctionsProxy<_AttributeExtensions...>::SideBsdDispAsync(const HAVPandAVPFunctions::SideBsdDispRequest &_SideBsdDispReq, SideBsdDispAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_SideBsdDispReq.validate()) {
        HAVPandAVPFunctions::SideBsdDispSts SideBsdDispResp = HAVPandAVPFunctions::SideBsdDispSts::E_OFF;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, SideBsdDispResp);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SideBsdDispAsync(_SideBsdDispReq, _callback, _info);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::AVMDispResp(const HAVPandAVPFunctions::AVMStsResp &_AVMStsResp, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_AVMStsResp.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->AVMDispResp(_AVMStsResp, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::HAVP_SVPSwtReq(const HAVPandAVPFunctions::BtnEnaReq &_BtnEnaReq, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_BtnEnaReq.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->HAVP_SVPSwtReq(_BtnEnaReq, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::PrkgAreaReq(const HAVPandAVPFunctions::SetPrkgArea &_SetPrkgArea, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->PrkgAreaReq(_SetPrkgArea, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::AutoReq(const HAVPandAVPFunctions::AutoPushReq &_AutoPushReq, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_AutoPushReq.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->AutoReq(_AutoPushReq, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::PrkgFlrReq(const HAVPandAVPFunctions::SetMapFlr &_SetMapFlr, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->PrkgFlrReq(_SetMapFlr, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::SVPReq(const HAVPandAVPFunctions::SVPfunctionReq &_SVPfunctionReq, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_SVPfunctionReq.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SVPReq(_SVPfunctionReq, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::PrkgTypReq(const HAVPandAVPFunctions::SetPrkgSlotTyp &_SetPrkgSlotTyp, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_SetPrkgSlotTyp.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->PrkgTypReq(_SetPrkgSlotTyp, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::TarPrkgIDReq(const HAVPandAVPFunctions::TarMapID &_TarMapID, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->TarPrkgIDReq(_TarMapID, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::LvngPOIReq(const HAVPandAVPFunctions::SetLvngPOI &_SetLvngPOI, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->LvngPOIReq(_SetLvngPOI, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::PrkgLotMapUpdSt(const HAVPandAVPFunctions::MapUpdSt &_MapUpdSt, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_MapUpdSt.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->PrkgLotMapUpdSt(_MapUpdSt, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::NearSlotIDReq(const HAVPandAVPFunctions::SelNearSlotID &_SelNearSlotID, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->NearSlotIDReq(_SelNearSlotID, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::PrkgSlotReq(const HAVPandAVPFunctions::SetPrkgSlot &_SetPrkgSlot, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->PrkgSlotReq(_SetPrkgSlot, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void HAVPandAVPFunctionsProxy<_AttributeExtensions...>::HAVPReq(const HAVPandAVPFunctions::HAVPfunctionReq &_HAVPfunctionReq, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_HAVPfunctionReq.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->HAVPReq(_HAVPfunctionReq, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &HAVPandAVPFunctionsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool HAVPandAVPFunctionsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool HAVPandAVPFunctionsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& HAVPandAVPFunctionsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& HAVPandAVPFunctionsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace IDC3_0
} // namespace GREATWALL
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_IDC3_0_HAV_Pand_AVP_Functions_PROXY_HPP_
