/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_IDC3_0_HAV_PAND_AVP_FUNCTIONS_HPP_
#define V1_GREATWALL_IDC3_0_HAV_PAND_AVP_FUNCTIONS_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace IDC3_0 {

class HAVPandAVPFunctions {
public:
    virtual ~HAVPandAVPFunctions() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    typedef uint16_t SetPrkgSlot;
    
    struct BtnEnaReq : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NONE = 0,
            E_CONTINUE_SEARCH_SLOT = 1,
            E_ACTIVE_SIGNAL = 2,
            E_START_HAVP_VR = 3,
            E_CONFRIM_MAPBUILT = 4,
            E_CANCEL = 5,
            E_CONFRIM_START_PARKING = 6,
            E_SEARCH_SLOT_ALONG_WAY = 7,
            E_HAVP_COMPLETED = 8,
            E_TRY = 9,
            E_LEARNING_COMPLETED = 10,
            E_CONTINUE_LEARN = 11,
            E_START_SVP_VR = 12
        };
    
        BtnEnaReq()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NONE)) {}
        BtnEnaReq(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NONE):
                case static_cast< uint8_t>(Literal::E_CONTINUE_SEARCH_SLOT):
                case static_cast< uint8_t>(Literal::E_ACTIVE_SIGNAL):
                case static_cast< uint8_t>(Literal::E_START_HAVP_VR):
                case static_cast< uint8_t>(Literal::E_CONFRIM_MAPBUILT):
                case static_cast< uint8_t>(Literal::E_CANCEL):
                case static_cast< uint8_t>(Literal::E_CONFRIM_START_PARKING):
                case static_cast< uint8_t>(Literal::E_SEARCH_SLOT_ALONG_WAY):
                case static_cast< uint8_t>(Literal::E_HAVP_COMPLETED):
                case static_cast< uint8_t>(Literal::E_TRY):
                case static_cast< uint8_t>(Literal::E_LEARNING_COMPLETED):
                case static_cast< uint8_t>(Literal::E_CONTINUE_LEARN):
                case static_cast< uint8_t>(Literal::E_START_SVP_VR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BtnEnaReq &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BtnEnaReq &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BtnEnaReq &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BtnEnaReq &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BtnEnaReq &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BtnEnaReq &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct SVPFunctTextDisp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NONE = 0,
            E_PLEASE_CONFIRM_FINAL_POSITION_CLICK_START = 1,
            E_RELEASE_THE_BRAKES_AND_WE_SET_OFF = 2,
            E_DRIVE_TO_YOUR_TERMINAL_SLOT = 3,
            E_DRIVE_TO_YOUR_TERMINAL_EXIT = 4,
            E_PARK_IN_CRUISING = 5,
            E_TURN_LEFT = 6,
            E_TURN_RIGHT = 7,
            E_CROSSING = 8,
            E_NARROW_ROAD = 9,
            E_ROAD_DIFFICULT_HELP_ME_DRIVE = 10,
            E_INTO_THE_RAMP = 11,
            E_OUT_OF_THE_RAMP = 12,
            E_WAIT_FOR_THE_CAR_AHEAD = 13,
            E_GO_AROUND_THE_VEHICLE_AHEAD = 14,
            E_THE_REAR_VEHICLE_FOLLOW = 15,
            E_THE_REAR_VEHICLE = 16,
            E_PEDESTRIAN = 17,
            E_PEDESTRIAN_CROSSING = 18,
            E_AVOID_NEARBY_OBSTACLES = 19,
            E_ARRIVING_YOUR_SLOT = 20,
            E_PARK_IN_PARKING = 21,
            E_ENGINE_HOOD_OPEN = 22,
            E_TRUNK_OPEN = 23,
            E_DOOR_OPEN = 24,
            E_REARVIEW_MIRROR_FOLD = 25,
            E_SEAT_BELT_LOOSEN = 26,
            E_DRIVE_NOT_INSIDE = 27,
            E_TIMEOUT = 28,
            E_STATISTIC_OBSTACLE_30S = 29,
            E_TARGET_SLOT_OCCUPIED_PLOT_AVAILABLE_NEARBY = 30,
            E_POSITIONING_UNSUCCESSFUL = 31,
            E_ILLUMINATION_CONDITIONS = 32,
            E_RAINING_CONDITIONS = 33,
            E_SVP_FAILURE = 34,
            E_ASSOCIATED_SYSTEM_FAILURE = 35,
            E_CRUSING_TIME_OUT = 36,
            E_PARKING_TIME_OUT = 37,
            E_NUMBER_OF_PAUSES_EXCEEDED = 38,
            E_VEHICLE_RANGE_TOO_LOW = 39,
            E_RCTB_FCTB_ACTIVATION = 40,
            E_AEB_ACTIVATION = 41,
            E_ESP_ACTIVATION = 42,
            E_TCS_ABS_ACTIVATION = 43,
            E_HDC_ACTIVATION = 44,
            E_TIRE_PRESSURE_IS_TOO_LOW = 45,
            E_TARGET_SLOT_OCCUPIED_NO_SLOT_NEARBY = 46,
            E_PHONE_DISCONNECTED = 47,
            E_VIDEO_MONITOR_ABNORMAL = 48,
            E_REMOTE_DEVICE_ERROR = 49,
            E_OBSTACLE_TIMEOUT = 50,
            E_PARKINGIN_FAILURE = 51,
            E_ROUTE_MATCHING_TIMEOUT = 52,
            E_ACTIVATION_FAILED = 53,
            E_CAMERA_BLOCKED = 54,
            E_THE_LOOP_CAMERA_FAULTY = 55,
            E_RADAR_FAULTY = 56,
            E_BERTH_IN_COMPLETE = 57,
            E_BERTH_OUT_COMPLETE = 58,
            E_PULL_UP_EPB = 59,
            E_GEAR_INTERVENE = 60,
            E_STEERING_INTERVENE = 61,
            E_BRAKE_INTERVENE = 62,
            E_CRUSING_USER_EXIT = 63,
            E_CRUSING_EXCESSIVE_SLOPE = 64,
            E_VEHICLE_BACK = 65,
            E_HANDS_OFF_THE_STEERING_WHEEL = 66,
            E_DRIVING_MODE_NOT_SUPPORTED = 67,
            E_GO_AROUND_NEARBY_OBSTACLES = 68,
            E_GO_AROUND_THE_COMING_VEHICLE = 69,
            E_RELEASE_THE_BRAKE_PARKING_START = 70,
            E_AUTO_PARKING_BE_READY_TO_BRAKE = 71,
            E_PAY_ATTENTION_TO_THE_RISK_OF_SCRATCHES = 72,
            E_DETECTING_PARKING_SPACE = 73,
            E_PARKING_SUSPENDED_CLOSE_TRUNK = 74,
            E_PARKING_SUSPENDED_CLOSE_DOOR = 75,
            E_PARKING_SUSPENDED_FASTEN_SEAT_BELT = 76,
            E_PARKING_SUSPENDED_FOLD_THE_MIRROR = 77,
            E_PARKING_SUSPENDED_CLOSE_CABIN_COVER = 78,
            E_PARKING_SUSPENDED_OBSTACLES_DETECTED = 79,
            E_PARKING_SUSPENDED_PEDESTRIAN_DETECTED = 80,
            E_PARKING_SUSPENDED_VEHICLE_DETECTED = 81,
            E_PARKING_CONTINUES = 82,
            E_BRAKE_RECOVERED_CONFIRM_TO_CONTINUE = 83,
            E_CRUSING_SPEED_TOO_HIGH = 84,
            E_PARKING_SUSPENDED_PLEASE_RELEASE_THE_BREAK_PEDAL_CRUSING_SPEED_TOO_HIGH = 85,
            E_PARKING_SUSPENDED_PLEASE_RELEASE_THE_ACCELERATOR_PEDAL = 86,
            E_PLEASE_KEEP_BRAKING = 87
        };
    
        SVPFunctTextDisp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NONE)) {}
        SVPFunctTextDisp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NONE):
                case static_cast< uint8_t>(Literal::E_PLEASE_CONFIRM_FINAL_POSITION_CLICK_START):
                case static_cast< uint8_t>(Literal::E_RELEASE_THE_BRAKES_AND_WE_SET_OFF):
                case static_cast< uint8_t>(Literal::E_DRIVE_TO_YOUR_TERMINAL_SLOT):
                case static_cast< uint8_t>(Literal::E_DRIVE_TO_YOUR_TERMINAL_EXIT):
                case static_cast< uint8_t>(Literal::E_PARK_IN_CRUISING):
                case static_cast< uint8_t>(Literal::E_TURN_LEFT):
                case static_cast< uint8_t>(Literal::E_TURN_RIGHT):
                case static_cast< uint8_t>(Literal::E_CROSSING):
                case static_cast< uint8_t>(Literal::E_NARROW_ROAD):
                case static_cast< uint8_t>(Literal::E_ROAD_DIFFICULT_HELP_ME_DRIVE):
                case static_cast< uint8_t>(Literal::E_INTO_THE_RAMP):
                case static_cast< uint8_t>(Literal::E_OUT_OF_THE_RAMP):
                case static_cast< uint8_t>(Literal::E_WAIT_FOR_THE_CAR_AHEAD):
                case static_cast< uint8_t>(Literal::E_GO_AROUND_THE_VEHICLE_AHEAD):
                case static_cast< uint8_t>(Literal::E_THE_REAR_VEHICLE_FOLLOW):
                case static_cast< uint8_t>(Literal::E_THE_REAR_VEHICLE):
                case static_cast< uint8_t>(Literal::E_PEDESTRIAN):
                case static_cast< uint8_t>(Literal::E_PEDESTRIAN_CROSSING):
                case static_cast< uint8_t>(Literal::E_AVOID_NEARBY_OBSTACLES):
                case static_cast< uint8_t>(Literal::E_ARRIVING_YOUR_SLOT):
                case static_cast< uint8_t>(Literal::E_PARK_IN_PARKING):
                case static_cast< uint8_t>(Literal::E_ENGINE_HOOD_OPEN):
                case static_cast< uint8_t>(Literal::E_TRUNK_OPEN):
                case static_cast< uint8_t>(Literal::E_DOOR_OPEN):
                case static_cast< uint8_t>(Literal::E_REARVIEW_MIRROR_FOLD):
                case static_cast< uint8_t>(Literal::E_SEAT_BELT_LOOSEN):
                case static_cast< uint8_t>(Literal::E_DRIVE_NOT_INSIDE):
                case static_cast< uint8_t>(Literal::E_TIMEOUT):
                case static_cast< uint8_t>(Literal::E_STATISTIC_OBSTACLE_30S):
                case static_cast< uint8_t>(Literal::E_TARGET_SLOT_OCCUPIED_PLOT_AVAILABLE_NEARBY):
                case static_cast< uint8_t>(Literal::E_POSITIONING_UNSUCCESSFUL):
                case static_cast< uint8_t>(Literal::E_ILLUMINATION_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_RAINING_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_SVP_FAILURE):
                case static_cast< uint8_t>(Literal::E_ASSOCIATED_SYSTEM_FAILURE):
                case static_cast< uint8_t>(Literal::E_CRUSING_TIME_OUT):
                case static_cast< uint8_t>(Literal::E_PARKING_TIME_OUT):
                case static_cast< uint8_t>(Literal::E_NUMBER_OF_PAUSES_EXCEEDED):
                case static_cast< uint8_t>(Literal::E_VEHICLE_RANGE_TOO_LOW):
                case static_cast< uint8_t>(Literal::E_RCTB_FCTB_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_AEB_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_ESP_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_TCS_ABS_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_HDC_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_TIRE_PRESSURE_IS_TOO_LOW):
                case static_cast< uint8_t>(Literal::E_TARGET_SLOT_OCCUPIED_NO_SLOT_NEARBY):
                case static_cast< uint8_t>(Literal::E_PHONE_DISCONNECTED):
                case static_cast< uint8_t>(Literal::E_VIDEO_MONITOR_ABNORMAL):
                case static_cast< uint8_t>(Literal::E_REMOTE_DEVICE_ERROR):
                case static_cast< uint8_t>(Literal::E_OBSTACLE_TIMEOUT):
                case static_cast< uint8_t>(Literal::E_PARKINGIN_FAILURE):
                case static_cast< uint8_t>(Literal::E_ROUTE_MATCHING_TIMEOUT):
                case static_cast< uint8_t>(Literal::E_ACTIVATION_FAILED):
                case static_cast< uint8_t>(Literal::E_CAMERA_BLOCKED):
                case static_cast< uint8_t>(Literal::E_THE_LOOP_CAMERA_FAULTY):
                case static_cast< uint8_t>(Literal::E_RADAR_FAULTY):
                case static_cast< uint8_t>(Literal::E_BERTH_IN_COMPLETE):
                case static_cast< uint8_t>(Literal::E_BERTH_OUT_COMPLETE):
                case static_cast< uint8_t>(Literal::E_PULL_UP_EPB):
                case static_cast< uint8_t>(Literal::E_GEAR_INTERVENE):
                case static_cast< uint8_t>(Literal::E_STEERING_INTERVENE):
                case static_cast< uint8_t>(Literal::E_BRAKE_INTERVENE):
                case static_cast< uint8_t>(Literal::E_CRUSING_USER_EXIT):
                case static_cast< uint8_t>(Literal::E_CRUSING_EXCESSIVE_SLOPE):
                case static_cast< uint8_t>(Literal::E_VEHICLE_BACK):
                case static_cast< uint8_t>(Literal::E_HANDS_OFF_THE_STEERING_WHEEL):
                case static_cast< uint8_t>(Literal::E_DRIVING_MODE_NOT_SUPPORTED):
                case static_cast< uint8_t>(Literal::E_GO_AROUND_NEARBY_OBSTACLES):
                case static_cast< uint8_t>(Literal::E_GO_AROUND_THE_COMING_VEHICLE):
                case static_cast< uint8_t>(Literal::E_RELEASE_THE_BRAKE_PARKING_START):
                case static_cast< uint8_t>(Literal::E_AUTO_PARKING_BE_READY_TO_BRAKE):
                case static_cast< uint8_t>(Literal::E_PAY_ATTENTION_TO_THE_RISK_OF_SCRATCHES):
                case static_cast< uint8_t>(Literal::E_DETECTING_PARKING_SPACE):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_CLOSE_TRUNK):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_CLOSE_DOOR):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_FASTEN_SEAT_BELT):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_FOLD_THE_MIRROR):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_CLOSE_CABIN_COVER):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_OBSTACLES_DETECTED):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_PEDESTRIAN_DETECTED):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_VEHICLE_DETECTED):
                case static_cast< uint8_t>(Literal::E_PARKING_CONTINUES):
                case static_cast< uint8_t>(Literal::E_BRAKE_RECOVERED_CONFIRM_TO_CONTINUE):
                case static_cast< uint8_t>(Literal::E_CRUSING_SPEED_TOO_HIGH):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_PLEASE_RELEASE_THE_BREAK_PEDAL_CRUSING_SPEED_TOO_HIGH):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_PLEASE_RELEASE_THE_ACCELERATOR_PEDAL):
                case static_cast< uint8_t>(Literal::E_PLEASE_KEEP_BRAKING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SVPFunctTextDisp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SVPFunctTextDisp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SVPFunctTextDisp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SVPFunctTextDisp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SVPFunctTextDisp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SVPFunctTextDisp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct ActualPrkgSlotTyp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_SET = 0,
            E_SET_PRKING_SLOT = 1,
            E_SET_PRKING_SLOT_AREA = 2,
            E_RANDOM = 3
        };
    
        ActualPrkgSlotTyp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_SET)) {}
        ActualPrkgSlotTyp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_SET):
                case static_cast< uint8_t>(Literal::E_SET_PRKING_SLOT):
                case static_cast< uint8_t>(Literal::E_SET_PRKING_SLOT_AREA):
                case static_cast< uint8_t>(Literal::E_RANDOM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ActualPrkgSlotTyp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ActualPrkgSlotTyp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ActualPrkgSlotTyp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ActualPrkgSlotTyp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ActualPrkgSlotTyp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ActualPrkgSlotTyp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct GuidanceSts : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_DISPLAY = 0,
            E_NO_COMPLETE = 1,
            E_COMPLETE1 = 2,
            E_COMPLETE2 = 3,
            E_COMPLETE3 = 4,
            E_COMPLETE4 = 5,
            E_COMPLETE5 = 6
        };
    
        GuidanceSts()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_DISPLAY)) {}
        GuidanceSts(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_DISPLAY):
                case static_cast< uint8_t>(Literal::E_NO_COMPLETE):
                case static_cast< uint8_t>(Literal::E_COMPLETE1):
                case static_cast< uint8_t>(Literal::E_COMPLETE2):
                case static_cast< uint8_t>(Literal::E_COMPLETE3):
                case static_cast< uint8_t>(Literal::E_COMPLETE4):
                case static_cast< uint8_t>(Literal::E_COMPLETE5):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GuidanceSts &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GuidanceSts &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GuidanceSts &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GuidanceSts &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GuidanceSts &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GuidanceSts &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct HAVPfunctionSts : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        HAVPfunctionSts()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        HAVPfunctionSts(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HAVPfunctionSts &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HAVPfunctionSts &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HAVPfunctionSts &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HAVPfunctionSts &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HAVPfunctionSts &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HAVPfunctionSts &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct InterfaceDisTyp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NONE = 0,
            E_PRE_MAPBUILT = 1,
            E_MAPBUILTING = 2,
            E_CRUISE = 3,
            E_MAPBUILT_COMPLETE = 4,
            E_HAVP_COMPLETED = 5,
            E_MAPSHOWTOSTART = 6,
            E_GUIDANCE = 7,
            E_SELECTSLOT_3D = 8,
            E_CRUISE_3D = 9,
            E_CHOOSE_EXIT = 10,
            E_CRUISE_EXIT = 11
        };
    
        InterfaceDisTyp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NONE)) {}
        InterfaceDisTyp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NONE):
                case static_cast< uint8_t>(Literal::E_PRE_MAPBUILT):
                case static_cast< uint8_t>(Literal::E_MAPBUILTING):
                case static_cast< uint8_t>(Literal::E_CRUISE):
                case static_cast< uint8_t>(Literal::E_MAPBUILT_COMPLETE):
                case static_cast< uint8_t>(Literal::E_HAVP_COMPLETED):
                case static_cast< uint8_t>(Literal::E_MAPSHOWTOSTART):
                case static_cast< uint8_t>(Literal::E_GUIDANCE):
                case static_cast< uint8_t>(Literal::E_SELECTSLOT_3D):
                case static_cast< uint8_t>(Literal::E_CRUISE_3D):
                case static_cast< uint8_t>(Literal::E_CHOOSE_EXIT):
                case static_cast< uint8_t>(Literal::E_CRUISE_EXIT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const InterfaceDisTyp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const InterfaceDisTyp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const InterfaceDisTyp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const InterfaceDisTyp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const InterfaceDisTyp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const InterfaceDisTyp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct FunctWorkSts : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_STANDBY = 0,
            E_MAPBUILDING = 1,
            E_MAPBUILT_COMPLETE = 2,
            E_CRUISE = 3,
            E_FAILURE = 4,
            E_PAUSE = 5,
            E_PARKING = 6,
            E_COMPLETE = 7,
            E_FAULT = 8
        };
    
        FunctWorkSts()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_STANDBY)) {}
        FunctWorkSts(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_STANDBY):
                case static_cast< uint8_t>(Literal::E_MAPBUILDING):
                case static_cast< uint8_t>(Literal::E_MAPBUILT_COMPLETE):
                case static_cast< uint8_t>(Literal::E_CRUISE):
                case static_cast< uint8_t>(Literal::E_FAILURE):
                case static_cast< uint8_t>(Literal::E_PAUSE):
                case static_cast< uint8_t>(Literal::E_PARKING):
                case static_cast< uint8_t>(Literal::E_COMPLETE):
                case static_cast< uint8_t>(Literal::E_FAULT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FunctWorkSts &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FunctWorkSts &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FunctWorkSts &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FunctWorkSts &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FunctWorkSts &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FunctWorkSts &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct UpdateRouteBtnDisp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_DISPLAY = 0,
            E_AVAILABLE = 1,
            E_UNAVAILABLE = 2
        };
    
        UpdateRouteBtnDisp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_DISPLAY)) {}
        UpdateRouteBtnDisp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_DISPLAY):
                case static_cast< uint8_t>(Literal::E_AVAILABLE):
                case static_cast< uint8_t>(Literal::E_UNAVAILABLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const UpdateRouteBtnDisp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const UpdateRouteBtnDisp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const UpdateRouteBtnDisp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const UpdateRouteBtnDisp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const UpdateRouteBtnDisp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const UpdateRouteBtnDisp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct AutoPushSts : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        AutoPushSts()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        AutoPushSts(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AutoPushSts &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AutoPushSts &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AutoPushSts &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AutoPushSts &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AutoPushSts &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AutoPushSts &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct BtnEnaAck : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_RESPONSE = 0,
            E_RESPONSE = 1
        };
    
        BtnEnaAck()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_RESPONSE)) {}
        BtnEnaAck(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_RESPONSE):
                case static_cast< uint8_t>(Literal::E_RESPONSE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BtnEnaAck &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BtnEnaAck &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BtnEnaAck &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BtnEnaAck &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BtnEnaAck &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BtnEnaAck &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct SVPfunctionSts : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        SVPfunctionSts()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        SVPfunctionSts(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SVPfunctionSts &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SVPfunctionSts &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SVPfunctionSts &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SVPfunctionSts &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SVPfunctionSts &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SVPfunctionSts &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct MapUpdateReq : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_REQUEST = 0,
            E_REQUEST = 1
        };
    
        MapUpdateReq()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_REQUEST)) {}
        MapUpdateReq(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_REQUEST):
                case static_cast< uint8_t>(Literal::E_REQUEST):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapUpdateReq &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapUpdateReq &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapUpdateReq &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapUpdateReq &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapUpdateReq &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapUpdateReq &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct StartPrkBtnDisp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_DISPLAY = 0,
            E_AVAILABLE = 1,
            E_UNAVAILABLE = 2
        };
    
        StartPrkBtnDisp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_DISPLAY)) {}
        StartPrkBtnDisp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_DISPLAY):
                case static_cast< uint8_t>(Literal::E_AVAILABLE):
                case static_cast< uint8_t>(Literal::E_UNAVAILABLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const StartPrkBtnDisp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const StartPrkBtnDisp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const StartPrkBtnDisp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const StartPrkBtnDisp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const StartPrkBtnDisp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const StartPrkBtnDisp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct HAVPFunctTextDisp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NONE = 0,
            E_START_PARKING_IN = 1,
            E_ROUTE_LEARNING = 2,
            E_PLEASE_SELECT_SLOT_USE_AUTOMATIC_PARKING_AFTER_BRAKING = 3,
            E_PLEASE_USE_AUTOMATIC_PARKING_AFTER_BRAKING = 4,
            E_POUR_INTO_YOUR_PARKING_SLOT = 5,
            E_SPEED_BUMP = 6,
            E_EXCEEDS_DISTANCE = 7,
            E_LEARNING_INTO_THE_RAMP = 8,
            E_LEARNING_OFF_THE_RAMP = 9,
            E_START_PARKING_OUT = 10,
            E_ROUTE_LEARNING_PARKING_OUT = 11,
            E_FOLLOW_INSTRUCTIONS = 12,
            E_LEARNING_CAMERA_BLOCKED = 13,
            E_LEARNING_THE_LOOP_CAMERA_FAULTY = 14,
            E_LEARNING_RADAR_FAULTY = 15,
            E_LEARNING_ASSOCIATED_SYSTEM_FAULTY = 16,
            E_LEARNING_SYSTEM_FAULTY = 17,
            E_LEARNING_ILLUMINATION_CONDITIONS = 18,
            E_LEARNING_RAINING_CONDITIONS = 19,
            E_LEARNING_ENVIRONMENT_TOO_EMPTY = 20,
            E_ROUTE_REPEAT = 21,
            E_EXCESSIVE_SLOPE = 22,
            E_TIME_OUT = 23,
            E_DISTANCE_TOO_LONG = 24,
            E_SPEED_OVER_15 = 25,
            E_SPEED_TOO_HIGH = 26,
            E_LEARNING_USER_EXIT = 27,
            E_LEARNING_DOOR_OPEN = 28,
            E_LEARNING_REAR_DOOR_OPEN = 29,
            E_LEARNING_REARVIEW_MIRROR_FOLDED = 30,
            E_LEARNING_LOOSEN_SEAT_BELT = 31,
            E_BACKWARD = 32,
            E_BACKWARD_EXIT = 33,
            E_MAP_BUILDING = 34,
            E_NOT_IN_SLOT = 35,
            E_TAIL_IN_SLOT = 36,
            E_MAP_BUILD_SUCCESS = 37,
            E_MAP_BUILD_FAIL = 38,
            E_INSUFFICIENT_STORAGE_SPACE = 39,
            E_DISTANCE_TOO_SHORT = 40,
            E_HAVP_READY_TO_START = 41,
            E_KEEP_GOING = 42,
            E_RELEASE_THE_BRAKES_AND_WE_SET_OFF = 43,
            E_DRIVE_TO_YOUR_TERMINAL_SLOT = 44,
            E_DRIVE_TO_YOUR_TERMINAL_EXIT = 45,
            E_PARK_IN_CRUISING = 46,
            E_TURN_LEFT = 47,
            E_TURN_RIGHT = 48,
            E_CROSSING = 49,
            E_NARROW_ROAD = 50,
            E_ROAD_DIFFICULT_HELP_ME_DRIVE = 51,
            E_CRUSING_INTO_THE_RAMP = 52,
            E_CRUSING_OUT_OF_THE_RAMP = 53,
            E_WAIT_FOR_THE_CAR_AHEAD = 54,
            E_GO_AROUND_THE_VEHICLE_AHEAD = 55,
            E_THE_REAR_VEHICLE_FOLLOW = 56,
            E_THE_REAR_VEHICLE = 57,
            E_PEDESTRIAN = 58,
            E_PEDESTRIAN_CROSSING = 59,
            E_AVOID_NEARBY_OBSTACLES = 60,
            E_ARRIVING_YOUR_SLOT = 61,
            E_PARK_IN_PARKING = 62,
            E_CRUSING_ENGINE_HOOD_OPEN = 63,
            E_CRUSING_TRUNK_OPEN = 64,
            E_CRUSING_DOOR_OPEN = 65,
            E_CRUSING_REARVIEW_MIRROR_FOLD = 66,
            E_CRUSING_SEAT_BELT_LOOSEN = 67,
            E_DRIVE_NOT_INSIDE = 68,
            E_TIMEOUT = 69,
            E_STATISTIC_OBSTACLE_30S = 70,
            E_TARGET_SLOT_OCCUPIED_PLOT_AVAILABLE_NEARBY = 71,
            E_POSITIONING_UNSUCCESSFUL = 72,
            E_CRUSING_ILLUMINATION_CONDITIONS = 73,
            E_CRUSING_RAINING_CONDITIONS = 74,
            E_CRUSING_LVP_FAILURE = 75,
            E_CRUSING_ASSOCIATED_SYSTEM_FAILURE = 76,
            E_CRUSING_TIME_OUT = 77,
            E_PARKING_TIME_OUT = 78,
            E_NUMBER_OF_PAUSES_EXCEEDED = 79,
            E_VEHICLE_RANGE_TOO_LOW = 80,
            E_CRUSING_RCTB_FCTB_ACTIVATION = 81,
            E_CRUSING_AEB_ACTIVATION = 82,
            E_CRUSING_ESP_ACTIVATION = 83,
            E_CRUSING_TCS_ABS_ACTIVATION = 84,
            E_CRUSING_HDC_ACTIVATION = 85,
            E_TIRE_PRESSURE_IS_TOO_LOW = 86,
            E_TARGET_SLOT_OCCUPIED_NO_SLOT_NEARBY = 87,
            E_PARKINGIN_FAILURE = 88,
            E_ROUTE_MATCHING_TIMEOUT = 89,
            E_ACTIVATION_FAILED = 90,
            E_CRUISING_CAMERA_BLOCKED = 91,
            E_CRUISING_THE_LOOP_CAMERA_FAULTY = 92,
            E_CRUISING_RADAR_FAULTY = 93,
            E_SEARCH_SLOT_ALONG_WAY = 94,
            E_BERTH_IN_COMPLETE = 95,
            E_BERTH_OUT_COMPLETE = 96,
            E_PULL_UP_EPB = 97,
            E_GEAR_INTERVENE = 98,
            E_STEERING_INTERVENE = 99,
            E_BRAKE_INTERVENE = 100,
            E_CRUSING_USER_EXIT = 101,
            E_CRUSING_EXCESSIVE_SLOPE = 102,
            E_CRUSING_SPEED_TOO_HIGH = 103,
            E_VEHICLE_BACK = 104,
            E_HANDS_OFF_THE_STEERING_WHEEL = 105,
            E_DRIVING_MODE_NOT_SUPPORTED = 106,
            E_PARKING_QUIT_PARKING_SLOT_BY_YOURSELF = 107,
            E_GO_AROUND_NEARBY_OBSTACLES = 108,
            E_GO_AROUND_THE_COMING_VEHICLE = 109,
            E_RELEASE_THE_BRAKE_PARKING_START = 110,
            E_AUTO_PARKING_BE_READY_TO_BRAKE = 111,
            E_PAY_ATTENTION_TO_THE_RISK_OF_SCRATCHES = 112,
            E_DETECTING_PARKING_SPACE = 113,
            E_PARKING_SUSPENDED_CLOSE_TRUNK = 114,
            E_PARKING_SUSPENDED_CLOSE_DOOR = 115,
            E_PARKING_SUSPENDED_FASTEN_SEAT_BELT = 116,
            E_PARKING_SUSPENDED_FOLD_THE_MIRROR = 117,
            E_PARKING_SUSPENDED_CLOSE_CABIN_COVER = 118,
            E_PARKING_SUSPENDED_OBSTACLES_DETECTED = 119,
            E_PARKING_SUSPENDEDPEDESTRIAN_DETECTED = 120,
            E_PARKING_SUSPENDED_VEHICLE_DETECTED = 121,
            E_PARKING_CONTINUES = 122,
            E_BRAKE_RECOVERED_CONFIRM_TO_CONTINUE = 123,
            E_PARKING_SUSPENDED_PLEASE_RELEASE_THE_BREAK_PEDAL = 124,
            E_PARKING_SUSPENDED_PLEASE_RELEASE_THE_ACCELERATOR_PEDAL = 125,
            E_FINDING_SLOT_PLEASE_BRAKE = 126,
            E_ENGINE_HOOD_OPEN = 127,
            E_PLEASE_KEEP_BRAKING = 128,
            E_MATCH_SUCCESSFUL_START_HAVP = 129,
            E_GUIDANCE_START = 130,
            E_GUIDANCE_SUCCESS = 131
        };
    
        HAVPFunctTextDisp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NONE)) {}
        HAVPFunctTextDisp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NONE):
                case static_cast< uint8_t>(Literal::E_START_PARKING_IN):
                case static_cast< uint8_t>(Literal::E_ROUTE_LEARNING):
                case static_cast< uint8_t>(Literal::E_PLEASE_SELECT_SLOT_USE_AUTOMATIC_PARKING_AFTER_BRAKING):
                case static_cast< uint8_t>(Literal::E_PLEASE_USE_AUTOMATIC_PARKING_AFTER_BRAKING):
                case static_cast< uint8_t>(Literal::E_POUR_INTO_YOUR_PARKING_SLOT):
                case static_cast< uint8_t>(Literal::E_SPEED_BUMP):
                case static_cast< uint8_t>(Literal::E_EXCEEDS_DISTANCE):
                case static_cast< uint8_t>(Literal::E_LEARNING_INTO_THE_RAMP):
                case static_cast< uint8_t>(Literal::E_LEARNING_OFF_THE_RAMP):
                case static_cast< uint8_t>(Literal::E_START_PARKING_OUT):
                case static_cast< uint8_t>(Literal::E_ROUTE_LEARNING_PARKING_OUT):
                case static_cast< uint8_t>(Literal::E_FOLLOW_INSTRUCTIONS):
                case static_cast< uint8_t>(Literal::E_LEARNING_CAMERA_BLOCKED):
                case static_cast< uint8_t>(Literal::E_LEARNING_THE_LOOP_CAMERA_FAULTY):
                case static_cast< uint8_t>(Literal::E_LEARNING_RADAR_FAULTY):
                case static_cast< uint8_t>(Literal::E_LEARNING_ASSOCIATED_SYSTEM_FAULTY):
                case static_cast< uint8_t>(Literal::E_LEARNING_SYSTEM_FAULTY):
                case static_cast< uint8_t>(Literal::E_LEARNING_ILLUMINATION_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_LEARNING_RAINING_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_LEARNING_ENVIRONMENT_TOO_EMPTY):
                case static_cast< uint8_t>(Literal::E_ROUTE_REPEAT):
                case static_cast< uint8_t>(Literal::E_EXCESSIVE_SLOPE):
                case static_cast< uint8_t>(Literal::E_TIME_OUT):
                case static_cast< uint8_t>(Literal::E_DISTANCE_TOO_LONG):
                case static_cast< uint8_t>(Literal::E_SPEED_OVER_15):
                case static_cast< uint8_t>(Literal::E_SPEED_TOO_HIGH):
                case static_cast< uint8_t>(Literal::E_LEARNING_USER_EXIT):
                case static_cast< uint8_t>(Literal::E_LEARNING_DOOR_OPEN):
                case static_cast< uint8_t>(Literal::E_LEARNING_REAR_DOOR_OPEN):
                case static_cast< uint8_t>(Literal::E_LEARNING_REARVIEW_MIRROR_FOLDED):
                case static_cast< uint8_t>(Literal::E_LEARNING_LOOSEN_SEAT_BELT):
                case static_cast< uint8_t>(Literal::E_BACKWARD):
                case static_cast< uint8_t>(Literal::E_BACKWARD_EXIT):
                case static_cast< uint8_t>(Literal::E_MAP_BUILDING):
                case static_cast< uint8_t>(Literal::E_NOT_IN_SLOT):
                case static_cast< uint8_t>(Literal::E_TAIL_IN_SLOT):
                case static_cast< uint8_t>(Literal::E_MAP_BUILD_SUCCESS):
                case static_cast< uint8_t>(Literal::E_MAP_BUILD_FAIL):
                case static_cast< uint8_t>(Literal::E_INSUFFICIENT_STORAGE_SPACE):
                case static_cast< uint8_t>(Literal::E_DISTANCE_TOO_SHORT):
                case static_cast< uint8_t>(Literal::E_HAVP_READY_TO_START):
                case static_cast< uint8_t>(Literal::E_KEEP_GOING):
                case static_cast< uint8_t>(Literal::E_RELEASE_THE_BRAKES_AND_WE_SET_OFF):
                case static_cast< uint8_t>(Literal::E_DRIVE_TO_YOUR_TERMINAL_SLOT):
                case static_cast< uint8_t>(Literal::E_DRIVE_TO_YOUR_TERMINAL_EXIT):
                case static_cast< uint8_t>(Literal::E_PARK_IN_CRUISING):
                case static_cast< uint8_t>(Literal::E_TURN_LEFT):
                case static_cast< uint8_t>(Literal::E_TURN_RIGHT):
                case static_cast< uint8_t>(Literal::E_CROSSING):
                case static_cast< uint8_t>(Literal::E_NARROW_ROAD):
                case static_cast< uint8_t>(Literal::E_ROAD_DIFFICULT_HELP_ME_DRIVE):
                case static_cast< uint8_t>(Literal::E_CRUSING_INTO_THE_RAMP):
                case static_cast< uint8_t>(Literal::E_CRUSING_OUT_OF_THE_RAMP):
                case static_cast< uint8_t>(Literal::E_WAIT_FOR_THE_CAR_AHEAD):
                case static_cast< uint8_t>(Literal::E_GO_AROUND_THE_VEHICLE_AHEAD):
                case static_cast< uint8_t>(Literal::E_THE_REAR_VEHICLE_FOLLOW):
                case static_cast< uint8_t>(Literal::E_THE_REAR_VEHICLE):
                case static_cast< uint8_t>(Literal::E_PEDESTRIAN):
                case static_cast< uint8_t>(Literal::E_PEDESTRIAN_CROSSING):
                case static_cast< uint8_t>(Literal::E_AVOID_NEARBY_OBSTACLES):
                case static_cast< uint8_t>(Literal::E_ARRIVING_YOUR_SLOT):
                case static_cast< uint8_t>(Literal::E_PARK_IN_PARKING):
                case static_cast< uint8_t>(Literal::E_CRUSING_ENGINE_HOOD_OPEN):
                case static_cast< uint8_t>(Literal::E_CRUSING_TRUNK_OPEN):
                case static_cast< uint8_t>(Literal::E_CRUSING_DOOR_OPEN):
                case static_cast< uint8_t>(Literal::E_CRUSING_REARVIEW_MIRROR_FOLD):
                case static_cast< uint8_t>(Literal::E_CRUSING_SEAT_BELT_LOOSEN):
                case static_cast< uint8_t>(Literal::E_DRIVE_NOT_INSIDE):
                case static_cast< uint8_t>(Literal::E_TIMEOUT):
                case static_cast< uint8_t>(Literal::E_STATISTIC_OBSTACLE_30S):
                case static_cast< uint8_t>(Literal::E_TARGET_SLOT_OCCUPIED_PLOT_AVAILABLE_NEARBY):
                case static_cast< uint8_t>(Literal::E_POSITIONING_UNSUCCESSFUL):
                case static_cast< uint8_t>(Literal::E_CRUSING_ILLUMINATION_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_CRUSING_RAINING_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_CRUSING_LVP_FAILURE):
                case static_cast< uint8_t>(Literal::E_CRUSING_ASSOCIATED_SYSTEM_FAILURE):
                case static_cast< uint8_t>(Literal::E_CRUSING_TIME_OUT):
                case static_cast< uint8_t>(Literal::E_PARKING_TIME_OUT):
                case static_cast< uint8_t>(Literal::E_NUMBER_OF_PAUSES_EXCEEDED):
                case static_cast< uint8_t>(Literal::E_VEHICLE_RANGE_TOO_LOW):
                case static_cast< uint8_t>(Literal::E_CRUSING_RCTB_FCTB_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_CRUSING_AEB_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_CRUSING_ESP_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_CRUSING_TCS_ABS_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_CRUSING_HDC_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_TIRE_PRESSURE_IS_TOO_LOW):
                case static_cast< uint8_t>(Literal::E_TARGET_SLOT_OCCUPIED_NO_SLOT_NEARBY):
                case static_cast< uint8_t>(Literal::E_PARKINGIN_FAILURE):
                case static_cast< uint8_t>(Literal::E_ROUTE_MATCHING_TIMEOUT):
                case static_cast< uint8_t>(Literal::E_ACTIVATION_FAILED):
                case static_cast< uint8_t>(Literal::E_CRUISING_CAMERA_BLOCKED):
                case static_cast< uint8_t>(Literal::E_CRUISING_THE_LOOP_CAMERA_FAULTY):
                case static_cast< uint8_t>(Literal::E_CRUISING_RADAR_FAULTY):
                case static_cast< uint8_t>(Literal::E_SEARCH_SLOT_ALONG_WAY):
                case static_cast< uint8_t>(Literal::E_BERTH_IN_COMPLETE):
                case static_cast< uint8_t>(Literal::E_BERTH_OUT_COMPLETE):
                case static_cast< uint8_t>(Literal::E_PULL_UP_EPB):
                case static_cast< uint8_t>(Literal::E_GEAR_INTERVENE):
                case static_cast< uint8_t>(Literal::E_STEERING_INTERVENE):
                case static_cast< uint8_t>(Literal::E_BRAKE_INTERVENE):
                case static_cast< uint8_t>(Literal::E_CRUSING_USER_EXIT):
                case static_cast< uint8_t>(Literal::E_CRUSING_EXCESSIVE_SLOPE):
                case static_cast< uint8_t>(Literal::E_CRUSING_SPEED_TOO_HIGH):
                case static_cast< uint8_t>(Literal::E_VEHICLE_BACK):
                case static_cast< uint8_t>(Literal::E_HANDS_OFF_THE_STEERING_WHEEL):
                case static_cast< uint8_t>(Literal::E_DRIVING_MODE_NOT_SUPPORTED):
                case static_cast< uint8_t>(Literal::E_PARKING_QUIT_PARKING_SLOT_BY_YOURSELF):
                case static_cast< uint8_t>(Literal::E_GO_AROUND_NEARBY_OBSTACLES):
                case static_cast< uint8_t>(Literal::E_GO_AROUND_THE_COMING_VEHICLE):
                case static_cast< uint8_t>(Literal::E_RELEASE_THE_BRAKE_PARKING_START):
                case static_cast< uint8_t>(Literal::E_AUTO_PARKING_BE_READY_TO_BRAKE):
                case static_cast< uint8_t>(Literal::E_PAY_ATTENTION_TO_THE_RISK_OF_SCRATCHES):
                case static_cast< uint8_t>(Literal::E_DETECTING_PARKING_SPACE):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_CLOSE_TRUNK):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_CLOSE_DOOR):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_FASTEN_SEAT_BELT):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_FOLD_THE_MIRROR):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_CLOSE_CABIN_COVER):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_OBSTACLES_DETECTED):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDEDPEDESTRIAN_DETECTED):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_VEHICLE_DETECTED):
                case static_cast< uint8_t>(Literal::E_PARKING_CONTINUES):
                case static_cast< uint8_t>(Literal::E_BRAKE_RECOVERED_CONFIRM_TO_CONTINUE):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_PLEASE_RELEASE_THE_BREAK_PEDAL):
                case static_cast< uint8_t>(Literal::E_PARKING_SUSPENDED_PLEASE_RELEASE_THE_ACCELERATOR_PEDAL):
                case static_cast< uint8_t>(Literal::E_FINDING_SLOT_PLEASE_BRAKE):
                case static_cast< uint8_t>(Literal::E_ENGINE_HOOD_OPEN):
                case static_cast< uint8_t>(Literal::E_PLEASE_KEEP_BRAKING):
                case static_cast< uint8_t>(Literal::E_MATCH_SUCCESSFUL_START_HAVP):
                case static_cast< uint8_t>(Literal::E_GUIDANCE_START):
                case static_cast< uint8_t>(Literal::E_GUIDANCE_SUCCESS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HAVPFunctTextDisp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HAVPFunctTextDisp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HAVPFunctTextDisp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HAVPFunctTextDisp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HAVPFunctTextDisp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HAVPFunctTextDisp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct FunctBtnDisp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NONE = 0,
            E_START_HAVP = 1,
            E_CONTINUE_HAVP = 2,
            E_START_SVP = 3,
            E_CONTINUE_SVP = 4,
            E_START_APA = 5,
            E_TRY = 6,
            E_SEARCH_SLOT_ALONG_WAY = 7,
            E_APA_CONTINUESEARCHSLOT = 8
        };
    
        FunctBtnDisp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NONE)) {}
        FunctBtnDisp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NONE):
                case static_cast< uint8_t>(Literal::E_START_HAVP):
                case static_cast< uint8_t>(Literal::E_CONTINUE_HAVP):
                case static_cast< uint8_t>(Literal::E_START_SVP):
                case static_cast< uint8_t>(Literal::E_CONTINUE_SVP):
                case static_cast< uint8_t>(Literal::E_START_APA):
                case static_cast< uint8_t>(Literal::E_TRY):
                case static_cast< uint8_t>(Literal::E_SEARCH_SLOT_ALONG_WAY):
                case static_cast< uint8_t>(Literal::E_APA_CONTINUESEARCHSLOT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FunctBtnDisp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FunctBtnDisp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FunctBtnDisp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FunctBtnDisp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FunctBtnDisp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FunctBtnDisp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef uint16_t ActualPrkgSlot;
    typedef int8_t ActualMapFlr;
    
    struct FunctBtnSts : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_UNAVAILABLE = 0,
            E_AVAILABLE = 1,
            E_HIGHLIGHT = 2
        };
    
        FunctBtnSts()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_UNAVAILABLE)) {}
        FunctBtnSts(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_UNAVAILABLE):
                case static_cast< uint8_t>(Literal::E_AVAILABLE):
                case static_cast< uint8_t>(Literal::E_HIGHLIGHT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FunctBtnSts &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FunctBtnSts &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FunctBtnSts &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FunctBtnSts &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FunctBtnSts &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FunctBtnSts &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct PopupDisp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NONE = 0,
            E_START_LEARNING = 1,
            E_LEARN_ROUTE_CONFIRM = 2,
            E_TURN_ON_BACKGROUND_FUNCTIONS = 3,
            E_PLEASE_ADJUST_UNDER_P = 4,
            E_HAVP_RAMPWAY = 5,
            E_HAVP_ENVIRONMENT_EMPTY = 6,
            E_OUTSIDE_THE_UNDERGROUND_CAR_PARK = 7,
            E_HAVP_CAMERA_BLOCKED = 8,
            E_HAVP_LOOP_CAMERA_FAULTY = 9,
            E_HAVP_RADAR_FAULTY = 10,
            E_HAVP_ASSOCIATED_SYSTEM_FAULTY = 11,
            E_HAVP_SYSTEM_FAULTY = 12,
            E_HAVP_DOOR_OPEN = 13,
            E_HAVP_REAR_DOOR_OPEN = 14,
            E_HAVP_SAFETY_BELT_UNFASTENED = 15,
            E_HAVP_ENGINE_COVER_OPEN = 16,
            E_HAVP_RCTB_FCTB_ACTIVATION = 17,
            E_HAVP_AEB_ACTIVATION = 18,
            E_HAVP_TCS_ABS_ACTIVATION = 19,
            E_HAVP_ESP_ACTIVATION = 20,
            E_HAVP_HDC_ACTIVATION = 21,
            E_HAVP_TIRE_PRESSURE_IS_TOO_LOW = 22,
            E_HAVP_ILLUMINATION_CONDITIONS = 23,
            E_HAVP_RAINING_CONDITIONS = 24,
            E_CLICK_FINISH = 25,
            E_THE_LEARNING_ROUTE_IS_NOT_LOCATED = 26,
            E_PLEASE_SWITCH_TO_D_GEAR = 27,
            E_HAVP_PUSH_REQUEST_MAP_BUILDING = 28,
            E_HAVP_PUSH_REQUEST_ROUTE_REPLAY = 29,
            E_SVP_PUSH_REQUEST = 30,
            E_ACCELERATOR_PEDAL = 31,
            E_TAKE_OVER_IMMEDIATELY = 32,
            E_REQUEST_STOP = 33,
            E_SVP_REQUEST_CLOSE_ENGINE_HOOD = 34,
            E_SVP_REQUEST_CLOSE_TRUNK = 35,
            E_SVP_REQUEST_UNFOLD_REARVIEW_MIRROR = 36,
            E_SVP_REQUEST_CLOSE_DOOR = 37,
            E_SVP_REQUEST_FASTEN_SEATBELT = 38,
            E_SVP_RCTB_FCTB_ACTIVATION = 39,
            E_SVP_AEB_ACTIVATION = 40,
            E_SVP_TCS_ABS_ACTIVATION = 41,
            E_SVP_ESP_ACTIVATION = 42,
            E_SVP_HDC_ACTIVATION = 43,
            E_SVP_TIRE_PRESSURE_IS_TOO_LOW = 44,
            E_SVP_ILLUMINATION_CONDITIONS = 45,
            E_SVP_RAINING_CONDITIONS = 46,
            E_EXCESSIVE_SLOPE = 47,
            E_SVP_VEHICLE_RANGE_TOO_LOW = 48,
            E_SVP_CAMERA_BLOCKED = 49,
            E_SVP_THE_LOOP_CAMERA_FAULTY = 50,
            E_SVP_RADAR = 51,
            E_SVP_ASSOCIATED_SYSTEM_FAULTY = 52,
            E_SVP_SYSTEM_FAULTY = 53,
            E_NEED_UPDATE = 54,
            E_MAP_UPDATING = 55,
            E_MAP_UPDATE_SUCCESS = 56,
            E_MAP_UPDATE_FAIL = 57,
            E_SVP_TURN_ON_BACKGROUND_FUNCTIONS = 58,
            E_HAVP_DRIVING_MODE_NOT_SUPPORTED = 59,
            E_SVP_DRIVING_MODE_NOT_SUPPORTED = 60,
            E_HAVP_REARVIEW_MIRROR_FOLDED = 61
        };
    
        PopupDisp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NONE)) {}
        PopupDisp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NONE):
                case static_cast< uint8_t>(Literal::E_START_LEARNING):
                case static_cast< uint8_t>(Literal::E_LEARN_ROUTE_CONFIRM):
                case static_cast< uint8_t>(Literal::E_TURN_ON_BACKGROUND_FUNCTIONS):
                case static_cast< uint8_t>(Literal::E_PLEASE_ADJUST_UNDER_P):
                case static_cast< uint8_t>(Literal::E_HAVP_RAMPWAY):
                case static_cast< uint8_t>(Literal::E_HAVP_ENVIRONMENT_EMPTY):
                case static_cast< uint8_t>(Literal::E_OUTSIDE_THE_UNDERGROUND_CAR_PARK):
                case static_cast< uint8_t>(Literal::E_HAVP_CAMERA_BLOCKED):
                case static_cast< uint8_t>(Literal::E_HAVP_LOOP_CAMERA_FAULTY):
                case static_cast< uint8_t>(Literal::E_HAVP_RADAR_FAULTY):
                case static_cast< uint8_t>(Literal::E_HAVP_ASSOCIATED_SYSTEM_FAULTY):
                case static_cast< uint8_t>(Literal::E_HAVP_SYSTEM_FAULTY):
                case static_cast< uint8_t>(Literal::E_HAVP_DOOR_OPEN):
                case static_cast< uint8_t>(Literal::E_HAVP_REAR_DOOR_OPEN):
                case static_cast< uint8_t>(Literal::E_HAVP_SAFETY_BELT_UNFASTENED):
                case static_cast< uint8_t>(Literal::E_HAVP_ENGINE_COVER_OPEN):
                case static_cast< uint8_t>(Literal::E_HAVP_RCTB_FCTB_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_HAVP_AEB_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_HAVP_TCS_ABS_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_HAVP_ESP_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_HAVP_HDC_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_HAVP_TIRE_PRESSURE_IS_TOO_LOW):
                case static_cast< uint8_t>(Literal::E_HAVP_ILLUMINATION_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_HAVP_RAINING_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_CLICK_FINISH):
                case static_cast< uint8_t>(Literal::E_THE_LEARNING_ROUTE_IS_NOT_LOCATED):
                case static_cast< uint8_t>(Literal::E_PLEASE_SWITCH_TO_D_GEAR):
                case static_cast< uint8_t>(Literal::E_HAVP_PUSH_REQUEST_MAP_BUILDING):
                case static_cast< uint8_t>(Literal::E_HAVP_PUSH_REQUEST_ROUTE_REPLAY):
                case static_cast< uint8_t>(Literal::E_SVP_PUSH_REQUEST):
                case static_cast< uint8_t>(Literal::E_ACCELERATOR_PEDAL):
                case static_cast< uint8_t>(Literal::E_TAKE_OVER_IMMEDIATELY):
                case static_cast< uint8_t>(Literal::E_REQUEST_STOP):
                case static_cast< uint8_t>(Literal::E_SVP_REQUEST_CLOSE_ENGINE_HOOD):
                case static_cast< uint8_t>(Literal::E_SVP_REQUEST_CLOSE_TRUNK):
                case static_cast< uint8_t>(Literal::E_SVP_REQUEST_UNFOLD_REARVIEW_MIRROR):
                case static_cast< uint8_t>(Literal::E_SVP_REQUEST_CLOSE_DOOR):
                case static_cast< uint8_t>(Literal::E_SVP_REQUEST_FASTEN_SEATBELT):
                case static_cast< uint8_t>(Literal::E_SVP_RCTB_FCTB_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_SVP_AEB_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_SVP_TCS_ABS_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_SVP_ESP_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_SVP_HDC_ACTIVATION):
                case static_cast< uint8_t>(Literal::E_SVP_TIRE_PRESSURE_IS_TOO_LOW):
                case static_cast< uint8_t>(Literal::E_SVP_ILLUMINATION_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_SVP_RAINING_CONDITIONS):
                case static_cast< uint8_t>(Literal::E_EXCESSIVE_SLOPE):
                case static_cast< uint8_t>(Literal::E_SVP_VEHICLE_RANGE_TOO_LOW):
                case static_cast< uint8_t>(Literal::E_SVP_CAMERA_BLOCKED):
                case static_cast< uint8_t>(Literal::E_SVP_THE_LOOP_CAMERA_FAULTY):
                case static_cast< uint8_t>(Literal::E_SVP_RADAR):
                case static_cast< uint8_t>(Literal::E_SVP_ASSOCIATED_SYSTEM_FAULTY):
                case static_cast< uint8_t>(Literal::E_SVP_SYSTEM_FAULTY):
                case static_cast< uint8_t>(Literal::E_NEED_UPDATE):
                case static_cast< uint8_t>(Literal::E_MAP_UPDATING):
                case static_cast< uint8_t>(Literal::E_MAP_UPDATE_SUCCESS):
                case static_cast< uint8_t>(Literal::E_MAP_UPDATE_FAIL):
                case static_cast< uint8_t>(Literal::E_SVP_TURN_ON_BACKGROUND_FUNCTIONS):
                case static_cast< uint8_t>(Literal::E_HAVP_DRIVING_MODE_NOT_SUPPORTED):
                case static_cast< uint8_t>(Literal::E_SVP_DRIVING_MODE_NOT_SUPPORTED):
                case static_cast< uint8_t>(Literal::E_HAVP_REARVIEW_MIRROR_FOLDED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PopupDisp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PopupDisp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PopupDisp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PopupDisp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PopupDisp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PopupDisp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef uint8_t CurrLeavingPOI;
    typedef uint8_t ActualPrkgArea;
    typedef uint16_t CurrMAPID;
    
    struct Signal_Indnc : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_CAN = 0,
            E_SOMEIP = 1
        };
    
        Signal_Indnc()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_CAN)) {}
        Signal_Indnc(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_CAN):
                case static_cast< uint8_t>(Literal::E_SOMEIP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Signal_Indnc &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Signal_Indnc &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Signal_Indnc &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Signal_Indnc &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Signal_Indnc &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Signal_Indnc &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef uint8_t MapBuildProcBar;
    struct HAVP_SVPScrnInfoStruct : CommonAPI::Struct< MapUpdateReq, CurrMAPID, FunctBtnDisp, FunctBtnSts, FunctWorkSts, Signal_Indnc, InterfaceDisTyp, PopupDisp, MapBuildProcBar, StartPrkBtnDisp, UpdateRouteBtnDisp, GuidanceSts, ActualMapFlr, CurrLeavingPOI, ActualPrkgSlotTyp, ActualPrkgSlot, ActualPrkgArea, HAVPFunctTextDisp, SVPFunctTextDisp, BtnEnaAck, HAVPfunctionSts, AutoPushSts, SVPfunctionSts> {
    
        HAVP_SVPScrnInfoStruct()
        {
            std::get< 0>(values_) = MapUpdateReq();
            std::get< 1>(values_) = CurrMAPID();
            std::get< 2>(values_) = FunctBtnDisp();
            std::get< 3>(values_) = FunctBtnSts();
            std::get< 4>(values_) = FunctWorkSts();
            std::get< 5>(values_) = Signal_Indnc();
            std::get< 6>(values_) = InterfaceDisTyp();
            std::get< 7>(values_) = PopupDisp();
            std::get< 8>(values_) = MapBuildProcBar();
            std::get< 9>(values_) = StartPrkBtnDisp();
            std::get< 10>(values_) = UpdateRouteBtnDisp();
            std::get< 11>(values_) = GuidanceSts();
            std::get< 12>(values_) = ActualMapFlr();
            std::get< 13>(values_) = CurrLeavingPOI();
            std::get< 14>(values_) = ActualPrkgSlotTyp();
            std::get< 15>(values_) = ActualPrkgSlot();
            std::get< 16>(values_) = ActualPrkgArea();
            std::get< 17>(values_) = HAVPFunctTextDisp();
            std::get< 18>(values_) = SVPFunctTextDisp();
            std::get< 19>(values_) = BtnEnaAck();
            std::get< 20>(values_) = HAVPfunctionSts();
            std::get< 21>(values_) = AutoPushSts();
            std::get< 22>(values_) = SVPfunctionSts();
        }
        HAVP_SVPScrnInfoStruct(const MapUpdateReq &_MapUpdateReq, const CurrMAPID &_CurrMAPID, const FunctBtnDisp &_FunctBtnDisp, const FunctBtnSts &_FunctBtnSts, const FunctWorkSts &_FunctWorkSts, const Signal_Indnc &_Signal_Indnc, const InterfaceDisTyp &_InterfaceDisTyp, const PopupDisp &_PopupDisp, const MapBuildProcBar &_MapBuildProcBar, const StartPrkBtnDisp &_StartPrkBtnDisp, const UpdateRouteBtnDisp &_UpdateRouteBtnDisp, const GuidanceSts &_GuidanceSts, const ActualMapFlr &_ActualMapFlr, const CurrLeavingPOI &_CurrLeavingPOI, const ActualPrkgSlotTyp &_ActualPrkgSlotTyp, const ActualPrkgSlot &_ActualPrkgSlot, const ActualPrkgArea &_ActualPrkgArea, const HAVPFunctTextDisp &_HAVPFunctTextDisp, const SVPFunctTextDisp &_SVPFunctTextDisp, const BtnEnaAck &_BtnEnaAck, const HAVPfunctionSts &_HAVPfunctionSts, const AutoPushSts &_AutoPushSts, const SVPfunctionSts &_SVPfunctionSts)
        {
            std::get< 0>(values_) = _MapUpdateReq;
            std::get< 1>(values_) = _CurrMAPID;
            std::get< 2>(values_) = _FunctBtnDisp;
            std::get< 3>(values_) = _FunctBtnSts;
            std::get< 4>(values_) = _FunctWorkSts;
            std::get< 5>(values_) = _Signal_Indnc;
            std::get< 6>(values_) = _InterfaceDisTyp;
            std::get< 7>(values_) = _PopupDisp;
            std::get< 8>(values_) = _MapBuildProcBar;
            std::get< 9>(values_) = _StartPrkBtnDisp;
            std::get< 10>(values_) = _UpdateRouteBtnDisp;
            std::get< 11>(values_) = _GuidanceSts;
            std::get< 12>(values_) = _ActualMapFlr;
            std::get< 13>(values_) = _CurrLeavingPOI;
            std::get< 14>(values_) = _ActualPrkgSlotTyp;
            std::get< 15>(values_) = _ActualPrkgSlot;
            std::get< 16>(values_) = _ActualPrkgArea;
            std::get< 17>(values_) = _HAVPFunctTextDisp;
            std::get< 18>(values_) = _SVPFunctTextDisp;
            std::get< 19>(values_) = _BtnEnaAck;
            std::get< 20>(values_) = _HAVPfunctionSts;
            std::get< 21>(values_) = _AutoPushSts;
            std::get< 22>(values_) = _SVPfunctionSts;
        }
        inline const MapUpdateReq &getMapUpdateReq() const { return std::get< 0>(values_); }
        inline void setMapUpdateReq(const MapUpdateReq &_value) { std::get< 0>(values_) = _value; }
        inline const CurrMAPID &getCurrMAPID() const { return std::get< 1>(values_); }
        inline void setCurrMAPID(const CurrMAPID &_value) { std::get< 1>(values_) = _value; }
        inline const FunctBtnDisp &getFunctBtnDisp() const { return std::get< 2>(values_); }
        inline void setFunctBtnDisp(const FunctBtnDisp &_value) { std::get< 2>(values_) = _value; }
        inline const FunctBtnSts &getFunctBtnSts() const { return std::get< 3>(values_); }
        inline void setFunctBtnSts(const FunctBtnSts &_value) { std::get< 3>(values_) = _value; }
        inline const FunctWorkSts &getFunctWorkSts() const { return std::get< 4>(values_); }
        inline void setFunctWorkSts(const FunctWorkSts &_value) { std::get< 4>(values_) = _value; }
        inline const Signal_Indnc &getSignal_Indnc() const { return std::get< 5>(values_); }
        inline void setSignal_Indnc(const Signal_Indnc &_value) { std::get< 5>(values_) = _value; }
        inline const InterfaceDisTyp &getInterfaceDisTyp() const { return std::get< 6>(values_); }
        inline void setInterfaceDisTyp(const InterfaceDisTyp &_value) { std::get< 6>(values_) = _value; }
        inline const PopupDisp &getPopupDisp() const { return std::get< 7>(values_); }
        inline void setPopupDisp(const PopupDisp &_value) { std::get< 7>(values_) = _value; }
        inline const MapBuildProcBar &getMapBuildProcBar() const { return std::get< 8>(values_); }
        inline void setMapBuildProcBar(const MapBuildProcBar &_value) { std::get< 8>(values_) = _value; }
        inline const StartPrkBtnDisp &getStartPrkBtnDisp() const { return std::get< 9>(values_); }
        inline void setStartPrkBtnDisp(const StartPrkBtnDisp &_value) { std::get< 9>(values_) = _value; }
        inline const UpdateRouteBtnDisp &getUpdateRouteBtnDisp() const { return std::get< 10>(values_); }
        inline void setUpdateRouteBtnDisp(const UpdateRouteBtnDisp &_value) { std::get< 10>(values_) = _value; }
        inline const GuidanceSts &getGuidanceSts() const { return std::get< 11>(values_); }
        inline void setGuidanceSts(const GuidanceSts &_value) { std::get< 11>(values_) = _value; }
        inline const ActualMapFlr &getActualMapFlr() const { return std::get< 12>(values_); }
        inline void setActualMapFlr(const ActualMapFlr &_value) { std::get< 12>(values_) = _value; }
        inline const CurrLeavingPOI &getCurrLeavingPOI() const { return std::get< 13>(values_); }
        inline void setCurrLeavingPOI(const CurrLeavingPOI &_value) { std::get< 13>(values_) = _value; }
        inline const ActualPrkgSlotTyp &getActualPrkgSlotTyp() const { return std::get< 14>(values_); }
        inline void setActualPrkgSlotTyp(const ActualPrkgSlotTyp &_value) { std::get< 14>(values_) = _value; }
        inline const ActualPrkgSlot &getActualPrkgSlot() const { return std::get< 15>(values_); }
        inline void setActualPrkgSlot(const ActualPrkgSlot &_value) { std::get< 15>(values_) = _value; }
        inline const ActualPrkgArea &getActualPrkgArea() const { return std::get< 16>(values_); }
        inline void setActualPrkgArea(const ActualPrkgArea &_value) { std::get< 16>(values_) = _value; }
        inline const HAVPFunctTextDisp &getHAVPFunctTextDisp() const { return std::get< 17>(values_); }
        inline void setHAVPFunctTextDisp(const HAVPFunctTextDisp &_value) { std::get< 17>(values_) = _value; }
        inline const SVPFunctTextDisp &getSVPFunctTextDisp() const { return std::get< 18>(values_); }
        inline void setSVPFunctTextDisp(const SVPFunctTextDisp &_value) { std::get< 18>(values_) = _value; }
        inline const BtnEnaAck &getBtnEnaAck() const { return std::get< 19>(values_); }
        inline void setBtnEnaAck(const BtnEnaAck &_value) { std::get< 19>(values_) = _value; }
        inline const HAVPfunctionSts &getHAVPfunctionSts() const { return std::get< 20>(values_); }
        inline void setHAVPfunctionSts(const HAVPfunctionSts &_value) { std::get< 20>(values_) = _value; }
        inline const AutoPushSts &getAutoPushSts() const { return std::get< 21>(values_); }
        inline void setAutoPushSts(const AutoPushSts &_value) { std::get< 21>(values_) = _value; }
        inline const SVPfunctionSts &getSVPfunctionSts() const { return std::get< 22>(values_); }
        inline void setSVPfunctionSts(const SVPfunctionSts &_value) { std::get< 22>(values_) = _value; }
        inline bool operator==(const HAVP_SVPScrnInfoStruct& _other) const {
        return (getMapUpdateReq() == _other.getMapUpdateReq() && getCurrMAPID() == _other.getCurrMAPID() && getFunctBtnDisp() == _other.getFunctBtnDisp() && getFunctBtnSts() == _other.getFunctBtnSts() && getFunctWorkSts() == _other.getFunctWorkSts() && getSignal_Indnc() == _other.getSignal_Indnc() && getInterfaceDisTyp() == _other.getInterfaceDisTyp() && getPopupDisp() == _other.getPopupDisp() && getMapBuildProcBar() == _other.getMapBuildProcBar() && getStartPrkBtnDisp() == _other.getStartPrkBtnDisp() && getUpdateRouteBtnDisp() == _other.getUpdateRouteBtnDisp() && getGuidanceSts() == _other.getGuidanceSts() && getActualMapFlr() == _other.getActualMapFlr() && getCurrLeavingPOI() == _other.getCurrLeavingPOI() && getActualPrkgSlotTyp() == _other.getActualPrkgSlotTyp() && getActualPrkgSlot() == _other.getActualPrkgSlot() && getActualPrkgArea() == _other.getActualPrkgArea() && getHAVPFunctTextDisp() == _other.getHAVPFunctTextDisp() && getSVPFunctTextDisp() == _other.getSVPFunctTextDisp() && getBtnEnaAck() == _other.getBtnEnaAck() && getHAVPfunctionSts() == _other.getHAVPfunctionSts() && getAutoPushSts() == _other.getAutoPushSts() && getSVPfunctionSts() == _other.getSVPfunctionSts());
        }
        inline bool operator!=(const HAVP_SVPScrnInfoStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef uint16_t TarMapID;
    typedef std::vector< uint8_t> HAVPVehDataArray;
    
    struct AutoPushReq : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_REQUEST = 0,
            E_REQUEST = 1
        };
    
        AutoPushReq()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_REQUEST)) {}
        AutoPushReq(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_REQUEST):
                case static_cast< uint8_t>(Literal::E_REQUEST):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AutoPushReq &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AutoPushReq &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AutoPushReq &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AutoPushReq &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AutoPushReq &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AutoPushReq &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct HAVPfunctionReq : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_REQUEST = 0,
            E_REQUEST = 1
        };
    
        HAVPfunctionReq()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_REQUEST)) {}
        HAVPfunctionReq(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_REQUEST):
                case static_cast< uint8_t>(Literal::E_REQUEST):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HAVPfunctionReq &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HAVPfunctionReq &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HAVPfunctionReq &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HAVPfunctionReq &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HAVPfunctionReq &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HAVPfunctionReq &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct MapUpdSt : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NONE = 0,
            E_UNSUCCESS = 1,
            E_UPDATE_SUCCESS = 2,
            E_UPDATING = 3
        };
    
        MapUpdSt()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NONE)) {}
        MapUpdSt(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NONE):
                case static_cast< uint8_t>(Literal::E_UNSUCCESS):
                case static_cast< uint8_t>(Literal::E_UPDATE_SUCCESS):
                case static_cast< uint8_t>(Literal::E_UPDATING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MapUpdSt &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MapUpdSt &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MapUpdSt &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MapUpdSt &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MapUpdSt &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MapUpdSt &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct SideBsdDispStatus : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        SideBsdDispStatus()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        SideBsdDispStatus(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SideBsdDispStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SideBsdDispStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SideBsdDispStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SideBsdDispStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SideBsdDispStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SideBsdDispStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct SetPrkgSlotTyp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_SET = 0,
            E_SET_PRKING_SLOT = 1,
            E_SET_PRKING_SLOT_AREA = 2,
            E_RANDOM = 3
        };
    
        SetPrkgSlotTyp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_SET)) {}
        SetPrkgSlotTyp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_SET):
                case static_cast< uint8_t>(Literal::E_SET_PRKING_SLOT):
                case static_cast< uint8_t>(Literal::E_SET_PRKING_SLOT_AREA):
                case static_cast< uint8_t>(Literal::E_RANDOM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SetPrkgSlotTyp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SetPrkgSlotTyp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SetPrkgSlotTyp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SetPrkgSlotTyp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SetPrkgSlotTyp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SetPrkgSlotTyp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef int8_t SetMapFlr;
    
    struct AVMStsReq : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        AVMStsReq()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        AVMStsReq(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AVMStsReq &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AVMStsReq &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AVMStsReq &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AVMStsReq &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AVMStsReq &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AVMStsReq &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct SideBsdDispSts : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        SideBsdDispSts()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        SideBsdDispSts(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SideBsdDispSts &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SideBsdDispSts &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SideBsdDispSts &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SideBsdDispSts &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SideBsdDispSts &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SideBsdDispSts &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct SideBsdDispErrorSts : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NOERROR = 0,
            E_SYSTEMERROR = 1
        };
    
        SideBsdDispErrorSts()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NOERROR)) {}
        SideBsdDispErrorSts(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NOERROR):
                case static_cast< uint8_t>(Literal::E_SYSTEMERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SideBsdDispErrorSts &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SideBsdDispErrorSts &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SideBsdDispErrorSts &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SideBsdDispErrorSts &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SideBsdDispErrorSts &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SideBsdDispErrorSts &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef uint8_t SetLvngPOI;
    typedef std::vector< uint8_t> HAVPLearningWorldArray;
    typedef uint8_t SelNearSlotID;
    
    struct SideBsdDispRequest : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_REQUEST = 0
        };
    
        SideBsdDispRequest()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_REQUEST)) {}
        SideBsdDispRequest(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_REQUEST):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SideBsdDispRequest &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SideBsdDispRequest &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SideBsdDispRequest &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SideBsdDispRequest &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SideBsdDispRequest &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SideBsdDispRequest &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef uint8_t SetPrkgArea;
    typedef std::vector< uint8_t> HAVPMapFileArray;
    
    struct AVMStsResp : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_OFF = 0,
            E_ON = 1
        };
    
        AVMStsResp()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_OFF)) {}
        AVMStsResp(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_OFF):
                case static_cast< uint8_t>(Literal::E_ON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AVMStsResp &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AVMStsResp &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AVMStsResp &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AVMStsResp &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AVMStsResp &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AVMStsResp &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct SVPfunctionReq : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_REQUEST = 0,
            E_REQUEST = 1
        };
    
        SVPfunctionReq()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_REQUEST)) {}
        SVPfunctionReq(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_REQUEST):
                case static_cast< uint8_t>(Literal::E_REQUEST):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SVPfunctionReq &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SVPfunctionReq &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SVPfunctionReq &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SVPfunctionReq &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SVPfunctionReq &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SVPfunctionReq &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
};

const char* HAVPandAVPFunctions::getInterface() {
    return ("GREATWALL.IDC3_0.HAVPandAVPFunctions:v1_0");
}

CommonAPI::Version HAVPandAVPFunctions::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace IDC3_0
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_IDC3_0_HAV_PAND_AVP_FUNCTIONS_HPP_
