/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/IDC3_0/HAVPandAVPFunctionsStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace IDC3_0 {

HAVPandAVPFunctionsStubDefault::HAVPandAVPFunctionsStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(HAVPandAVPFunctions::getInterfaceVersion()) {
}

const CommonAPI::Version& HAVPandAVPFunctionsStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

HAVPandAVPFunctionsStubRemoteEvent* HAVPandAVPFunctionsStubDefault::initStubAdapter(const std::shared_ptr< HAVPandAVPFunctionsStubAdapter> &_adapter) {
    CommonAPI::Stub<HAVPandAVPFunctionsStubAdapter, HAVPandAVPFunctionsStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void HAVPandAVPFunctionsStubDefault::SideBsdDisp(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::SideBsdDispRequest _SideBsdDispReq, SideBsdDispReply_t _reply) {
    (void)_client;
    (void)_SideBsdDispReq;
    HAVPandAVPFunctions::SideBsdDispSts SideBsdDispResp = HAVPandAVPFunctions::SideBsdDispSts::E_OFF;
    if (!SideBsdDispResp.validate()) {
        return;
    }
    _reply(SideBsdDispResp);
}

void HAVPandAVPFunctionsStubDefault::AVMDispResp(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::AVMStsResp _AVMStsResp) {
    (void)_client;
    (void)_AVMStsResp;
}

void HAVPandAVPFunctionsStubDefault::HAVP_SVPSwtReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::BtnEnaReq _BtnEnaReq) {
    (void)_client;
    (void)_BtnEnaReq;
}

void HAVPandAVPFunctionsStubDefault::PrkgAreaReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::SetPrkgArea _SetPrkgArea) {
    (void)_client;
    (void)_SetPrkgArea;
}

void HAVPandAVPFunctionsStubDefault::AutoReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::AutoPushReq _AutoPushReq) {
    (void)_client;
    (void)_AutoPushReq;
}

void HAVPandAVPFunctionsStubDefault::PrkgFlrReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::SetMapFlr _SetMapFlr) {
    (void)_client;
    (void)_SetMapFlr;
}

void HAVPandAVPFunctionsStubDefault::SVPReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::SVPfunctionReq _SVPfunctionReq) {
    (void)_client;
    (void)_SVPfunctionReq;
}

void HAVPandAVPFunctionsStubDefault::PrkgTypReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::SetPrkgSlotTyp _SetPrkgSlotTyp) {
    (void)_client;
    (void)_SetPrkgSlotTyp;
}

void HAVPandAVPFunctionsStubDefault::TarPrkgIDReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::TarMapID _TarMapID) {
    (void)_client;
    (void)_TarMapID;
}

void HAVPandAVPFunctionsStubDefault::LvngPOIReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::SetLvngPOI _SetLvngPOI) {
    (void)_client;
    (void)_SetLvngPOI;
}

void HAVPandAVPFunctionsStubDefault::PrkgLotMapUpdSt(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::MapUpdSt _MapUpdSt) {
    (void)_client;
    (void)_MapUpdSt;
}

void HAVPandAVPFunctionsStubDefault::NearSlotIDReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::SelNearSlotID _SelNearSlotID) {
    (void)_client;
    (void)_SelNearSlotID;
}

void HAVPandAVPFunctionsStubDefault::PrkgSlotReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::SetPrkgSlot _SetPrkgSlot) {
    (void)_client;
    (void)_SetPrkgSlot;
}

void HAVPandAVPFunctionsStubDefault::HAVPReq(const std::shared_ptr<CommonAPI::ClientId> _client, HAVPandAVPFunctions::HAVPfunctionReq _HAVPfunctionReq) {
    (void)_client;
    (void)_HAVPfunctionReq;
}


void HAVPandAVPFunctionsStubDefault::fireHAVPPathMapEvent(const ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions::HAVPMapFileArray &_HAVPMapFileArray) {
    HAVPandAVPFunctionsStub::fireHAVPPathMapEvent(_HAVPMapFileArray);
}
void HAVPandAVPFunctionsStubDefault::fireSideBsdDispErrStsInfoEvent(const ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions::SideBsdDispErrorSts &_SideBsdDispErrSts) {
    if (!_SideBsdDispErrSts.validate()) {
        return;
    }
    HAVPandAVPFunctionsStub::fireSideBsdDispErrStsInfoEvent(_SideBsdDispErrSts);
}
void HAVPandAVPFunctionsStubDefault::fireAVMDispReqEvent(const ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions::AVMStsReq &_AVMStsReq) {
    if (!_AVMStsReq.validate()) {
        return;
    }
    HAVPandAVPFunctionsStub::fireAVMDispReqEvent(_AVMStsReq);
}
void HAVPandAVPFunctionsStubDefault::fireHAVPPathInfoEvent(const ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions::HAVPLearningWorldArray &_HAVPLearningWorldArray) {
    HAVPandAVPFunctionsStub::fireHAVPPathInfoEvent(_HAVPLearningWorldArray);
}
void HAVPandAVPFunctionsStubDefault::fireHAVPRendergInfoEvent(const ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions::HAVPVehDataArray &_HAVPVehDataArray) {
    HAVPandAVPFunctionsStub::fireHAVPRendergInfoEvent(_HAVPVehDataArray);
}
void HAVPandAVPFunctionsStubDefault::fireSideBsdDispStsInfoEvent(const ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions::SideBsdDispStatus &_SideBsdDispSts) {
    if (!_SideBsdDispSts.validate()) {
        return;
    }
    HAVPandAVPFunctionsStub::fireSideBsdDispStsInfoEvent(_SideBsdDispSts);
}
void HAVPandAVPFunctionsStubDefault::fireHAVP_SVPScrnDispInfoEvent(const ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions::HAVP_SVPScrnInfoStruct &_HAVP_SVPScrnInfoStruct) {
    HAVPandAVPFunctionsStub::fireHAVP_SVPScrnDispInfoEvent(_HAVP_SVPScrnInfoStruct);
}


HAVPandAVPFunctionsStubDefault::RemoteEventHandler::RemoteEventHandler(HAVPandAVPFunctionsStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace IDC3_0
} // namespace GREATWALL
} // namespace v1
