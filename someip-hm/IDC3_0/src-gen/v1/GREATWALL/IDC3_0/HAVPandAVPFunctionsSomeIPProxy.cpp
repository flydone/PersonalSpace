/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/IDC3_0/HAVPandAVPFunctionsSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace IDC3_0 {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createHAVPandAVPFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< HAVPandAVPFunctionsSomeIPProxy>(_address, _connection);
}

void initializeHAVPandAVPFunctionsSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.IDC3_0.HAVPandAVPFunctions:v1_0:HAVPandAVPFunctions01",
        0x803, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         HAVPandAVPFunctions::getInterface(),
         &createHAVPandAVPFunctionsSomeIPProxy);
}

INITIALIZER(registerHAVPandAVPFunctionsSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeHAVPandAVPFunctionsSomeIPProxy);
}

HAVPandAVPFunctionsSomeIPProxy::HAVPandAVPFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          hAVPPathMap_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8003), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::HAVPMapFileArrayDeployment_t* >(nullptr))),
          sideBsdDispErrStsInfo_(*this, 0x4, CommonAPI::SomeIP::event_id_t(0x8006), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispErrorStsDeployment_t* >(nullptr))),
          aVMDispReq_(*this, 0x3, CommonAPI::SomeIP::event_id_t(0x8005), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::AVMStsReqDeployment_t* >(nullptr))),
          hAVPPathInfo_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8001), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::HAVPLearningWorldArrayDeployment_t* >(nullptr))),
          hAVPRendergInfo_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8002), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::HAVPVehDataArrayDeployment_t* >(nullptr))),
          sideBsdDispStsInfo_(*this, 0x4, CommonAPI::SomeIP::event_id_t(0x8007), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispStatusDeployment_t* >(nullptr))),
          hAVP_SVPScrnDispInfo_(*this, 0x2, CommonAPI::SomeIP::event_id_t(0x8004), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::HAVP_SVPScrnInfoStructDeployment_t* >(nullptr)))
    {
    }


    HAVPandAVPFunctionsSomeIPProxy::HAVPPathMapEvent& HAVPandAVPFunctionsSomeIPProxy::getHAVPPathMapEvent() {
        return hAVPPathMap_;
    }
    HAVPandAVPFunctionsSomeIPProxy::SideBsdDispErrStsInfoEvent& HAVPandAVPFunctionsSomeIPProxy::getSideBsdDispErrStsInfoEvent() {
        return sideBsdDispErrStsInfo_;
    }
    HAVPandAVPFunctionsSomeIPProxy::AVMDispReqEvent& HAVPandAVPFunctionsSomeIPProxy::getAVMDispReqEvent() {
        return aVMDispReq_;
    }
    HAVPandAVPFunctionsSomeIPProxy::HAVPPathInfoEvent& HAVPandAVPFunctionsSomeIPProxy::getHAVPPathInfoEvent() {
        return hAVPPathInfo_;
    }
    HAVPandAVPFunctionsSomeIPProxy::HAVPRendergInfoEvent& HAVPandAVPFunctionsSomeIPProxy::getHAVPRendergInfoEvent() {
        return hAVPRendergInfo_;
    }
    HAVPandAVPFunctionsSomeIPProxy::SideBsdDispStsInfoEvent& HAVPandAVPFunctionsSomeIPProxy::getSideBsdDispStsInfoEvent() {
        return sideBsdDispStsInfo_;
    }
    HAVPandAVPFunctionsSomeIPProxy::HAVP_SVPScrnDispInfoEvent& HAVPandAVPFunctionsSomeIPProxy::getHAVP_SVPScrnDispInfoEvent() {
        return hAVP_SVPScrnDispInfo_;
    }

        void HAVPandAVPFunctionsSomeIPProxy::SideBsdDisp(const HAVPandAVPFunctions::SideBsdDispRequest &_SideBsdDispReq, CommonAPI::CallStatus &_internalCallStatus, HAVPandAVPFunctions::SideBsdDispSts &_SideBsdDispResp, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< HAVPandAVPFunctions::SideBsdDispRequest, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispRequestDeployment_t> deploy_SideBsdDispReq(_SideBsdDispReq, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispRequestDeployment_t* >(nullptr));
            CommonAPI::Deployable< HAVPandAVPFunctions::SideBsdDispSts, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispStsDeployment_t> deploy_SideBsdDispResp(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispStsDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SideBsdDispRequest,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispRequestDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SideBsdDispSts,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispStsDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x14),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_SideBsdDispReq,
    _internalCallStatus,
    deploy_SideBsdDispResp);
    _SideBsdDispResp = deploy_SideBsdDispResp.getValue();
    }
    std::future<CommonAPI::CallStatus> HAVPandAVPFunctionsSomeIPProxy::SideBsdDispAsync(const HAVPandAVPFunctions::SideBsdDispRequest &_SideBsdDispReq, SideBsdDispAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< HAVPandAVPFunctions::SideBsdDispRequest, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispRequestDeployment_t> deploy_SideBsdDispReq(_SideBsdDispReq, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispRequestDeployment_t* >(nullptr));
        CommonAPI::Deployable< HAVPandAVPFunctions::SideBsdDispSts, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispStsDeployment_t> deploy_SideBsdDispResp(static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispStsDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    HAVPandAVPFunctions::SideBsdDispRequest,
                    ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispRequestDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    HAVPandAVPFunctions::SideBsdDispSts,
                    ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispStsDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x14),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_SideBsdDispReq,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< HAVPandAVPFunctions::SideBsdDispSts, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SideBsdDispStsDeployment_t > _SideBsdDispResp) {
                if (_callback)
                    _callback(_internalCallStatus, _SideBsdDispResp.getValue());
            },
            std::make_tuple(deploy_SideBsdDispResp));
    }
        void HAVPandAVPFunctionsSomeIPProxy::AVMDispResp(const HAVPandAVPFunctions::AVMStsResp &_AVMStsResp, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::AVMStsResp, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::AVMStsRespDeployment_t> deploy_AVMStsResp(_AVMStsResp, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::AVMStsRespDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::AVMStsResp,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::AVMStsRespDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x13),
            true,
            false,
    deploy_AVMStsResp,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::HAVP_SVPSwtReq(const HAVPandAVPFunctions::BtnEnaReq &_BtnEnaReq, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::BtnEnaReq, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::BtnEnaReqDeployment_t> deploy_BtnEnaReq(_BtnEnaReq, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::BtnEnaReqDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::BtnEnaReq,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::BtnEnaReqDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            true,
            false,
    deploy_BtnEnaReq,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::PrkgAreaReq(const HAVPandAVPFunctions::SetPrkgArea &_SetPrkgArea, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::SetPrkgArea, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_SetPrkgArea(_SetPrkgArea, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SetPrkgArea,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            true,
            false,
    deploy_SetPrkgArea,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::AutoReq(const HAVPandAVPFunctions::AutoPushReq &_AutoPushReq, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::AutoPushReq, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::AutoPushReqDeployment_t> deploy_AutoPushReq(_AutoPushReq, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::AutoPushReqDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::AutoPushReq,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::AutoPushReqDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x11),
            true,
            false,
    deploy_AutoPushReq,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::PrkgFlrReq(const HAVPandAVPFunctions::SetMapFlr &_SetMapFlr, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::SetMapFlr, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_SetMapFlr(_SetMapFlr, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SetMapFlr,
                        CommonAPI::SomeIP::IntegerDeployment<int8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            true,
            false,
    deploy_SetMapFlr,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::SVPReq(const HAVPandAVPFunctions::SVPfunctionReq &_SVPfunctionReq, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::SVPfunctionReq, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SVPfunctionReqDeployment_t> deploy_SVPfunctionReq(_SVPfunctionReq, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SVPfunctionReqDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SVPfunctionReq,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SVPfunctionReqDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x12),
            true,
            false,
    deploy_SVPfunctionReq,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::PrkgTypReq(const HAVPandAVPFunctions::SetPrkgSlotTyp &_SetPrkgSlotTyp, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::SetPrkgSlotTyp, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SetPrkgSlotTypDeployment_t> deploy_SetPrkgSlotTyp(_SetPrkgSlotTyp, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SetPrkgSlotTypDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SetPrkgSlotTyp,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::SetPrkgSlotTypDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            true,
            false,
    deploy_SetPrkgSlotTyp,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::TarPrkgIDReq(const HAVPandAVPFunctions::TarMapID &_TarMapID, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::TarMapID, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_TarMapID(_TarMapID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::TarMapID,
                        CommonAPI::SomeIP::IntegerDeployment<uint16_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x8),
            true,
            false,
    deploy_TarMapID,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::LvngPOIReq(const HAVPandAVPFunctions::SetLvngPOI &_SetLvngPOI, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::SetLvngPOI, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_SetLvngPOI(_SetLvngPOI, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SetLvngPOI,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7),
            true,
            false,
    deploy_SetLvngPOI,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::PrkgLotMapUpdSt(const HAVPandAVPFunctions::MapUpdSt &_MapUpdSt, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::MapUpdSt, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::MapUpdStDeployment_t> deploy_MapUpdSt(_MapUpdSt, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::MapUpdStDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::MapUpdSt,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::MapUpdStDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            true,
            false,
    deploy_MapUpdSt,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::NearSlotIDReq(const HAVPandAVPFunctions::SelNearSlotID &_SelNearSlotID, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::SelNearSlotID, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_SelNearSlotID(_SelNearSlotID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SelNearSlotID,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x9),
            true,
            false,
    deploy_SelNearSlotID,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::PrkgSlotReq(const HAVPandAVPFunctions::SetPrkgSlot &_SetPrkgSlot, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::SetPrkgSlot, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_SetPrkgSlot(_SetPrkgSlot, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::SetPrkgSlot,
                        CommonAPI::SomeIP::IntegerDeployment<uint16_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            true,
            false,
    deploy_SetPrkgSlot,
    _internalCallStatus);
    }
        void HAVPandAVPFunctionsSomeIPProxy::HAVPReq(const HAVPandAVPFunctions::HAVPfunctionReq &_HAVPfunctionReq, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< HAVPandAVPFunctions::HAVPfunctionReq, ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::HAVPfunctionReqDeployment_t> deploy_HAVPfunctionReq(_HAVPfunctionReq, static_cast< ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::HAVPfunctionReqDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        HAVPandAVPFunctions::HAVPfunctionReq,
                        ::v1::GREATWALL::IDC3_0::HAVPandAVPFunctions_::HAVPfunctionReqDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x10),
            true,
            false,
    deploy_HAVPfunctionReq,
    _internalCallStatus);
    }



    void HAVPandAVPFunctionsSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace IDC3_0
} // namespace GREATWALL
} // namespace v1
