/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_IDC__L2_System_Functions_STUB_HPP_
#define V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_IDC__L2_System_Functions_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/GREATWALL/IDC_L2_IDC1_5_IDC3_0_MDC_A/IDC_L2SystemFunctions.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace IDC_L2_IDC1_5_IDC3_0_MDC_A {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service IDC_L2SystemFunctions. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class IDC_L2SystemFunctionsStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual IDC_L2SystemFunctions {
 public:
    ///Notifies all remote listeners about a change of value of the attribute LocationInfoData.
    virtual void fireLocationInfoDataAttributeChanged(const ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::IDC_L2SystemFunctions::LocationInfoStruct& LocationInfoData) = 0;
    ///Notifies all remote listeners about a change of value of the attribute OBJPptyInfoData.
    virtual void fireOBJPptyInfoDataAttributeChanged(const ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::IDC_L2SystemFunctions::OBJPptyInfoStruct& OBJPptyInfoData) = 0;



    virtual void deactivateManagedInstances() = 0;

    void lockLocationInfoDataAttribute(bool _lockAccess) {
        if (_lockAccess) {
            locationInfoDataMutex_.lock();
        } else {
            locationInfoDataMutex_.unlock();
        }
    }
    void lockOBJPptyInfoDataAttribute(bool _lockAccess) {
        if (_lockAccess) {
            oBJPptyInfoDataMutex_.lock();
        } else {
            oBJPptyInfoDataMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

    std::recursive_mutex locationInfoDataMutex_;
    std::recursive_mutex oBJPptyInfoDataMutex_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for IDC_L2SystemFunctions.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IDC_L2SystemFunctionsStubRemoteEvent
{
public:
    virtual ~IDC_L2SystemFunctionsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service IDC_L2SystemFunctions to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IDC_L2SystemFunctionsStub
    : public virtual CommonAPI::Stub<IDC_L2SystemFunctionsStubAdapter, IDC_L2SystemFunctionsStubRemoteEvent>
{
public:

    virtual ~IDC_L2SystemFunctionsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }

    /// Provides getter access to the attribute LocationInfoData
    virtual const ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::IDC_L2SystemFunctions::LocationInfoStruct &getLocationInfoDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireLocationInfoDataAttributeChanged(::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::IDC_L2SystemFunctions::LocationInfoStruct _value) {
    auto stubAdapter = CommonAPI::Stub<IDC_L2SystemFunctionsStubAdapter, IDC_L2SystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireLocationInfoDataAttributeChanged(_value);
    }
    void lockLocationInfoDataAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<IDC_L2SystemFunctionsStubAdapter, IDC_L2SystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockLocationInfoDataAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute OBJPptyInfoData
    virtual const ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::IDC_L2SystemFunctions::OBJPptyInfoStruct &getOBJPptyInfoDataAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireOBJPptyInfoDataAttributeChanged(::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::IDC_L2SystemFunctions::OBJPptyInfoStruct _value) {
    auto stubAdapter = CommonAPI::Stub<IDC_L2SystemFunctionsStubAdapter, IDC_L2SystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireOBJPptyInfoDataAttributeChanged(_value);
    }
    void lockOBJPptyInfoDataAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<IDC_L2SystemFunctionsStubAdapter, IDC_L2SystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockOBJPptyInfoDataAttribute(_lockAccess);
    }


    
    using CommonAPI::Stub<IDC_L2SystemFunctionsStubAdapter, IDC_L2SystemFunctionsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<IDC_L2SystemFunctionsStubAdapter, IDC_L2SystemFunctionsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<IDC_L2SystemFunctionsStubAdapter, IDC_L2SystemFunctionsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef IDC_L2SystemFunctionsStubRemoteEvent RemoteEventType;
    typedef IDC_L2SystemFunctions StubInterface;
};

} // namespace IDC_L2_IDC1_5_IDC3_0_MDC_A
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_IDC__L2_System_Functions_STUB_HPP_
