/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_ADAS_DISPLAY_INFORMATION_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_ADAS_DISPLAY_INFORMATION_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/GREATWALL/IDC_L2_IDC1_5_IDC3_0_MDC_A/ADASDisplayInformationStub.hpp>
#include <v1/GREATWALL/IDC_L2_IDC1_5_IDC3_0_MDC_A/ADASDisplayInformationSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace IDC_L2_IDC1_5_IDC3_0_MDC_A {

template <typename _Stub = ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformationStub, typename... _Stubs>
class ADASDisplayInformationSomeIPStubAdapterInternal
    : public virtual ADASDisplayInformationStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> ADASDisplayInformationSomeIPStubAdapterHelper;

    ~ADASDisplayInformationSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        ADASDisplayInformationSomeIPStubAdapterHelper::deinit();
    }

    void fireLocationDispEvent(const ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation::LaneChangeZone& LaneChangeZone);

    void fireGuideLineCoordinateEvent(const ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation::Guide_Line_Points_Array& Guide_Line_Points_Array);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformationStub,
        CommonAPI::Version
    > getADASDisplayInformationInterfaceVersionStubDispatcher;



    ADASDisplayInformationSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        ADASDisplayInformationSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< ADASDisplayInformationStub>(_stub))
    {

        


        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8002), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, false);
        }
    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformationStub,
    CommonAPI::Version
    > ADASDisplayInformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::getADASDisplayInformationInterfaceVersionStubDispatcher(&ADASDisplayInformationStub::lockInterfaceVersionAttribute, &ADASDisplayInformationStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
void ADASDisplayInformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireLocationDispEvent(const ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation::LaneChangeZone& _LaneChangeZone) {
    CommonAPI::Deployable< ADASDisplayInformation::LaneChangeZone, ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation_::LaneChangeZoneDeployment_t> deployed_LaneChangeZone(_LaneChangeZone, static_cast< ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation_::LaneChangeZoneDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation::LaneChangeZone, ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation_::LaneChangeZoneDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8002),
            false,
             deployed_LaneChangeZone 
    );
}

template <typename _Stub, typename... _Stubs>
void ADASDisplayInformationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGuideLineCoordinateEvent(const ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation::Guide_Line_Points_Array& _Guide_Line_Points_Array) {
    CommonAPI::Deployable< ADASDisplayInformation::Guide_Line_Points_Array, ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation_::Guide_Line_Points_ArrayDeployment_t> deployed_Guide_Line_Points_Array(_Guide_Line_Points_Array, static_cast< ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation_::Guide_Line_Points_ArrayDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation::Guide_Line_Points_Array, ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformation_::Guide_Line_Points_ArrayDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8001),
            false,
             deployed_Guide_Line_Points_Array 
    );
}

template <typename _Stub = ::v1::GREATWALL::IDC_L2_IDC1_5_IDC3_0_MDC_A::ADASDisplayInformationStub, typename... _Stubs>
class ADASDisplayInformationSomeIPStubAdapter
    : public ADASDisplayInformationSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< ADASDisplayInformationSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    ADASDisplayInformationSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          ADASDisplayInformationSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace IDC_L2_IDC1_5_IDC3_0_MDC_A
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_ADAS_Display_Information_SOMEIP_STUB_ADAPTER_HPP_
