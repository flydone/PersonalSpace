/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_ADAS_DISPLAY_INFORMATION_HPP_
#define V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_ADAS_DISPLAY_INFORMATION_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace IDC_L2_IDC1_5_IDC3_0_MDC_A {

class ADASDisplayInformation {
public:
    virtual ~ADASDisplayInformation() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    typedef float Guide_Line_Point_x;
    typedef float Guide_Line_Point_y;
    struct Guide_Line_Point : CommonAPI::Struct< Guide_Line_Point_x, Guide_Line_Point_y> {
    
        Guide_Line_Point()
        {
            std::get< 0>(values_) = Guide_Line_Point_x();
            std::get< 1>(values_) = Guide_Line_Point_y();
        }
        Guide_Line_Point(const Guide_Line_Point_x &_Guide_Line_Point_x, const Guide_Line_Point_y &_Guide_Line_Point_y)
        {
            std::get< 0>(values_) = _Guide_Line_Point_x;
            std::get< 1>(values_) = _Guide_Line_Point_y;
        }
        inline const Guide_Line_Point_x &getGuide_Line_Point_x() const { return std::get< 0>(values_); }
        inline void setGuide_Line_Point_x(const Guide_Line_Point_x &_value) { std::get< 0>(values_) = _value; }
        inline const Guide_Line_Point_y &getGuide_Line_Point_y() const { return std::get< 1>(values_); }
        inline void setGuide_Line_Point_y(const Guide_Line_Point_y &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const Guide_Line_Point& _other) const {
        return (getGuide_Line_Point_x() == _other.getGuide_Line_Point_x() && getGuide_Line_Point_y() == _other.getGuide_Line_Point_y());
        }
        inline bool operator!=(const Guide_Line_Point &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef std::vector< ADASDisplayInformation::Guide_Line_Point> Guide_Line_Points_Array;
    
    struct LaneChangeZone : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NO_DISPLAY = 0,
            E_LEFT_SATISFIED = 1,
            E_RIGHT_SATISFIED = 2,
            E_LEFT_NOT_SATISFIED = 3,
            E_RIGHT_NOT_SATISFIED = 4
        };
    
        LaneChangeZone()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NO_DISPLAY)) {}
        LaneChangeZone(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NO_DISPLAY):
                case static_cast< uint8_t>(Literal::E_LEFT_SATISFIED):
                case static_cast< uint8_t>(Literal::E_RIGHT_SATISFIED):
                case static_cast< uint8_t>(Literal::E_LEFT_NOT_SATISFIED):
                case static_cast< uint8_t>(Literal::E_RIGHT_NOT_SATISFIED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LaneChangeZone &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LaneChangeZone &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LaneChangeZone &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LaneChangeZone &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LaneChangeZone &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LaneChangeZone &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
};

const char* ADASDisplayInformation::getInterface() {
    return ("GREATWALL.IDC_L2_IDC1_5_IDC3_0_MDC_A.ADASDisplayInformation:v1_0");
}

CommonAPI::Version ADASDisplayInformation::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace IDC_L2_IDC1_5_IDC3_0_MDC_A
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_IDC_L2_IDC1_5_IDC3_0_MDC_A_ADAS_DISPLAY_INFORMATION_HPP_
