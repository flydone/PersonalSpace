/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_MDC_A_IDC3_0_Navigation_Map_Information_PROXY_HPP_
#define V1_GREATWALL_MDC_A_IDC3_0_Navigation_Map_Information_PROXY_HPP_

#include <v1/GREATWALL/MDC_A_IDC3_0/NavigationMapInformationProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace MDC_A_IDC3_0 {

template <typename ... _AttributeExtensions>
class NavigationMapInformationProxy
    : virtual public NavigationMapInformation,
      virtual public NavigationMapInformationProxyBase,
      virtual public _AttributeExtensions... {
public:
    NavigationMapInformationProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~NavigationMapInformationProxy();

    typedef NavigationMapInformation InterfaceType;



    /**
     * Returns the wrapper class that provides access to the broadcast AvlPathInfo.
     */
    virtual AvlPathInfoEvent& getAvlPathInfoEvent() {
        return delegate_->getAvlPathInfoEvent();
    }

    /**
     * Calls NavPathInfoReq with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void NavPathInfoReq(const NavigationMapInformation::SDRoute &_SDRoute, CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< NavigationMapInformationProxyBase> delegate_;
};

typedef NavigationMapInformationProxy<> NavigationMapInformationProxyDefault;


//
// NavigationMapInformationProxy Implementation
//
template <typename ... _AttributeExtensions>
NavigationMapInformationProxy<_AttributeExtensions...>::NavigationMapInformationProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< NavigationMapInformationProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< NavigationMapInformationProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
NavigationMapInformationProxy<_AttributeExtensions...>::~NavigationMapInformationProxy() {
}

template <typename ... _AttributeExtensions>
void NavigationMapInformationProxy<_AttributeExtensions...>::NavPathInfoReq(const NavigationMapInformation::SDRoute &_SDRoute, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->NavPathInfoReq(_SDRoute, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &NavigationMapInformationProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool NavigationMapInformationProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool NavigationMapInformationProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& NavigationMapInformationProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& NavigationMapInformationProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace MDC_A_IDC3_0
} // namespace GREATWALL
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_MDC_A_IDC3_0_Navigation_Map_Information_PROXY_HPP_
