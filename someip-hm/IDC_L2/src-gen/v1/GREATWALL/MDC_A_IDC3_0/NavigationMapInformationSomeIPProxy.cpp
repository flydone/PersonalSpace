/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/MDC_A_IDC3_0/NavigationMapInformationSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace MDC_A_IDC3_0 {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createNavigationMapInformationSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< NavigationMapInformationSomeIPProxy>(_address, _connection);
}

void initializeNavigationMapInformationSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.MDC_A_IDC3_0.NavigationMapInformation:v1_0:NavigationMapInformation01",
        0x802, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         NavigationMapInformation::getInterface(),
         &createNavigationMapInformationSomeIPProxy);
}

INITIALIZER(registerNavigationMapInformationSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeNavigationMapInformationSomeIPProxy);
}

NavigationMapInformationSomeIPProxy::NavigationMapInformationSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          avlPathInfo_(*this, 0x2, CommonAPI::SomeIP::event_id_t(0x8002), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
    {
    }


    NavigationMapInformationSomeIPProxy::AvlPathInfoEvent& NavigationMapInformationSomeIPProxy::getAvlPathInfoEvent() {
        return avlPathInfo_;
    }

        void NavigationMapInformationSomeIPProxy::NavPathInfoReq(const NavigationMapInformation::SDRoute &_SDRoute, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< NavigationMapInformation::SDRoute, CommonAPI::SomeIP::StringDeployment> deploy_SDRoute(_SDRoute, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        NavigationMapInformation::SDRoute,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            true,
            false,
    deploy_SDRoute,
    _internalCallStatus);
    }



    void NavigationMapInformationSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace MDC_A_IDC3_0
} // namespace GREATWALL
} // namespace v1
