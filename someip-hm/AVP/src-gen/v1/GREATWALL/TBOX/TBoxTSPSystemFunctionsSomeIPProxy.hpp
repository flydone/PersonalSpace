/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_TSP_SYSTEM_FUNCTIONS_SOMEIP_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_BOX_TSP_SYSTEM_FUNCTIONS_SOMEIP_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxTSPSystemFunctionsProxyBase.hpp>
#include <v1/GREATWALL/TBOX/TBoxTSPSystemFunctionsSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Event.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace TBOX {

class TBoxTSPSystemFunctionsSomeIPProxy
    : virtual public TBoxTSPSystemFunctionsProxyBase,
    virtual public CommonAPI::SomeIP::Proxy {
public:
    TBoxTSPSystemFunctionsSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~TBoxTSPSystemFunctionsSomeIPProxy() { }


    virtual StsResponseEvent& getStsResponseEvent();
    virtual StsContentEvent& getStsContentEvent();
    virtual RegisterContentEvent& getRegisterContentEvent();
    virtual RegisterResponseEvent& getRegisterResponseEvent();

    virtual void StsRequest(const TBoxTSPSystemFunctions::StsRequest &_StsRequest, CommonAPI::CallStatus &_internalCallStatus);
    virtual void RegisterRequest(const TBoxTSPSystemFunctions::RegisterRequest &_RegisterRequest, CommonAPI::CallStatus &_internalCallStatus);


    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

private:


     CommonAPI::SomeIP::Event<StsResponseEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::StsResponse, ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::StsResponseDeployment_t >> stsResponse_;
     CommonAPI::SomeIP::Event<StsContentEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::StsContent, CommonAPI::SomeIP::StringDeployment >> stsContent_;
     CommonAPI::SomeIP::Event<RegisterContentEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::RegisterContent, CommonAPI::SomeIP::StringDeployment >> registerContent_;
     CommonAPI::SomeIP::Event<RegisterResponseEvent, CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::RegisterResponse, ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::RegisterResponseDeployment_t >> registerResponse_;

};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_TBOX_T_Box_TSP_System_Functions_SOMEIP_PROXY_HPP_
