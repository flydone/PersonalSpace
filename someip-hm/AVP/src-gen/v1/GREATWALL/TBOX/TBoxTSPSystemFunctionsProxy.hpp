/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_Box_TSP_System_Functions_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_Box_TSP_System_Functions_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxTSPSystemFunctionsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename ... _AttributeExtensions>
class TBoxTSPSystemFunctionsProxy
    : virtual public TBoxTSPSystemFunctions,
      virtual public TBoxTSPSystemFunctionsProxyBase,
      virtual public _AttributeExtensions... {
public:
    TBoxTSPSystemFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TBoxTSPSystemFunctionsProxy();

    typedef TBoxTSPSystemFunctions InterfaceType;



    /**
     * Returns the wrapper class that provides access to the broadcast StsResponse.
     */
    virtual StsResponseEvent& getStsResponseEvent() {
        return delegate_->getStsResponseEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast StsContent.
     */
    virtual StsContentEvent& getStsContentEvent() {
        return delegate_->getStsContentEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast RegisterContent.
     */
    virtual RegisterContentEvent& getRegisterContentEvent() {
        return delegate_->getRegisterContentEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast RegisterResponse.
     */
    virtual RegisterResponseEvent& getRegisterResponseEvent() {
        return delegate_->getRegisterResponseEvent();
    }

    /**
     * Calls StsRequest with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StsRequest(const TBoxTSPSystemFunctions::StsRequest &_StsRequest, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls RegisterRequest with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RegisterRequest(const TBoxTSPSystemFunctions::RegisterRequest &_RegisterRequest, CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< TBoxTSPSystemFunctionsProxyBase> delegate_;
};

typedef TBoxTSPSystemFunctionsProxy<> TBoxTSPSystemFunctionsProxyDefault;


//
// TBoxTSPSystemFunctionsProxy Implementation
//
template <typename ... _AttributeExtensions>
TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::TBoxTSPSystemFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< TBoxTSPSystemFunctionsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< TBoxTSPSystemFunctionsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::~TBoxTSPSystemFunctionsProxy() {
}

template <typename ... _AttributeExtensions>
void TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::StsRequest(const TBoxTSPSystemFunctions::StsRequest &_StsRequest, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_StsRequest.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->StsRequest(_StsRequest, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::RegisterRequest(const TBoxTSPSystemFunctions::RegisterRequest &_RegisterRequest, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_RegisterRequest.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->RegisterRequest(_RegisterRequest, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TBoxTSPSystemFunctionsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_Box_TSP_System_Functions_PROXY_HPP_
