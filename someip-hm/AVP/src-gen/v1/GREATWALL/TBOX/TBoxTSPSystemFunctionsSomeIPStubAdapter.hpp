/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_BOX_TSP_SYSTEM_FUNCTIONS_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GREATWALL_TBOX_T_BOX_TSP_SYSTEM_FUNCTIONS_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/GREATWALL/TBOX/TBoxTSPSystemFunctionsStub.hpp>
#include <v1/GREATWALL/TBOX/TBoxTSPSystemFunctionsSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename _Stub = ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctionsStub, typename... _Stubs>
class TBoxTSPSystemFunctionsSomeIPStubAdapterInternal
    : public virtual TBoxTSPSystemFunctionsStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> TBoxTSPSystemFunctionsSomeIPStubAdapterHelper;

    ~TBoxTSPSystemFunctionsSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        TBoxTSPSystemFunctionsSomeIPStubAdapterHelper::deinit();
    }

    void fireStsResponseEvent(const ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::StsResponse& StsResponse);

    void fireStsContentEvent(const ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::StsContent& StsContent);

    void fireRegisterContentEvent(const ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::RegisterContent& RegisterContent);

    void fireRegisterResponseEvent(const ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::RegisterResponse& RegisterResponse);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctionsStub,
        CommonAPI::Version
    > getTBoxTSPSystemFunctionsInterfaceVersionStubDispatcher;


    static CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctionsStub,
        std::tuple< TBoxTSPSystemFunctions::StsRequest>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::StsRequestDeployment_t>
    > stsRequestStubDispatcher;
    static CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctionsStub,
        std::tuple< TBoxTSPSystemFunctions::RegisterRequest>,
        std::tuple< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::RegisterRequestDeployment_t>
    > registerRequestStubDispatcher;

    TBoxTSPSystemFunctionsSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        TBoxTSPSystemFunctionsSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< TBoxTSPSystemFunctionsStub>(_stub))
    {

        
                TBoxTSPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1001) }, &stsRequestStubDispatcher );
                TBoxTSPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1002) }, &registerRequestStubDispatcher );




        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8002), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x3));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8004), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x3));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8003), itsEventGroups, false);
        }
    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctionsStub,
    CommonAPI::Version
    > TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::getTBoxTSPSystemFunctionsInterfaceVersionStubDispatcher(&TBoxTSPSystemFunctionsStub::lockInterfaceVersionAttribute, &TBoxTSPSystemFunctionsStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctionsStub,
    std::tuple< TBoxTSPSystemFunctions::StsRequest>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::StsRequestDeployment_t>
> TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::stsRequestStubDispatcher(
    &TBoxTSPSystemFunctionsStub::StsRequest,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::StsRequestDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodStubDispatcher<
    ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctionsStub,
    std::tuple< TBoxTSPSystemFunctions::RegisterRequest>,
    std::tuple< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::RegisterRequestDeployment_t>
> TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerRequestStubDispatcher(
    &TBoxTSPSystemFunctionsStub::RegisterRequest,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::RegisterRequestDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
void TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireStsResponseEvent(const ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::StsResponse& _StsResponse) {
    CommonAPI::Deployable< TBoxTSPSystemFunctions::StsResponse, ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::StsResponseDeployment_t> deployed_StsResponse(_StsResponse, static_cast< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::StsResponseDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::StsResponse, ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::StsResponseDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8001),
            false,
             deployed_StsResponse 
    );
}

template <typename _Stub, typename... _Stubs>
void TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireStsContentEvent(const ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::StsContent& _StsContent) {
    CommonAPI::Deployable< TBoxTSPSystemFunctions::StsContent, CommonAPI::SomeIP::StringDeployment> deployed_StsContent(_StsContent, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::StsContent, CommonAPI::SomeIP::StringDeployment > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8002),
            false,
             deployed_StsContent 
    );
}

template <typename _Stub, typename... _Stubs>
void TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRegisterContentEvent(const ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::RegisterContent& _RegisterContent) {
    CommonAPI::Deployable< TBoxTSPSystemFunctions::RegisterContent, CommonAPI::SomeIP::StringDeployment> deployed_RegisterContent(_RegisterContent, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::RegisterContent, CommonAPI::SomeIP::StringDeployment > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8004),
            false,
             deployed_RegisterContent 
    );
}

template <typename _Stub, typename... _Stubs>
void TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRegisterResponseEvent(const ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::RegisterResponse& _RegisterResponse) {
    CommonAPI::Deployable< TBoxTSPSystemFunctions::RegisterResponse, ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::RegisterResponseDeployment_t> deployed_RegisterResponse(_RegisterResponse, static_cast< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::RegisterResponseDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions::RegisterResponse, ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctions_::RegisterResponseDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8003),
            false,
             deployed_RegisterResponse 
    );
}

template <typename _Stub = ::v1::GREATWALL::TBOX::TBoxTSPSystemFunctionsStub, typename... _Stubs>
class TBoxTSPSystemFunctionsSomeIPStubAdapter
    : public TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< TBoxTSPSystemFunctionsSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    TBoxTSPSystemFunctionsSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          TBoxTSPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_TBOX_T_Box_TSP_System_Functions_SOMEIP_STUB_ADAPTER_HPP_
