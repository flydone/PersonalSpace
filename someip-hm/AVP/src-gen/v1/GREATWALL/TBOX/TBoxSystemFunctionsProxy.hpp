/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_TBOX_T_Box_System_Functions_PROXY_HPP_
#define V1_GREATWALL_TBOX_T_Box_System_Functions_PROXY_HPP_

#include <v1/GREATWALL/TBOX/TBoxSystemFunctionsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace TBOX {

template <typename ... _AttributeExtensions>
class TBoxSystemFunctionsProxy
    : virtual public TBoxSystemFunctions,
      virtual public TBoxSystemFunctionsProxyBase,
      virtual public _AttributeExtensions... {
public:
    TBoxSystemFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TBoxSystemFunctionsProxy();

    typedef TBoxSystemFunctions InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute GPSData.
     */
    virtual GPSDataAttribute& getGPSDataAttribute() {
        return delegate_->getGPSDataAttribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< TBoxSystemFunctionsProxyBase> delegate_;
};

typedef TBoxSystemFunctionsProxy<> TBoxSystemFunctionsProxyDefault;

namespace TBoxSystemFunctionsExtensions {
    template <template <typename > class _ExtensionType>
    class GPSDataAttributeExtension {
     public:
        typedef _ExtensionType< TBoxSystemFunctionsProxyBase::GPSDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< TBoxSystemFunctionsProxyBase::GPSDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        GPSDataAttributeExtension(TBoxSystemFunctionsProxyBase& proxy): attributeExtension_(proxy.getGPSDataAttribute()) {
        }
    
        inline extension_type& getGPSDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace TBoxSystemFunctionsExtensions

//
// TBoxSystemFunctionsProxy Implementation
//
template <typename ... _AttributeExtensions>
TBoxSystemFunctionsProxy<_AttributeExtensions...>::TBoxSystemFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< TBoxSystemFunctionsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< TBoxSystemFunctionsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TBoxSystemFunctionsProxy<_AttributeExtensions...>::~TBoxSystemFunctionsProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &TBoxSystemFunctionsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TBoxSystemFunctionsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TBoxSystemFunctionsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TBoxSystemFunctionsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TBoxSystemFunctionsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace TBOX
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::GREATWALL::TBOX::TBoxSystemFunctionsProxy,
    _AttributeExtension> {
    typedef typename ::v1::GREATWALL::TBOX::TBoxSystemFunctionsProxy<
            ::v1::GREATWALL::TBOX::TBoxSystemFunctionsExtensions::GPSDataAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_TBOX_T_Box_System_Functions_PROXY_HPP_
