/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_AVP_AVP_System_Functions_PROXY_HPP_
#define V1_GREATWALL_AVP_AVP_System_Functions_PROXY_HPP_

#include <v1/GREATWALL/AVP/AVPSystemFunctionsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace AVP {

template <typename ... _AttributeExtensions>
class AVPSystemFunctionsProxy
    : virtual public AVPSystemFunctions,
      virtual public AVPSystemFunctionsProxyBase,
      virtual public _AttributeExtensions... {
public:
    AVPSystemFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~AVPSystemFunctionsProxy();

    typedef AVPSystemFunctions InterfaceType;



    /**
     * Returns the wrapper class that provides access to the broadcast ParkingListResponseNACK.
     */
    virtual ParkingListResponseNACKEvent& getParkingListResponseNACKEvent() {
        return delegate_->getParkingListResponseNACKEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast ParkingListResponseACK.
     */
    virtual ParkingListResponseACKEvent& getParkingListResponseACKEvent() {
        return delegate_->getParkingListResponseACKEvent();
    }

    /**
     * Calls ParkingListRequest with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ParkingListRequest(const AVPSystemFunctions::HUTRequest &_ParkingListRequest, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls PAVPFunction with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PAVPFunction(const AVPSystemFunctions::HUTRequest &_PAVPFunctionOpen, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls PathInfoRequest with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PathInfoRequest(const AVPSystemFunctions::HUTRequest &_PathInfoRequest, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PathInfoRequest with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> PathInfoRequestAsync(const AVPSystemFunctions::HUTRequest &_PathInfoRequest, PathInfoRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PathInfoSelect with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PathInfoSelect(const AVPSystemFunctions::PathNum &_PathNum, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls PathInfoRename with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PathInfoRename(const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PathInfoRename with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> PathInfoRenameAsync(const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, PathInfoRenameAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PathInfoOperation with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PathInfoOperation(const AVPSystemFunctions::PathInfoOperation &_PathInfoOperation, const AVPSystemFunctions::PathNum &_PathNum, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PathInfoOperation with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> PathInfoOperationAsync(const AVPSystemFunctions::PathInfoOperation &_PathInfoOperation, const AVPSystemFunctions::PathNum &_PathNum, PathInfoOperationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GeoFenceRequest with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GeoFenceRequest(const AVPSystemFunctions::HUTRequest &_GeoFenceRequest, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::GeoFenceResponse &_GeoFenceResponse, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GeoFenceRequest with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GeoFenceRequestAsync(const AVPSystemFunctions::HUTRequest &_GeoFenceRequest, GeoFenceRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PathInfoAdd with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PathInfoAdd(const AVPSystemFunctions::PathType &_PathType, const AVPSystemFunctions::PathLotType &_PathLotType, const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PathInfoAdd with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> PathInfoAddAsync(const AVPSystemFunctions::PathType &_PathType, const AVPSystemFunctions::PathLotType &_PathLotType, const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, PathInfoAddAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< AVPSystemFunctionsProxyBase> delegate_;
};

typedef AVPSystemFunctionsProxy<> AVPSystemFunctionsProxyDefault;


//
// AVPSystemFunctionsProxy Implementation
//
template <typename ... _AttributeExtensions>
AVPSystemFunctionsProxy<_AttributeExtensions...>::AVPSystemFunctionsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< AVPSystemFunctionsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< AVPSystemFunctionsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
AVPSystemFunctionsProxy<_AttributeExtensions...>::~AVPSystemFunctionsProxy() {
}

template <typename ... _AttributeExtensions>
void AVPSystemFunctionsProxy<_AttributeExtensions...>::ParkingListRequest(const AVPSystemFunctions::HUTRequest &_ParkingListRequest, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_ParkingListRequest.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->ParkingListRequest(_ParkingListRequest, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void AVPSystemFunctionsProxy<_AttributeExtensions...>::PAVPFunction(const AVPSystemFunctions::HUTRequest &_PAVPFunctionOpen, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_PAVPFunctionOpen.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->PAVPFunction(_PAVPFunctionOpen, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoRequest(const AVPSystemFunctions::HUTRequest &_PathInfoRequest, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info) {
    if (!_PathInfoRequest.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->PathInfoRequest(_PathInfoRequest, _internalCallStatus, _PathInfoStructArray, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoRequestAsync(const AVPSystemFunctions::HUTRequest &_PathInfoRequest, PathInfoRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_PathInfoRequest.validate()) {
        AVPSystemFunctions::PathInfoStructArray PathInfoStructArray = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, PathInfoStructArray);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->PathInfoRequestAsync(_PathInfoRequest, _callback, _info);
}
template <typename ... _AttributeExtensions>
void AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoSelect(const AVPSystemFunctions::PathNum &_PathNum, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->PathInfoSelect(_PathNum, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoRename(const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info) {
    delegate_->PathInfoRename(_PathNum, _PathName, _internalCallStatus, _PathInfoStructArray, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoRenameAsync(const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, PathInfoRenameAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->PathInfoRenameAsync(_PathNum, _PathName, _callback, _info);
}
template <typename ... _AttributeExtensions>
void AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoOperation(const AVPSystemFunctions::PathInfoOperation &_PathInfoOperation, const AVPSystemFunctions::PathNum &_PathNum, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info) {
    if (!_PathInfoOperation.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->PathInfoOperation(_PathInfoOperation, _PathNum, _internalCallStatus, _PathInfoStructArray, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoOperationAsync(const AVPSystemFunctions::PathInfoOperation &_PathInfoOperation, const AVPSystemFunctions::PathNum &_PathNum, PathInfoOperationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_PathInfoOperation.validate()) {
        AVPSystemFunctions::PathInfoStructArray PathInfoStructArray = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, PathInfoStructArray);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->PathInfoOperationAsync(_PathInfoOperation, _PathNum, _callback, _info);
}
template <typename ... _AttributeExtensions>
void AVPSystemFunctionsProxy<_AttributeExtensions...>::GeoFenceRequest(const AVPSystemFunctions::HUTRequest &_GeoFenceRequest, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::GeoFenceResponse &_GeoFenceResponse, const CommonAPI::CallInfo *_info) {
    if (!_GeoFenceRequest.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GeoFenceRequest(_GeoFenceRequest, _internalCallStatus, _GeoFenceResponse, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AVPSystemFunctionsProxy<_AttributeExtensions...>::GeoFenceRequestAsync(const AVPSystemFunctions::HUTRequest &_GeoFenceRequest, GeoFenceRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_GeoFenceRequest.validate()) {
        AVPSystemFunctions::GeoFenceResponse GeoFenceResponse = AVPSystemFunctions::GeoFenceResponse::E_OUTSIDE;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, GeoFenceResponse);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GeoFenceRequestAsync(_GeoFenceRequest, _callback, _info);
}
template <typename ... _AttributeExtensions>
void AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoAdd(const AVPSystemFunctions::PathType &_PathType, const AVPSystemFunctions::PathLotType &_PathLotType, const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info) {
    if (!_PathType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_PathLotType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->PathInfoAdd(_PathType, _PathLotType, _PathNum, _PathName, _internalCallStatus, _PathInfoStructArray, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AVPSystemFunctionsProxy<_AttributeExtensions...>::PathInfoAddAsync(const AVPSystemFunctions::PathType &_PathType, const AVPSystemFunctions::PathLotType &_PathLotType, const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, PathInfoAddAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_PathType.validate()) {
        AVPSystemFunctions::PathInfoStructArray PathInfoStructArray = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, PathInfoStructArray);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_PathLotType.validate()) {
        AVPSystemFunctions::PathInfoStructArray PathInfoStructArray = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, PathInfoStructArray);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->PathInfoAddAsync(_PathType, _PathLotType, _PathNum, _PathName, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &AVPSystemFunctionsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool AVPSystemFunctionsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool AVPSystemFunctionsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& AVPSystemFunctionsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& AVPSystemFunctionsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace AVP
} // namespace GREATWALL
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_AVP_AVP_System_Functions_PROXY_HPP_
