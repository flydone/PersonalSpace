/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/AVP/AVPSystemFunctionsSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace AVP {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createAVPSystemFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< AVPSystemFunctionsSomeIPProxy>(_address, _connection);
}

void initializeAVPSystemFunctionsSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.AVP.AVPSystemFunctions:v1_0:AVPSystemFunctions01",
        0x701, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         AVPSystemFunctions::getInterface(),
         &createAVPSystemFunctionsSomeIPProxy);
}

INITIALIZER(registerAVPSystemFunctionsSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeAVPSystemFunctionsSomeIPProxy);
}

AVPSystemFunctionsSomeIPProxy::AVPSystemFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          parkingListResponseNACK_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8001), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListResponseNACKDeployment_t* >(nullptr))),
          parkingListResponseACK_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8002), false, false, std::make_tuple(&::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListStructArrayDeployment))
    {
    }


    AVPSystemFunctionsSomeIPProxy::ParkingListResponseNACKEvent& AVPSystemFunctionsSomeIPProxy::getParkingListResponseNACKEvent() {
        return parkingListResponseNACK_;
    }
    AVPSystemFunctionsSomeIPProxy::ParkingListResponseACKEvent& AVPSystemFunctionsSomeIPProxy::getParkingListResponseACKEvent() {
        return parkingListResponseACK_;
    }

        void AVPSystemFunctionsSomeIPProxy::ParkingListRequest(const AVPSystemFunctions::HUTRequest &_ParkingListRequest, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< AVPSystemFunctions::HUTRequest, ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t> deploy_ParkingListRequest(_ParkingListRequest, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::HUTRequest,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1003),
            true,
            false,
    deploy_ParkingListRequest,
    _internalCallStatus);
    }
        void AVPSystemFunctionsSomeIPProxy::PAVPFunction(const AVPSystemFunctions::HUTRequest &_PAVPFunctionOpen, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< AVPSystemFunctions::HUTRequest, ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t> deploy_PAVPFunctionOpen(_PAVPFunctionOpen, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::HUTRequest,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1001),
            true,
            false,
    deploy_PAVPFunctionOpen,
    _internalCallStatus);
    }
        void AVPSystemFunctionsSomeIPProxy::PathInfoRequest(const AVPSystemFunctions::HUTRequest &_PathInfoRequest, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< AVPSystemFunctions::HUTRequest, ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t> deploy_PathInfoRequest(_PathInfoRequest, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t> deploy_PathInfoStructArray(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::HUTRequest,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathInfoStructArray,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_PathInfoRequest,
    _internalCallStatus,
    deploy_PathInfoStructArray);
    _PathInfoStructArray = deploy_PathInfoStructArray.getValue();
    }
    std::future<CommonAPI::CallStatus> AVPSystemFunctionsSomeIPProxy::PathInfoRequestAsync(const AVPSystemFunctions::HUTRequest &_PathInfoRequest, PathInfoRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< AVPSystemFunctions::HUTRequest, ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t> deploy_PathInfoRequest(_PathInfoRequest, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t> deploy_PathInfoStructArray(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::HUTRequest,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathInfoStructArray,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_PathInfoRequest,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t > _PathInfoStructArray) {
                if (_callback)
                    _callback(_internalCallStatus, _PathInfoStructArray.getValue());
            },
            std::make_tuple(deploy_PathInfoStructArray));
    }
        void AVPSystemFunctionsSomeIPProxy::PathInfoSelect(const AVPSystemFunctions::PathNum &_PathNum, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< AVPSystemFunctions::PathNum, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PathNum(_PathNum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathNum,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1002),
            true,
            false,
    deploy_PathNum,
    _internalCallStatus);
    }
        void AVPSystemFunctionsSomeIPProxy::PathInfoRename(const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< AVPSystemFunctions::PathNum, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PathNum(_PathNum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathName, CommonAPI::SomeIP::StringDeployment> deploy_PathName(_PathName, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t> deploy_PathInfoStructArray(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathNum,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >,
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathName,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathInfoStructArray,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_PathNum, deploy_PathName,
    _internalCallStatus,
    deploy_PathInfoStructArray);
    _PathInfoStructArray = deploy_PathInfoStructArray.getValue();
    }
    std::future<CommonAPI::CallStatus> AVPSystemFunctionsSomeIPProxy::PathInfoRenameAsync(const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, PathInfoRenameAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< AVPSystemFunctions::PathNum, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PathNum(_PathNum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathName, CommonAPI::SomeIP::StringDeployment> deploy_PathName(_PathName, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t> deploy_PathInfoStructArray(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathNum,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >,
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathName,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathInfoStructArray,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_PathNum, deploy_PathName,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t > _PathInfoStructArray) {
                if (_callback)
                    _callback(_internalCallStatus, _PathInfoStructArray.getValue());
            },
            std::make_tuple(deploy_PathInfoStructArray));
    }
        void AVPSystemFunctionsSomeIPProxy::PathInfoOperation(const AVPSystemFunctions::PathInfoOperation &_PathInfoOperation, const AVPSystemFunctions::PathNum &_PathNum, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< AVPSystemFunctions::PathInfoOperation, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t> deploy_PathInfoOperation(_PathInfoOperation, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathNum, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PathNum(_PathNum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t> deploy_PathInfoStructArray(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathInfoOperation,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t
                    >,
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathNum,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathInfoStructArray,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_PathInfoOperation, deploy_PathNum,
    _internalCallStatus,
    deploy_PathInfoStructArray);
    _PathInfoStructArray = deploy_PathInfoStructArray.getValue();
    }
    std::future<CommonAPI::CallStatus> AVPSystemFunctionsSomeIPProxy::PathInfoOperationAsync(const AVPSystemFunctions::PathInfoOperation &_PathInfoOperation, const AVPSystemFunctions::PathNum &_PathNum, PathInfoOperationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< AVPSystemFunctions::PathInfoOperation, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t> deploy_PathInfoOperation(_PathInfoOperation, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathNum, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PathNum(_PathNum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t> deploy_PathInfoStructArray(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathInfoOperation,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t
                >,
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathNum,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathInfoStructArray,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_PathInfoOperation, deploy_PathNum,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t > _PathInfoStructArray) {
                if (_callback)
                    _callback(_internalCallStatus, _PathInfoStructArray.getValue());
            },
            std::make_tuple(deploy_PathInfoStructArray));
    }
        void AVPSystemFunctionsSomeIPProxy::GeoFenceRequest(const AVPSystemFunctions::HUTRequest &_GeoFenceRequest, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::GeoFenceResponse &_GeoFenceResponse, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< AVPSystemFunctions::HUTRequest, ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t> deploy_GeoFenceRequest(_GeoFenceRequest, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::GeoFenceResponse, ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t> deploy_GeoFenceResponse(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::HUTRequest,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::GeoFenceResponse,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_GeoFenceRequest,
    _internalCallStatus,
    deploy_GeoFenceResponse);
    _GeoFenceResponse = deploy_GeoFenceResponse.getValue();
    }
    std::future<CommonAPI::CallStatus> AVPSystemFunctionsSomeIPProxy::GeoFenceRequestAsync(const AVPSystemFunctions::HUTRequest &_GeoFenceRequest, GeoFenceRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< AVPSystemFunctions::HUTRequest, ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t> deploy_GeoFenceRequest(_GeoFenceRequest, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::GeoFenceResponse, ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t> deploy_GeoFenceResponse(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::HUTRequest,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::GeoFenceResponse,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_GeoFenceRequest,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< AVPSystemFunctions::GeoFenceResponse, ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t > _GeoFenceResponse) {
                if (_callback)
                    _callback(_internalCallStatus, _GeoFenceResponse.getValue());
            },
            std::make_tuple(deploy_GeoFenceResponse));
    }
        void AVPSystemFunctionsSomeIPProxy::PathInfoAdd(const AVPSystemFunctions::PathType &_PathType, const AVPSystemFunctions::PathLotType &_PathLotType, const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< AVPSystemFunctions::PathType, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t> deploy_PathType(_PathType, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathLotType, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t> deploy_PathLotType(_PathLotType, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathNum, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PathNum(_PathNum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathName, CommonAPI::SomeIP::StringDeployment> deploy_PathName(_PathName, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t> deploy_PathInfoStructArray(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathType,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathLotType,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathNum,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >,
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathName,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        AVPSystemFunctions::PathInfoStructArray,
                        ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_PathType, deploy_PathLotType, deploy_PathNum, deploy_PathName,
    _internalCallStatus,
    deploy_PathInfoStructArray);
    _PathInfoStructArray = deploy_PathInfoStructArray.getValue();
    }
    std::future<CommonAPI::CallStatus> AVPSystemFunctionsSomeIPProxy::PathInfoAddAsync(const AVPSystemFunctions::PathType &_PathType, const AVPSystemFunctions::PathLotType &_PathLotType, const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, PathInfoAddAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< AVPSystemFunctions::PathType, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t> deploy_PathType(_PathType, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathLotType, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t> deploy_PathLotType(_PathLotType, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathNum, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PathNum(_PathNum, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathName, CommonAPI::SomeIP::StringDeployment> deploy_PathName(_PathName, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t> deploy_PathInfoStructArray(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathType,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathLotType,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathNum,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >,
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathName,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    AVPSystemFunctions::PathInfoStructArray,
                    ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_PathType, deploy_PathLotType, deploy_PathNum, deploy_PathName,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< AVPSystemFunctions::PathInfoStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t > _PathInfoStructArray) {
                if (_callback)
                    _callback(_internalCallStatus, _PathInfoStructArray.getValue());
            },
            std::make_tuple(deploy_PathInfoStructArray));
    }



    void AVPSystemFunctionsSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace AVP
} // namespace GREATWALL
} // namespace v1
