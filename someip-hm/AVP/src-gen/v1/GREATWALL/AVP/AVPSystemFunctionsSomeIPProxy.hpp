/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_AVP_AVP_SYSTEM_FUNCTIONS_SOMEIP_PROXY_HPP_
#define V1_GREATWALL_AVP_AVP_SYSTEM_FUNCTIONS_SOMEIP_PROXY_HPP_

#include <v1/GREATWALL/AVP/AVPSystemFunctionsProxyBase.hpp>
#include <v1/GREATWALL/AVP/AVPSystemFunctionsSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Event.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace AVP {

class AVPSystemFunctionsSomeIPProxy
    : virtual public AVPSystemFunctionsProxyBase,
    virtual public CommonAPI::SomeIP::Proxy {
public:
    AVPSystemFunctionsSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~AVPSystemFunctionsSomeIPProxy() { }


    virtual ParkingListResponseNACKEvent& getParkingListResponseNACKEvent();
    virtual ParkingListResponseACKEvent& getParkingListResponseACKEvent();

    virtual void ParkingListRequest(const AVPSystemFunctions::HUTRequest &_ParkingListRequest, CommonAPI::CallStatus &_internalCallStatus);
    virtual void PAVPFunction(const AVPSystemFunctions::HUTRequest &_PAVPFunctionOpen, CommonAPI::CallStatus &_internalCallStatus);
    virtual void PathInfoRequest(const AVPSystemFunctions::HUTRequest &_PathInfoRequest, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> PathInfoRequestAsync(const AVPSystemFunctions::HUTRequest &_PathInfoRequest, PathInfoRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void PathInfoSelect(const AVPSystemFunctions::PathNum &_PathNum, CommonAPI::CallStatus &_internalCallStatus);
    virtual void PathInfoRename(const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> PathInfoRenameAsync(const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, PathInfoRenameAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void PathInfoOperation(const AVPSystemFunctions::PathInfoOperation &_PathInfoOperation, const AVPSystemFunctions::PathNum &_PathNum, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> PathInfoOperationAsync(const AVPSystemFunctions::PathInfoOperation &_PathInfoOperation, const AVPSystemFunctions::PathNum &_PathNum, PathInfoOperationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void GeoFenceRequest(const AVPSystemFunctions::HUTRequest &_GeoFenceRequest, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::GeoFenceResponse &_GeoFenceResponse, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GeoFenceRequestAsync(const AVPSystemFunctions::HUTRequest &_GeoFenceRequest, GeoFenceRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void PathInfoAdd(const AVPSystemFunctions::PathType &_PathType, const AVPSystemFunctions::PathLotType &_PathLotType, const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, CommonAPI::CallStatus &_internalCallStatus, AVPSystemFunctions::PathInfoStructArray &_PathInfoStructArray, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> PathInfoAddAsync(const AVPSystemFunctions::PathType &_PathType, const AVPSystemFunctions::PathLotType &_PathLotType, const AVPSystemFunctions::PathNum &_PathNum, const AVPSystemFunctions::PathName &_PathName, PathInfoAddAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

private:


     CommonAPI::SomeIP::Event<ParkingListResponseNACKEvent, CommonAPI::Deployable< ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListResponseNACK, ::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListResponseNACKDeployment_t >> parkingListResponseNACK_;
     CommonAPI::SomeIP::Event<ParkingListResponseACKEvent, CommonAPI::Deployable< ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListStructArrayDeployment_t >> parkingListResponseACK_;

};

} // namespace AVP
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_AVP_AVP_System_Functions_SOMEIP_PROXY_HPP_
