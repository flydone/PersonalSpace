/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_AVP_AVP_System_Functions_STUB_HPP_
#define V1_GREATWALL_AVP_AVP_System_Functions_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/GREATWALL/AVP/AVPSystemFunctions.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>


#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace AVP {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service AVPSystemFunctions. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class AVPSystemFunctionsStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual AVPSystemFunctions {
 public:

    /**
    * Sends a broadcast event for ParkingListResponseNACK. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireParkingListResponseNACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListResponseNACK &_ParkingListResponseNACK) = 0;
    /**
    * Sends a broadcast event for ParkingListResponseACK. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireParkingListResponseACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListStructArray &_ParkingListResponseACK) = 0;


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for AVPSystemFunctions.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class AVPSystemFunctionsStubRemoteEvent
{
public:
    virtual ~AVPSystemFunctionsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service AVPSystemFunctions to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class AVPSystemFunctionsStub
    : public virtual CommonAPI::Stub<AVPSystemFunctionsStubAdapter, AVPSystemFunctionsStubRemoteEvent>
{
public:
    typedef std::function<void (AVPSystemFunctions::PathInfoStructArray _PathInfoStructArray)>PathInfoRequestReply_t;
    typedef std::function<void (AVPSystemFunctions::PathInfoStructArray _PathInfoStructArray)>PathInfoRenameReply_t;
    typedef std::function<void (AVPSystemFunctions::PathInfoStructArray _PathInfoStructArray)>PathInfoOperationReply_t;
    typedef std::function<void (AVPSystemFunctions::GeoFenceResponse _GeoFenceResponse)>GeoFenceRequestReply_t;
    typedef std::function<void (AVPSystemFunctions::PathInfoStructArray _PathInfoStructArray)>PathInfoAddReply_t;

    virtual ~AVPSystemFunctionsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }


    /// This is the method that will be called on remote calls on the method ParkingListRequest.
    virtual void ParkingListRequest(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::HUTRequest _ParkingListRequest) = 0;
    /// This is the method that will be called on remote calls on the method PAVPFunction.
    virtual void PAVPFunction(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::HUTRequest _PAVPFunctionOpen) = 0;
    /// This is the method that will be called on remote calls on the method PathInfoRequest.
    virtual void PathInfoRequest(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::HUTRequest _PathInfoRequest, PathInfoRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method PathInfoSelect.
    virtual void PathInfoSelect(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::PathNum _PathNum) = 0;
    /// This is the method that will be called on remote calls on the method PathInfoRename.
    virtual void PathInfoRename(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::PathNum _PathNum, AVPSystemFunctions::PathName _PathName, PathInfoRenameReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method PathInfoOperation.
    virtual void PathInfoOperation(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::PathInfoOperation _PathInfoOperation, AVPSystemFunctions::PathNum _PathNum, PathInfoOperationReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method GeoFenceRequest.
    virtual void GeoFenceRequest(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::HUTRequest _GeoFenceRequest, GeoFenceRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method PathInfoAdd.
    virtual void PathInfoAdd(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::PathType _PathType, AVPSystemFunctions::PathLotType _PathLotType, AVPSystemFunctions::PathNum _PathNum, AVPSystemFunctions::PathName _PathName, PathInfoAddReply_t _reply) = 0;
    /// Sends a broadcast event for ParkingListResponseNACK.
    virtual void fireParkingListResponseNACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListResponseNACK &_ParkingListResponseNACK) {
        auto stubAdapter = CommonAPI::Stub<AVPSystemFunctionsStubAdapter, AVPSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireParkingListResponseNACKEvent(_ParkingListResponseNACK);
    }
    /// Sends a broadcast event for ParkingListResponseACK.
    virtual void fireParkingListResponseACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListStructArray &_ParkingListResponseACK) {
        auto stubAdapter = CommonAPI::Stub<AVPSystemFunctionsStubAdapter, AVPSystemFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireParkingListResponseACKEvent(_ParkingListResponseACK);
    }

    
    using CommonAPI::Stub<AVPSystemFunctionsStubAdapter, AVPSystemFunctionsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<AVPSystemFunctionsStubAdapter, AVPSystemFunctionsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<AVPSystemFunctionsStubAdapter, AVPSystemFunctionsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef AVPSystemFunctionsStubRemoteEvent RemoteEventType;
    typedef AVPSystemFunctions StubInterface;
};

} // namespace AVP
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_AVP_AVP_System_Functions_STUB_HPP_
