/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/AVP/AVPSystemFunctionsStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace AVP {

AVPSystemFunctionsStubDefault::AVPSystemFunctionsStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(AVPSystemFunctions::getInterfaceVersion()) {
}

const CommonAPI::Version& AVPSystemFunctionsStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

AVPSystemFunctionsStubRemoteEvent* AVPSystemFunctionsStubDefault::initStubAdapter(const std::shared_ptr< AVPSystemFunctionsStubAdapter> &_adapter) {
    CommonAPI::Stub<AVPSystemFunctionsStubAdapter, AVPSystemFunctionsStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void AVPSystemFunctionsStubDefault::ParkingListRequest(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::HUTRequest _ParkingListRequest) {
    (void)_client;
    (void)_ParkingListRequest;
}

void AVPSystemFunctionsStubDefault::PAVPFunction(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::HUTRequest _PAVPFunctionOpen) {
    (void)_client;
    (void)_PAVPFunctionOpen;
}

void AVPSystemFunctionsStubDefault::PathInfoRequest(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::HUTRequest _PathInfoRequest, PathInfoRequestReply_t _reply) {
    (void)_client;
    (void)_PathInfoRequest;
    AVPSystemFunctions::PathInfoStructArray PathInfoStructArray = {};
    _reply(PathInfoStructArray);
}

void AVPSystemFunctionsStubDefault::PathInfoSelect(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::PathNum _PathNum) {
    (void)_client;
    (void)_PathNum;
}

void AVPSystemFunctionsStubDefault::PathInfoRename(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::PathNum _PathNum, AVPSystemFunctions::PathName _PathName, PathInfoRenameReply_t _reply) {
    (void)_client;
    (void)_PathNum;
    (void)_PathName;
    AVPSystemFunctions::PathInfoStructArray PathInfoStructArray = {};
    _reply(PathInfoStructArray);
}

void AVPSystemFunctionsStubDefault::PathInfoOperation(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::PathInfoOperation _PathInfoOperation, AVPSystemFunctions::PathNum _PathNum, PathInfoOperationReply_t _reply) {
    (void)_client;
    (void)_PathInfoOperation;
    (void)_PathNum;
    AVPSystemFunctions::PathInfoStructArray PathInfoStructArray = {};
    _reply(PathInfoStructArray);
}

void AVPSystemFunctionsStubDefault::GeoFenceRequest(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::HUTRequest _GeoFenceRequest, GeoFenceRequestReply_t _reply) {
    (void)_client;
    (void)_GeoFenceRequest;
    AVPSystemFunctions::GeoFenceResponse GeoFenceResponse = AVPSystemFunctions::GeoFenceResponse::E_OUTSIDE;
    if (!GeoFenceResponse.validate()) {
        return;
    }
    _reply(GeoFenceResponse);
}

void AVPSystemFunctionsStubDefault::PathInfoAdd(const std::shared_ptr<CommonAPI::ClientId> _client, AVPSystemFunctions::PathType _PathType, AVPSystemFunctions::PathLotType _PathLotType, AVPSystemFunctions::PathNum _PathNum, AVPSystemFunctions::PathName _PathName, PathInfoAddReply_t _reply) {
    (void)_client;
    (void)_PathType;
    (void)_PathLotType;
    (void)_PathNum;
    (void)_PathName;
    AVPSystemFunctions::PathInfoStructArray PathInfoStructArray = {};
    _reply(PathInfoStructArray);
}


void AVPSystemFunctionsStubDefault::fireParkingListResponseNACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListResponseNACK &_ParkingListResponseNACK) {
    if (!_ParkingListResponseNACK.validate()) {
        return;
    }
    AVPSystemFunctionsStub::fireParkingListResponseNACKEvent(_ParkingListResponseNACK);
}
void AVPSystemFunctionsStubDefault::fireParkingListResponseACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListStructArray &_ParkingListResponseACK) {
    AVPSystemFunctionsStub::fireParkingListResponseACKEvent(_ParkingListResponseACK);
}


AVPSystemFunctionsStubDefault::RemoteEventHandler::RemoteEventHandler(AVPSystemFunctionsStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace AVP
} // namespace GREATWALL
} // namespace v1
