/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_AVP_AVP_SYSTEM_FUNCTIONS_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GREATWALL_AVP_AVP_SYSTEM_FUNCTIONS_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/GREATWALL/AVP/AVPSystemFunctionsStub.hpp>
#include <v1/GREATWALL/AVP/AVPSystemFunctionsSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace AVP {

template <typename _Stub = ::v1::GREATWALL::AVP::AVPSystemFunctionsStub, typename... _Stubs>
class AVPSystemFunctionsSomeIPStubAdapterInternal
    : public virtual AVPSystemFunctionsStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> AVPSystemFunctionsSomeIPStubAdapterHelper;

    ~AVPSystemFunctionsSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        AVPSystemFunctionsSomeIPStubAdapterHelper::deinit();
    }

    void fireParkingListResponseNACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListResponseNACK& ParkingListResponseNACK);

    void fireParkingListResponseACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListStructArray& ParkingListResponseACK);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        CommonAPI::Version
    > getAVPSystemFunctionsInterfaceVersionStubDispatcher;


    static CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        std::tuple< AVPSystemFunctions::HUTRequest>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t>
    > parkingListRequestStubDispatcher;
    static CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        std::tuple< AVPSystemFunctions::HUTRequest>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t>
    > pAVPFunctionStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        std::tuple< AVPSystemFunctions::HUTRequest>,
        std::tuple< AVPSystemFunctions::PathInfoStructArray>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t>
    > pathInfoRequestStubDispatcher;
    static CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        std::tuple< AVPSystemFunctions::PathNum>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>>
    > pathInfoSelectStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        std::tuple< AVPSystemFunctions::PathNum, AVPSystemFunctions::PathName>,
        std::tuple< AVPSystemFunctions::PathInfoStructArray>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t>
    > pathInfoRenameStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        std::tuple< AVPSystemFunctions::PathInfoOperation, AVPSystemFunctions::PathNum>,
        std::tuple< AVPSystemFunctions::PathInfoStructArray>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t>
    > pathInfoOperationStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        std::tuple< AVPSystemFunctions::HUTRequest>,
        std::tuple< AVPSystemFunctions::GeoFenceResponse>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t>
    > geoFenceRequestStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
        std::tuple< AVPSystemFunctions::PathType, AVPSystemFunctions::PathLotType, AVPSystemFunctions::PathNum, AVPSystemFunctions::PathName>,
        std::tuple< AVPSystemFunctions::PathInfoStructArray>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t>
    > pathInfoAddStubDispatcher;

    AVPSystemFunctionsSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        AVPSystemFunctionsSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< AVPSystemFunctionsStub>(_stub))
    {

        
                AVPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1003) }, &parkingListRequestStubDispatcher );
                AVPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1001) }, &pAVPFunctionStubDispatcher );
                AVPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &pathInfoRequestStubDispatcher );
                AVPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1002) }, &pathInfoSelectStubDispatcher );
                AVPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5) }, &pathInfoRenameStubDispatcher );
                AVPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &pathInfoOperationStubDispatcher );
                AVPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &geoFenceRequestStubDispatcher );
                AVPSystemFunctionsSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x4) }, &pathInfoAddStubDispatcher );


        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8002), itsEventGroups, false);
        }
    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    CommonAPI::Version
    > AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::getAVPSystemFunctionsInterfaceVersionStubDispatcher(&AVPSystemFunctionsStub::lockInterfaceVersionAttribute, &AVPSystemFunctionsStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    std::tuple< AVPSystemFunctions::HUTRequest>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t>
> AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::parkingListRequestStubDispatcher(
    &AVPSystemFunctionsStub::ParkingListRequest,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    std::tuple< AVPSystemFunctions::HUTRequest>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t>
> AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::pAVPFunctionStubDispatcher(
    &AVPSystemFunctionsStub::PAVPFunction,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    std::tuple< AVPSystemFunctions::HUTRequest>,
    std::tuple< AVPSystemFunctions::PathInfoStructArray>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t>
> AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::pathInfoRequestStubDispatcher(
    &AVPSystemFunctionsStub::PathInfoRequest,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr)),
    std::make_tuple(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    std::tuple< AVPSystemFunctions::PathNum>,
    std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>>
> AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::pathInfoSelectStubDispatcher(
    &AVPSystemFunctionsStub::PathInfoSelect,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    std::tuple< AVPSystemFunctions::PathNum, AVPSystemFunctions::PathName>,
    std::tuple< AVPSystemFunctions::PathInfoStructArray>,
    std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::StringDeployment>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t>
> AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::pathInfoRenameStubDispatcher(
    &AVPSystemFunctionsStub::PathInfoRename,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
    std::make_tuple(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    std::tuple< AVPSystemFunctions::PathInfoOperation, AVPSystemFunctions::PathNum>,
    std::tuple< AVPSystemFunctions::PathInfoStructArray>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t>
> AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::pathInfoOperationStubDispatcher(
    &AVPSystemFunctionsStub::PathInfoOperation,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoOperationDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
    std::make_tuple(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    std::tuple< AVPSystemFunctions::HUTRequest>,
    std::tuple< AVPSystemFunctions::GeoFenceResponse>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t>
> AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::geoFenceRequestStubDispatcher(
    &AVPSystemFunctionsStub::GeoFenceRequest,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::HUTRequestDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::GeoFenceResponseDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::AVP::AVPSystemFunctionsStub,
    std::tuple< AVPSystemFunctions::PathType, AVPSystemFunctions::PathLotType, AVPSystemFunctions::PathNum, AVPSystemFunctions::PathName>,
    std::tuple< AVPSystemFunctions::PathInfoStructArray>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t, ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::StringDeployment>,
    std::tuple< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment_t>
> AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::pathInfoAddStubDispatcher(
    &AVPSystemFunctionsStub::PathInfoAdd,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathTypeDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::PathLotTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
    std::make_tuple(&::v1::GREATWALL::AVP::AVPSystemFunctions_::PathInfoStructArrayDeployment));

template <typename _Stub, typename... _Stubs>
void AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireParkingListResponseNACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListResponseNACK& _ParkingListResponseNACK) {
    CommonAPI::Deployable< AVPSystemFunctions::ParkingListResponseNACK, ::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListResponseNACKDeployment_t> deployed_ParkingListResponseNACK(_ParkingListResponseNACK, static_cast< ::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListResponseNACKDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListResponseNACK, ::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListResponseNACKDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8001),
            false,
             deployed_ParkingListResponseNACK 
    );
}

template <typename _Stub, typename... _Stubs>
void AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireParkingListResponseACKEvent(const ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListStructArray& _ParkingListResponseACK) {
    CommonAPI::Deployable< AVPSystemFunctions::ParkingListStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListStructArrayDeployment_t> deployed_ParkingListResponseACK(_ParkingListResponseACK, &::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListStructArrayDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::AVP::AVPSystemFunctions::ParkingListStructArray, ::v1::GREATWALL::AVP::AVPSystemFunctions_::ParkingListStructArrayDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8002),
            false,
             deployed_ParkingListResponseACK 
    );
}

template <typename _Stub = ::v1::GREATWALL::AVP::AVPSystemFunctionsStub, typename... _Stubs>
class AVPSystemFunctionsSomeIPStubAdapter
    : public AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< AVPSystemFunctionsSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    AVPSystemFunctionsSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          AVPSystemFunctionsSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace AVP
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_AVP_AVP_System_Functions_SOMEIP_STUB_ADAPTER_HPP_
