/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP_HAV_Pand_AVP_Functions_STUB_HPP_
#define V1_GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP_HAV_Pand_AVP_Functions_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP/HAVPandAVPFunctions.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <cstdint>
#include <unordered_set>
#include <vector>


#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service HAVPandAVPFunctions. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class HAVPandAVPFunctionsStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual HAVPandAVPFunctions {
 public:

    /**
    * Sends a broadcast event for HAVPPathInfo. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireHAVPPathInfoEvent(const ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions::HAVPLearningWorldArray &_HAVPLearningWorldArray) = 0;
    /**
    * Sends a broadcast event for HAVPRendergInfo. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireHAVPRendergInfoEvent(const ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions::HAVPVehDataArray &_HAVPVehDataArray) = 0;
    /**
    * Sends a broadcast event for HAVPPathMap. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireHAVPPathMapEvent(const ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions::HAVPMapFileArray &_HAVPMapFileArray) = 0;


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for HAVPandAVPFunctions.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HAVPandAVPFunctionsStubRemoteEvent
{
public:
    virtual ~HAVPandAVPFunctionsStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service HAVPandAVPFunctions to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HAVPandAVPFunctionsStub
    : public virtual CommonAPI::Stub<HAVPandAVPFunctionsStubAdapter, HAVPandAVPFunctionsStubRemoteEvent>
{
public:

    virtual ~HAVPandAVPFunctionsStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }


    /// Sends a broadcast event for HAVPPathInfo.
    virtual void fireHAVPPathInfoEvent(const ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions::HAVPLearningWorldArray &_HAVPLearningWorldArray) {
        auto stubAdapter = CommonAPI::Stub<HAVPandAVPFunctionsStubAdapter, HAVPandAVPFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireHAVPPathInfoEvent(_HAVPLearningWorldArray);
    }
    /// Sends a broadcast event for HAVPRendergInfo.
    virtual void fireHAVPRendergInfoEvent(const ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions::HAVPVehDataArray &_HAVPVehDataArray) {
        auto stubAdapter = CommonAPI::Stub<HAVPandAVPFunctionsStubAdapter, HAVPandAVPFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireHAVPRendergInfoEvent(_HAVPVehDataArray);
    }
    /// Sends a broadcast event for HAVPPathMap.
    virtual void fireHAVPPathMapEvent(const ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions::HAVPMapFileArray &_HAVPMapFileArray) {
        auto stubAdapter = CommonAPI::Stub<HAVPandAVPFunctionsStubAdapter, HAVPandAVPFunctionsStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireHAVPPathMapEvent(_HAVPMapFileArray);
    }

    
    using CommonAPI::Stub<HAVPandAVPFunctionsStubAdapter, HAVPandAVPFunctionsStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<HAVPandAVPFunctionsStubAdapter, HAVPandAVPFunctionsStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<HAVPandAVPFunctionsStubAdapter, HAVPandAVPFunctionsStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef HAVPandAVPFunctionsStubRemoteEvent RemoteEventType;
    typedef HAVPandAVPFunctions StubInterface;
};

} // namespace GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP_HAV_Pand_AVP_Functions_STUB_HPP_
