/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP/HAVPandAVPFunctionsSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createHAVPandAVPFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< HAVPandAVPFunctionsSomeIPProxy>(_address, _connection);
}

void initializeHAVPandAVPFunctionsSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP.HAVPandAVPFunctions:v1_0:HAVPandAVPFunctions01",
        0x803, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         HAVPandAVPFunctions::getInterface(),
         &createHAVPandAVPFunctionsSomeIPProxy);
}

INITIALIZER(registerHAVPandAVPFunctionsSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeHAVPandAVPFunctionsSomeIPProxy);
}

HAVPandAVPFunctionsSomeIPProxy::HAVPandAVPFunctionsSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          hAVPPathInfo_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8001), false, false, std::make_tuple(static_cast< ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions_::HAVPLearningWorldArrayDeployment_t* >(nullptr))),
          hAVPRendergInfo_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8002), false, false, std::make_tuple(static_cast< ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions_::HAVPVehDataArrayDeployment_t* >(nullptr))),
          hAVPPathMap_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8003), false, false, std::make_tuple(static_cast< ::v1::GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP::HAVPandAVPFunctions_::HAVPMapFileArrayDeployment_t* >(nullptr)))
    {
    }


    HAVPandAVPFunctionsSomeIPProxy::HAVPPathInfoEvent& HAVPandAVPFunctionsSomeIPProxy::getHAVPPathInfoEvent() {
        return hAVPPathInfo_;
    }
    HAVPandAVPFunctionsSomeIPProxy::HAVPRendergInfoEvent& HAVPandAVPFunctionsSomeIPProxy::getHAVPRendergInfoEvent() {
        return hAVPRendergInfo_;
    }
    HAVPandAVPFunctionsSomeIPProxy::HAVPPathMapEvent& HAVPandAVPFunctionsSomeIPProxy::getHAVPPathMapEvent() {
        return hAVPPathMap_;
    }




    void HAVPandAVPFunctionsSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace GREATWALL_MDC_A_IDC1_5_IDC3_0_HAP
} // namespace v1
