/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_DVR_VIMS_DVR_FILE_OPERATION_HPP_
#define V1_GREATWALL_DVR_VIMS_DVR_FILE_OPERATION_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

class DVRFileOperation {
public:
    virtual ~DVRFileOperation() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    typedef uint32_t SelectAllFileCapacity;
    
    struct ExportFileACK : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_EXPORTSUCCESS = 0,
            E_FILEMISSING = 1,
            E_CAPACITYWARNING = 2,
            E_ISDELETING = 3,
            E_OTHERREASON = 4
        };
    
        ExportFileACK()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_EXPORTSUCCESS)) {}
        ExportFileACK(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_EXPORTSUCCESS):
                case static_cast< uint8_t>(Literal::E_FILEMISSING):
                case static_cast< uint8_t>(Literal::E_CAPACITYWARNING):
                case static_cast< uint8_t>(Literal::E_ISDELETING):
                case static_cast< uint8_t>(Literal::E_OTHERREASON):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ExportFileACK &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ExportFileACK &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ExportFileACK &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ExportFileACK &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ExportFileACK &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ExportFileACK &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct GetAllInfo : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_GET_ALL_INFO = 0,
            E_GET_ARRAY_INFO = 1
        };
    
        GetAllInfo()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_GET_ALL_INFO)) {}
        GetAllInfo(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_GET_ALL_INFO):
                case static_cast< uint8_t>(Literal::E_GET_ARRAY_INFO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GetAllInfo &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GetAllInfo &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GetAllInfo &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GetAllInfo &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GetAllInfo &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GetAllInfo &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef std::string FilePath;
    typedef std::string ThumbnailPath;
    
    struct FileType : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_NORMALVIDEO = 0,
            E_EVENTVIDEO = 1,
            E_USERDATA = 2,
            E_EXPORTDATA = 3,
            E_SENTINELMODE = 4,
            E_GUARDIANMODE = 5
        };
    
        FileType()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_NORMALVIDEO)) {}
        FileType(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_NORMALVIDEO):
                case static_cast< uint8_t>(Literal::E_EVENTVIDEO):
                case static_cast< uint8_t>(Literal::E_USERDATA):
                case static_cast< uint8_t>(Literal::E_EXPORTDATA):
                case static_cast< uint8_t>(Literal::E_SENTINELMODE):
                case static_cast< uint8_t>(Literal::E_GUARDIANMODE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FileType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FileType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FileType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FileType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FileType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FileType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct AccessType : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_FORESIGHT = 0,
            E_WITHINSIGNT_OMC = 1,
            E_STREAMINGMEDIA_OR_BACKSIGNT_RESERVED = 2,
            E_360SURROUNDVIEW = 3,
            E_MULTICHANNEL = 4,
            E_WITHINSIGNT_DMC = 5
        };
    
        AccessType()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_FORESIGHT)) {}
        AccessType(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_FORESIGHT):
                case static_cast< uint8_t>(Literal::E_WITHINSIGNT_OMC):
                case static_cast< uint8_t>(Literal::E_STREAMINGMEDIA_OR_BACKSIGNT_RESERVED):
                case static_cast< uint8_t>(Literal::E_360SURROUNDVIEW):
                case static_cast< uint8_t>(Literal::E_MULTICHANNEL):
                case static_cast< uint8_t>(Literal::E_WITHINSIGNT_DMC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AccessType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AccessType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AccessType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AccessType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AccessType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AccessType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    struct FileListStruct : CommonAPI::Struct< FilePath, ThumbnailPath, FileType, AccessType> {
    
        FileListStruct()
        {
            std::get< 0>(values_) = FilePath();
            std::get< 1>(values_) = ThumbnailPath();
            std::get< 2>(values_) = FileType();
            std::get< 3>(values_) = AccessType();
        }
        FileListStruct(const FilePath &_FilePath, const ThumbnailPath &_ThumbnailPath, const FileType &_FileType, const AccessType &_AccessType)
        {
            std::get< 0>(values_) = _FilePath;
            std::get< 1>(values_) = _ThumbnailPath;
            std::get< 2>(values_) = _FileType;
            std::get< 3>(values_) = _AccessType;
        }
        inline const FilePath &getFilePath() const { return std::get< 0>(values_); }
        inline void setFilePath(const FilePath &_value) { std::get< 0>(values_) = _value; }
        inline const ThumbnailPath &getThumbnailPath() const { return std::get< 1>(values_); }
        inline void setThumbnailPath(const ThumbnailPath &_value) { std::get< 1>(values_) = _value; }
        inline const FileType &getFileType() const { return std::get< 2>(values_); }
        inline void setFileType(const FileType &_value) { std::get< 2>(values_) = _value; }
        inline const AccessType &getAccessType() const { return std::get< 3>(values_); }
        inline void setAccessType(const AccessType &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const FileListStruct& _other) const {
        return (getFilePath() == _other.getFilePath() && getThumbnailPath() == _other.getThumbnailPath() && getFileType() == _other.getFileType() && getAccessType() == _other.getAccessType());
        }
        inline bool operator!=(const FileListStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef std::vector< DVRFileOperation::FileListStruct> FileListStructArray;
    
    struct TFCardStatus : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_DVR_NOT_FOUND = 0,
            E_DVR_FAULT = 1,
            E_DVR_MEMEORY_FULL = 2,
            E_DVR_OK = 3,
            E_WRITESLOWLY = 4,
            E_DVR_EMERGENCY_SPACE_FULL = 5,
            E_DVR_CAPACITY_NOT_SUPPORTED = 6
        };
    
        TFCardStatus()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_DVR_NOT_FOUND)) {}
        TFCardStatus(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_DVR_NOT_FOUND):
                case static_cast< uint8_t>(Literal::E_DVR_FAULT):
                case static_cast< uint8_t>(Literal::E_DVR_MEMEORY_FULL):
                case static_cast< uint8_t>(Literal::E_DVR_OK):
                case static_cast< uint8_t>(Literal::E_WRITESLOWLY):
                case static_cast< uint8_t>(Literal::E_DVR_EMERGENCY_SPACE_FULL):
                case static_cast< uint8_t>(Literal::E_DVR_CAPACITY_NOT_SUPPORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TFCardStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TFCardStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TFCardStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TFCardStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TFCardStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TFCardStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct TFCardOption : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_TFCARD1 = 0,
            E_TFCARD2 = 1
        };
    
        TFCardOption()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_TFCARD1)) {}
        TFCardOption(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_TFCARD1):
                case static_cast< uint8_t>(Literal::E_TFCARD2):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TFCardOption &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TFCardOption &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TFCardOption &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TFCardOption &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TFCardOption &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TFCardOption &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef uint32_t RemainingCapacity;
    typedef uint32_t TotalCapacity;
    struct TFCardCapacity : CommonAPI::Struct< TotalCapacity, RemainingCapacity> {
    
        TFCardCapacity()
        {
            std::get< 0>(values_) = TotalCapacity();
            std::get< 1>(values_) = RemainingCapacity();
        }
        TFCardCapacity(const TotalCapacity &_TotalCapacity, const RemainingCapacity &_RemainingCapacity)
        {
            std::get< 0>(values_) = _TotalCapacity;
            std::get< 1>(values_) = _RemainingCapacity;
        }
        inline const TotalCapacity &getTotalCapacity() const { return std::get< 0>(values_); }
        inline void setTotalCapacity(const TotalCapacity &_value) { std::get< 0>(values_) = _value; }
        inline const RemainingCapacity &getRemainingCapacity() const { return std::get< 1>(values_); }
        inline void setRemainingCapacity(const RemainingCapacity &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const TFCardCapacity& _other) const {
        return (getTotalCapacity() == _other.getTotalCapacity() && getRemainingCapacity() == _other.getRemainingCapacity());
        }
        inline bool operator!=(const TFCardCapacity &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct TFCardInfoStruct : CommonAPI::Struct< TFCardOption, TFCardStatus, TFCardCapacity> {
    
        TFCardInfoStruct()
        {
            std::get< 0>(values_) = TFCardOption();
            std::get< 1>(values_) = TFCardStatus();
            std::get< 2>(values_) = TFCardCapacity();
        }
        TFCardInfoStruct(const TFCardOption &_TFCardOption, const TFCardStatus &_TFCardStatus, const TFCardCapacity &_TFCardCapacity)
        {
            std::get< 0>(values_) = _TFCardOption;
            std::get< 1>(values_) = _TFCardStatus;
            std::get< 2>(values_) = _TFCardCapacity;
        }
        inline const TFCardOption &getTFCardOption() const { return std::get< 0>(values_); }
        inline void setTFCardOption(const TFCardOption &_value) { std::get< 0>(values_) = _value; }
        inline const TFCardStatus &getTFCardStatus() const { return std::get< 1>(values_); }
        inline void setTFCardStatus(const TFCardStatus &_value) { std::get< 1>(values_) = _value; }
        inline const TFCardCapacity &getTFCardCapacity() const { return std::get< 2>(values_); }
        inline void setTFCardCapacity(const TFCardCapacity &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const TFCardInfoStruct& _other) const {
        return (getTFCardOption() == _other.getTFCardOption() && getTFCardStatus() == _other.getTFCardStatus() && getTFCardCapacity() == _other.getTFCardCapacity());
        }
        inline bool operator!=(const TFCardInfoStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef std::vector< DVRFileOperation::TFCardInfoStruct> TFCardInfoList;
    
    struct EMMCStatus : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_EMMCNORMAL = 0,
            E_EMMCFAULT = 1
        };
    
        EMMCStatus()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_EMMCNORMAL)) {}
        EMMCStatus(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_EMMCNORMAL):
                case static_cast< uint8_t>(Literal::E_EMMCFAULT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EMMCStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EMMCStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EMMCStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EMMCStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EMMCStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EMMCStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef uint32_t FileCapacity;
    typedef uint8_t FileNumber;
    typedef std::string EventTime;
    struct FileListIncludeDate_Struct : CommonAPI::Struct< FilePath, ThumbnailPath, FileType, AccessType, EventTime, FileNumber> {
    
        FileListIncludeDate_Struct()
        {
            std::get< 0>(values_) = FilePath();
            std::get< 1>(values_) = ThumbnailPath();
            std::get< 2>(values_) = FileType();
            std::get< 3>(values_) = AccessType();
            std::get< 4>(values_) = EventTime();
            std::get< 5>(values_) = FileNumber();
        }
        FileListIncludeDate_Struct(const FilePath &_FilePath, const ThumbnailPath &_ThumbnailPath, const FileType &_FileType, const AccessType &_AccessType, const EventTime &_EventTime, const FileNumber &_FileNumber)
        {
            std::get< 0>(values_) = _FilePath;
            std::get< 1>(values_) = _ThumbnailPath;
            std::get< 2>(values_) = _FileType;
            std::get< 3>(values_) = _AccessType;
            std::get< 4>(values_) = _EventTime;
            std::get< 5>(values_) = _FileNumber;
        }
        inline const FilePath &getFilePath() const { return std::get< 0>(values_); }
        inline void setFilePath(const FilePath &_value) { std::get< 0>(values_) = _value; }
        inline const ThumbnailPath &getThumbnailPath() const { return std::get< 1>(values_); }
        inline void setThumbnailPath(const ThumbnailPath &_value) { std::get< 1>(values_) = _value; }
        inline const FileType &getFileType() const { return std::get< 2>(values_); }
        inline void setFileType(const FileType &_value) { std::get< 2>(values_) = _value; }
        inline const AccessType &getAccessType() const { return std::get< 3>(values_); }
        inline void setAccessType(const AccessType &_value) { std::get< 3>(values_) = _value; }
        inline const EventTime &getEventTime() const { return std::get< 4>(values_); }
        inline void setEventTime(const EventTime &_value) { std::get< 4>(values_) = _value; }
        inline const FileNumber &getFileNumber() const { return std::get< 5>(values_); }
        inline void setFileNumber(const FileNumber &_value) { std::get< 5>(values_) = _value; }
        inline bool operator==(const FileListIncludeDate_Struct& _other) const {
        return (getFilePath() == _other.getFilePath() && getThumbnailPath() == _other.getThumbnailPath() && getFileType() == _other.getFileType() && getAccessType() == _other.getAccessType() && getEventTime() == _other.getEventTime() && getFileNumber() == _other.getFileNumber());
        }
        inline bool operator!=(const FileListIncludeDate_Struct &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef std::vector< DVRFileOperation::FileListIncludeDate_Struct> FileListIncludeDate_Array;
    typedef std::vector< DVRFileOperation::FilePath> FileListPath;
    typedef std::string FileName;
    
    struct SetResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_SUCCESSFUL = 0,
            E_FAILED = 1
        };
    
        SetResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_SUCCESSFUL)) {}
        SetResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_SUCCESSFUL):
                case static_cast< uint8_t>(Literal::E_FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SetResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SetResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SetResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SetResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SetResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SetResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct RecordStatus : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_INACTIVE = 0,
            E_ACTIVE = 1
        };
    
        RecordStatus()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_INACTIVE)) {}
        RecordStatus(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_INACTIVE):
                case static_cast< uint8_t>(Literal::E_ACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RecordStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RecordStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RecordStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RecordStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RecordStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RecordStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct SDCardOption : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_SDCARD1 = 0,
            E_SDCARD2 = 1
        };
    
        SDCardOption()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_SDCARD1)) {}
        SDCardOption(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_SDCARD1):
                case static_cast< uint8_t>(Literal::E_SDCARD2):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SDCardOption &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SDCardOption &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SDCardOption &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SDCardOption &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SDCardOption &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SDCardOption &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct EventType : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_MANUALCAPTURE_BYBUTTON = 0,
            E_MANUALCAPTURE_BYHUT = 1,
            E_MANUALRECORDING_BYBUTTON = 2,
            E_MANUALRECORDING_BYHUT = 3,
            E_TIMELAPSEVIDEO = 4,
            E_PARKINGMONITORVIDEO = 5,
            E_VEHICLECOLLISIONVIDEO = 6,
            E_AIRBAGEJECTIONVIDEO = 7,
            E_AEBVIDEO = 8,
            E_BURGLARALARMVIDEO = 9,
            E_CONTINUOUSCAPTURE = 10,
            E_SHORTVIDEORECORDING_BYBUTTON = 11,
            E_SHORTVIDEORECORDING_BYHUT = 12,
            E_APSVIDEO = 13,
            E_ACC_AEBVIDEO = 14,
            E_WHISTLEVIDEO = 15,
            E_RADARRINGINGVIDEO = 16,
            E_MEBVIDEO = 17,
            E_HANDLEFTVIDEO = 18,
            E_CARINGMODE = 19,
            E_EXPORTFILE = 20,
            E_GUARDIANMODE = 21,
            E_DELETEFILE = 22,
            E_MANUALCAPTURE_BYFINDCAR = 23,
            E_SENTINELMODE_HIGH = 24,
            E_SENTINELMODE_LOW = 25
        };
    
        EventType()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_MANUALCAPTURE_BYBUTTON)) {}
        EventType(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_MANUALCAPTURE_BYBUTTON):
                case static_cast< uint8_t>(Literal::E_MANUALCAPTURE_BYHUT):
                case static_cast< uint8_t>(Literal::E_MANUALRECORDING_BYBUTTON):
                case static_cast< uint8_t>(Literal::E_MANUALRECORDING_BYHUT):
                case static_cast< uint8_t>(Literal::E_TIMELAPSEVIDEO):
                case static_cast< uint8_t>(Literal::E_PARKINGMONITORVIDEO):
                case static_cast< uint8_t>(Literal::E_VEHICLECOLLISIONVIDEO):
                case static_cast< uint8_t>(Literal::E_AIRBAGEJECTIONVIDEO):
                case static_cast< uint8_t>(Literal::E_AEBVIDEO):
                case static_cast< uint8_t>(Literal::E_BURGLARALARMVIDEO):
                case static_cast< uint8_t>(Literal::E_CONTINUOUSCAPTURE):
                case static_cast< uint8_t>(Literal::E_SHORTVIDEORECORDING_BYBUTTON):
                case static_cast< uint8_t>(Literal::E_SHORTVIDEORECORDING_BYHUT):
                case static_cast< uint8_t>(Literal::E_APSVIDEO):
                case static_cast< uint8_t>(Literal::E_ACC_AEBVIDEO):
                case static_cast< uint8_t>(Literal::E_WHISTLEVIDEO):
                case static_cast< uint8_t>(Literal::E_RADARRINGINGVIDEO):
                case static_cast< uint8_t>(Literal::E_MEBVIDEO):
                case static_cast< uint8_t>(Literal::E_HANDLEFTVIDEO):
                case static_cast< uint8_t>(Literal::E_CARINGMODE):
                case static_cast< uint8_t>(Literal::E_EXPORTFILE):
                case static_cast< uint8_t>(Literal::E_GUARDIANMODE):
                case static_cast< uint8_t>(Literal::E_DELETEFILE):
                case static_cast< uint8_t>(Literal::E_MANUALCAPTURE_BYFINDCAR):
                case static_cast< uint8_t>(Literal::E_SENTINELMODE_HIGH):
                case static_cast< uint8_t>(Literal::E_SENTINELMODE_LOW):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EventType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EventType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EventType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EventType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EventType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EventType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef std::vector< DVRFileOperation::TFCardOption> TFCardOptionList;
    
    struct ExportMode : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_FILTERMODE = 0,
            E_COVERMODE = 1,
            E_COPYMODE = 2
        };
    
        ExportMode()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_FILTERMODE)) {}
        ExportMode(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_FILTERMODE):
                case static_cast< uint8_t>(Literal::E_COVERMODE):
                case static_cast< uint8_t>(Literal::E_COPYMODE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ExportMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ExportMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ExportMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ExportMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ExportMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ExportMode &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    
    struct TFAllFileCapacity_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_GET_ALL_FILE_TYPE_CAPACITY = 0,
            E_GET_ARRAY_CAPACITY = 1
        };
    
        TFAllFileCapacity_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_GET_ALL_FILE_TYPE_CAPACITY)) {}
        TFAllFileCapacity_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_GET_ALL_FILE_TYPE_CAPACITY):
                case static_cast< uint8_t>(Literal::E_GET_ARRAY_CAPACITY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TFAllFileCapacity_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TFAllFileCapacity_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TFAllFileCapacity_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TFAllFileCapacity_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TFAllFileCapacity_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TFAllFileCapacity_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    typedef int32_t UsedCapacity_Integer;
    typedef int32_t TotalCapacity_Integer;
    
    struct ParamFileType_Enum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            E_CUSTOMDATE = 0,
            E_EXPORTDATA = 1,
            E_SENTINELDATA = 2,
            E_GUARDDATA = 3
        };
    
        ParamFileType_Enum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::E_CUSTOMDATE)) {}
        ParamFileType_Enum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::E_CUSTOMDATE):
                case static_cast< uint8_t>(Literal::E_EXPORTDATA):
                case static_cast< uint8_t>(Literal::E_SENTINELDATA):
                case static_cast< uint8_t>(Literal::E_GUARDDATA):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ParamFileType_Enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ParamFileType_Enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ParamFileType_Enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ParamFileType_Enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ParamFileType_Enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ParamFileType_Enum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    };
    struct ParamFileCapacityStruct : CommonAPI::Struct< ParamFileType_Enum, UsedCapacity_Integer, TotalCapacity_Integer> {
    
        ParamFileCapacityStruct()
        {
            std::get< 0>(values_) = ParamFileType_Enum();
            std::get< 1>(values_) = UsedCapacity_Integer();
            std::get< 2>(values_) = TotalCapacity_Integer();
        }
        ParamFileCapacityStruct(const ParamFileType_Enum &_ParamFileType, const UsedCapacity_Integer &_UsedCapacity, const TotalCapacity_Integer &_TotalCapacity)
        {
            std::get< 0>(values_) = _ParamFileType;
            std::get< 1>(values_) = _UsedCapacity;
            std::get< 2>(values_) = _TotalCapacity;
        }
        inline const ParamFileType_Enum &getParamFileType() const { return std::get< 0>(values_); }
        inline void setParamFileType(const ParamFileType_Enum &_value) { std::get< 0>(values_) = _value; }
        inline const UsedCapacity_Integer &getUsedCapacity() const { return std::get< 1>(values_); }
        inline void setUsedCapacity(const UsedCapacity_Integer &_value) { std::get< 1>(values_) = _value; }
        inline const TotalCapacity_Integer &getTotalCapacity() const { return std::get< 2>(values_); }
        inline void setTotalCapacity(const TotalCapacity_Integer &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const ParamFileCapacityStruct& _other) const {
        return (getParamFileType() == _other.getParamFileType() && getUsedCapacity() == _other.getUsedCapacity() && getTotalCapacity() == _other.getTotalCapacity());
        }
        inline bool operator!=(const ParamFileCapacityStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
    typedef std::vector< DVRFileOperation::ParamFileCapacityStruct> FileCapacityList_Array;
    typedef std::vector< DVRFileOperation::ParamFileType_Enum> TFCardFileTypeList_Array;
    struct EMMCCapacityStruct : CommonAPI::Struct< TotalCapacity, RemainingCapacity> {
    
        EMMCCapacityStruct()
        {
            std::get< 0>(values_) = TotalCapacity();
            std::get< 1>(values_) = RemainingCapacity();
        }
        EMMCCapacityStruct(const TotalCapacity &_TotalCapacity, const RemainingCapacity &_RemainingCapacity)
        {
            std::get< 0>(values_) = _TotalCapacity;
            std::get< 1>(values_) = _RemainingCapacity;
        }
        inline const TotalCapacity &getTotalCapacity() const { return std::get< 0>(values_); }
        inline void setTotalCapacity(const TotalCapacity &_value) { std::get< 0>(values_) = _value; }
        inline const RemainingCapacity &getRemainingCapacity() const { return std::get< 1>(values_); }
        inline void setRemainingCapacity(const RemainingCapacity &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const EMMCCapacityStruct& _other) const {
        return (getTotalCapacity() == _other.getTotalCapacity() && getRemainingCapacity() == _other.getRemainingCapacity());
        }
        inline bool operator!=(const EMMCCapacityStruct &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* DVRFileOperation::getInterface() {
    return ("GREATWALL.DVR_VIMS.DVRFileOperation:v1_0");
}

CommonAPI::Version DVRFileOperation::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_DVR_VIMS_DVR_FILE_OPERATION_HPP_
