/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_DVR_VIMS_DVR_SYSTEM_CONFIG_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GREATWALL_DVR_VIMS_DVR_SYSTEM_CONFIG_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/GREATWALL/DVR_VIMS/DVRSystemConfigStub.hpp>
#include <v1/GREATWALL/DVR_VIMS/DVRSystemConfigSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

template <typename _Stub = ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub, typename... _Stubs>
class DVRSystemConfigSomeIPStubAdapterInternal
    : public virtual DVRSystemConfigStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> DVRSystemConfigSomeIPStubAdapterHelper;

    ~DVRSystemConfigSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        DVRSystemConfigSomeIPStubAdapterHelper::deinit();
    }

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub,
        CommonAPI::Version
    > getDVRSystemConfigInterfaceVersionStubDispatcher;


    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub,
        std::tuple< DVRSystemConfig::ResetConfigType>,
        std::tuple< DVRSystemConfig::SetResult>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t>
    > resetDefaultConfigStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub,
        std::tuple< DVRSystemConfig::GetAllConfig, DVRSystemConfig::ConfigTypeList>,
        std::tuple< DVRSystemConfig::ConfigListArray>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t>
    > dVRGetConfigStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub,
        std::tuple< DVRSystemConfig::ConfigListArray>,
        std::tuple< DVRSystemConfig::SetResult>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t>
    > dVRSetConfigStubDispatcher;

    DVRSystemConfigSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        DVRSystemConfigSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< DVRSystemConfigStub>(_stub))
    {

        
                DVRSystemConfigSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &resetDefaultConfigStubDispatcher );
                DVRSystemConfigSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &dVRGetConfigStubDispatcher );
                DVRSystemConfigSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &dVRSetConfigStubDispatcher );
        // Provided events/fields
    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub,
    CommonAPI::Version
    > DVRSystemConfigSomeIPStubAdapterInternal<_Stub, _Stubs...>::getDVRSystemConfigInterfaceVersionStubDispatcher(&DVRSystemConfigStub::lockInterfaceVersionAttribute, &DVRSystemConfigStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub,
    std::tuple< DVRSystemConfig::ResetConfigType>,
    std::tuple< DVRSystemConfig::SetResult>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t>
> DVRSystemConfigSomeIPStubAdapterInternal<_Stub, _Stubs...>::resetDefaultConfigStubDispatcher(
    &DVRSystemConfigStub::ResetDefaultConfig,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub,
    std::tuple< DVRSystemConfig::GetAllConfig, DVRSystemConfig::ConfigTypeList>,
    std::tuple< DVRSystemConfig::ConfigListArray>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t>
> DVRSystemConfigSomeIPStubAdapterInternal<_Stub, _Stubs...>::dVRGetConfigStubDispatcher(
    &DVRSystemConfigStub::DVRGetConfig,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t* >(nullptr)),
    std::make_tuple(&::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub,
    std::tuple< DVRSystemConfig::ConfigListArray>,
    std::tuple< DVRSystemConfig::SetResult>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t>
> DVRSystemConfigSomeIPStubAdapterInternal<_Stub, _Stubs...>::dVRSetConfigStubDispatcher(
    &DVRSystemConfigStub::DVRSetConfig,
    false,
    std::make_tuple(&::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub = ::v1::GREATWALL::DVR_VIMS::DVRSystemConfigStub, typename... _Stubs>
class DVRSystemConfigSomeIPStubAdapter
    : public DVRSystemConfigSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< DVRSystemConfigSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    DVRSystemConfigSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          DVRSystemConfigSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_DVR_VIMS_DVR_System_Config_SOMEIP_STUB_ADAPTER_HPP_
