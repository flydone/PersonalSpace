/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/DVR_VIMS/DVRFileOperationSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createDVRFileOperationSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< DVRFileOperationSomeIPProxy>(_address, _connection);
}

void initializeDVRFileOperationSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.DVR_VIMS.DVRFileOperation:v1_0:DVRFileOperation01",
        0x402, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         DVRFileOperation::getInterface(),
         &createDVRFileOperationSomeIPProxy);
}

INITIALIZER(registerDVRFileOperationSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeDVRFileOperationSomeIPProxy);
}

DVRFileOperationSomeIPProxy::DVRFileOperationSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
    {
    }



        void DVRFileOperationSomeIPProxy::AllFileDeleteRequest(const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileType &_FileType, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::SetResult &_FileDeleteACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_FileDeleteACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xb),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_AccessType, deploy_FileType,
    _internalCallStatus,
    deploy_FileDeleteACK);
    _FileDeleteACK = deploy_FileDeleteACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::AllFileDeleteRequestAsync(const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileType &_FileType, AllFileDeleteRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_FileDeleteACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xb),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_AccessType, deploy_FileType,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t > _FileDeleteACK) {
                if (_callback)
                    _callback(_internalCallStatus, _FileDeleteACK.getValue());
            },
            std::make_tuple(deploy_FileDeleteACK));
    }
        void DVRFileOperationSomeIPProxy::FileListRequest(const DVRFileOperation::FileType &_FileType, const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileNumber &_FileNumber, const DVRFileOperation::FileName &_FileName, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::FileListStructArray &_FileListStructArray, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileNumber, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_FileNumber(_FileNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileName, CommonAPI::SomeIP::StringDeployment> deploy_FileName(_FileName, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileListStructArray, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListStructArrayDeployment_t> deploy_FileListStructArray(&::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListStructArrayDeployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::FileType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileNumber,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileName,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::FileListStructArray,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListStructArrayDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_FileType, deploy_AccessType, deploy_FileNumber, deploy_FileName,
    _internalCallStatus,
    deploy_FileListStructArray);
    _FileListStructArray = deploy_FileListStructArray.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::FileListRequestAsync(const DVRFileOperation::FileType &_FileType, const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileNumber &_FileNumber, const DVRFileOperation::FileName &_FileName, FileListRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileNumber, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_FileNumber(_FileNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileName, CommonAPI::SomeIP::StringDeployment> deploy_FileName(_FileName, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileListStructArray, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListStructArrayDeployment_t> deploy_FileListStructArray(&::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListStructArrayDeployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::FileType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileNumber,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileName,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::FileListStructArray,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListStructArrayDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_FileType, deploy_AccessType, deploy_FileNumber, deploy_FileName,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::FileListStructArray, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListStructArrayDeployment_t > _FileListStructArray) {
                if (_callback)
                    _callback(_internalCallStatus, _FileListStructArray.getValue());
            },
            std::make_tuple(deploy_FileListStructArray));
    }
        void DVRFileOperationSomeIPProxy::AllFileExportRequest(const DVRFileOperation::ExportMode &_ExportMode, const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileType &_FileType, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::ExportFileACK &_ExportFileACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::ExportMode, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t> deploy_ExportMode(_ExportMode, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::ExportFileACK, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t> deploy_ExportFileACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::ExportMode,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::ExportFileACK,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xd),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_ExportMode, deploy_AccessType, deploy_FileType,
    _internalCallStatus,
    deploy_ExportFileACK);
    _ExportFileACK = deploy_ExportFileACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::AllFileExportRequestAsync(const DVRFileOperation::ExportMode &_ExportMode, const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileType &_FileType, AllFileExportRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::ExportMode, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t> deploy_ExportMode(_ExportMode, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::ExportFileACK, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t> deploy_ExportFileACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::ExportMode,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::ExportFileACK,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xd),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_ExportMode, deploy_AccessType, deploy_FileType,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::ExportFileACK, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t > _ExportFileACK) {
                if (_callback)
                    _callback(_internalCallStatus, _ExportFileACK.getValue());
            },
            std::make_tuple(deploy_ExportFileACK));
    }
        void DVRFileOperationSomeIPProxy::FileExportRequest(const DVRFileOperation::ExportMode &_ExportMode, const DVRFileOperation::FileListPath &_FileListPath, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::ExportFileACK &_ExportFileACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::ExportMode, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t> deploy_ExportMode(_ExportMode, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileListPath, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t> deploy_FileListPath(_FileListPath, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::ExportFileACK, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t> deploy_ExportFileACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::ExportMode,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileListPath,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::ExportFileACK,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_ExportMode, deploy_FileListPath,
    _internalCallStatus,
    deploy_ExportFileACK);
    _ExportFileACK = deploy_ExportFileACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::FileExportRequestAsync(const DVRFileOperation::ExportMode &_ExportMode, const DVRFileOperation::FileListPath &_FileListPath, FileExportRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::ExportMode, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t> deploy_ExportMode(_ExportMode, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileListPath, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t> deploy_FileListPath(_FileListPath, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::ExportFileACK, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t> deploy_ExportFileACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::ExportMode,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportModeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileListPath,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::ExportFileACK,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_ExportMode, deploy_FileListPath,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::ExportFileACK, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::ExportFileACKDeployment_t > _ExportFileACK) {
                if (_callback)
                    _callback(_internalCallStatus, _ExportFileACK.getValue());
            },
            std::make_tuple(deploy_ExportFileACK));
    }
        void DVRFileOperationSomeIPProxy::AsyncAllFileDeleteRequest(const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileType &_FileType, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::SetResult &_FileDeleteACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_FileDeleteACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x10),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_AccessType, deploy_FileType,
    _internalCallStatus,
    deploy_FileDeleteACK);
    _FileDeleteACK = deploy_FileDeleteACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::AsyncAllFileDeleteRequestAsync(const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileType &_FileType, AsyncAllFileDeleteRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_FileDeleteACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x10),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_AccessType, deploy_FileType,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t > _FileDeleteACK) {
                if (_callback)
                    _callback(_internalCallStatus, _FileDeleteACK.getValue());
            },
            std::make_tuple(deploy_FileDeleteACK));
    }
        void DVRFileOperationSomeIPProxy::DVRFileCapacityInfoReq(const DVRFileOperation::TFAllFileCapacity_Enum &_TFAllFileCapacity, const DVRFileOperation::TFCardFileTypeList_Array &_TFCardFileTypeList, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::FileCapacityList_Array &_FileCapacityList, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::TFAllFileCapacity_Enum, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFAllFileCapacity_EnumDeployment_t> deploy_TFAllFileCapacity(_TFAllFileCapacity, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFAllFileCapacity_EnumDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::TFCardFileTypeList_Array, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardFileTypeList_ArrayDeployment_t> deploy_TFCardFileTypeList(_TFCardFileTypeList, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardFileTypeList_ArrayDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileCapacityList_Array, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileCapacityList_ArrayDeployment_t> deploy_FileCapacityList(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileCapacityList_ArrayDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::TFAllFileCapacity_Enum,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFAllFileCapacity_EnumDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::TFCardFileTypeList_Array,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardFileTypeList_ArrayDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::FileCapacityList_Array,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileCapacityList_ArrayDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x11),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_TFAllFileCapacity, deploy_TFCardFileTypeList,
    _internalCallStatus,
    deploy_FileCapacityList);
    _FileCapacityList = deploy_FileCapacityList.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::DVRFileCapacityInfoReqAsync(const DVRFileOperation::TFAllFileCapacity_Enum &_TFAllFileCapacity, const DVRFileOperation::TFCardFileTypeList_Array &_TFCardFileTypeList, DVRFileCapacityInfoReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::TFAllFileCapacity_Enum, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFAllFileCapacity_EnumDeployment_t> deploy_TFAllFileCapacity(_TFAllFileCapacity, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFAllFileCapacity_EnumDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::TFCardFileTypeList_Array, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardFileTypeList_ArrayDeployment_t> deploy_TFCardFileTypeList(_TFCardFileTypeList, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardFileTypeList_ArrayDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileCapacityList_Array, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileCapacityList_ArrayDeployment_t> deploy_FileCapacityList(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileCapacityList_ArrayDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::TFAllFileCapacity_Enum,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFAllFileCapacity_EnumDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::TFCardFileTypeList_Array,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardFileTypeList_ArrayDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::FileCapacityList_Array,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileCapacityList_ArrayDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x11),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_TFAllFileCapacity, deploy_TFCardFileTypeList,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::FileCapacityList_Array, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileCapacityList_ArrayDeployment_t > _FileCapacityList) {
                if (_callback)
                    _callback(_internalCallStatus, _FileCapacityList.getValue());
            },
            std::make_tuple(deploy_FileCapacityList));
    }
        void DVRFileOperationSomeIPProxy::SDCardFormat(const DVRFileOperation::SDCardOption &_SDCardOption, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::SetResult &_TFCardFormatACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::SDCardOption, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SDCardOptionDeployment_t> deploy_SDCardOption(_SDCardOption, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SDCardOptionDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_TFCardFormatACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::SDCardOption,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SDCardOptionDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_SDCardOption,
    _internalCallStatus,
    deploy_TFCardFormatACK);
    _TFCardFormatACK = deploy_TFCardFormatACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::SDCardFormatAsync(const DVRFileOperation::SDCardOption &_SDCardOption, SDCardFormatAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::SDCardOption, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SDCardOptionDeployment_t> deploy_SDCardOption(_SDCardOption, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SDCardOptionDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_TFCardFormatACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::SDCardOption,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SDCardOptionDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_SDCardOption,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t > _TFCardFormatACK) {
                if (_callback)
                    _callback(_internalCallStatus, _TFCardFormatACK.getValue());
            },
            std::make_tuple(deploy_TFCardFormatACK));
    }
        void DVRFileOperationSomeIPProxy::StartVideoBrowse(const DVRFileOperation::AccessType &_VideoBrowseChannel, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::SetResult &_VideoBrowseACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_VideoBrowseChannel(_VideoBrowseChannel, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_VideoBrowseACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_VideoBrowseChannel,
    _internalCallStatus,
    deploy_VideoBrowseACK);
    _VideoBrowseACK = deploy_VideoBrowseACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::StartVideoBrowseAsync(const DVRFileOperation::AccessType &_VideoBrowseChannel, StartVideoBrowseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_VideoBrowseChannel(_VideoBrowseChannel, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_VideoBrowseACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_VideoBrowseChannel,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t > _VideoBrowseACK) {
                if (_callback)
                    _callback(_internalCallStatus, _VideoBrowseACK.getValue());
            },
            std::make_tuple(deploy_VideoBrowseACK));
    }
        void DVRFileOperationSomeIPProxy::FileListIncludeDateReq(const DVRFileOperation::FileType &_FileType, const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileNumber &_FileNumber, const DVRFileOperation::FileName &_FileName, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::FileListIncludeDate_Array &_FileListIncludeDate, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileNumber, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_FileNumber(_FileNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileName, CommonAPI::SomeIP::StringDeployment> deploy_FileName(_FileName, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileListIncludeDate_Array, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListIncludeDate_ArrayDeployment_t> deploy_FileListIncludeDate(&::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListIncludeDate_ArrayDeployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::FileType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileNumber,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileName,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::FileListIncludeDate_Array,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListIncludeDate_ArrayDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x12),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_FileType, deploy_AccessType, deploy_FileNumber, deploy_FileName,
    _internalCallStatus,
    deploy_FileListIncludeDate);
    _FileListIncludeDate = deploy_FileListIncludeDate.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::FileListIncludeDateReqAsync(const DVRFileOperation::FileType &_FileType, const DVRFileOperation::AccessType &_AccessType, const DVRFileOperation::FileNumber &_FileNumber, const DVRFileOperation::FileName &_FileName, FileListIncludeDateReqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType(_FileType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileNumber, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_FileNumber(_FileNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileName, CommonAPI::SomeIP::StringDeployment> deploy_FileName(_FileName, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileListIncludeDate_Array, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListIncludeDate_ArrayDeployment_t> deploy_FileListIncludeDate(&::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListIncludeDate_ArrayDeployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::FileType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileNumber,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileName,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::FileListIncludeDate_Array,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListIncludeDate_ArrayDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x12),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_FileType, deploy_AccessType, deploy_FileNumber, deploy_FileName,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::FileListIncludeDate_Array, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListIncludeDate_ArrayDeployment_t > _FileListIncludeDate) {
                if (_callback)
                    _callback(_internalCallStatus, _FileListIncludeDate.getValue());
            },
            std::make_tuple(deploy_FileListIncludeDate));
    }
        void DVRFileOperationSomeIPProxy::FileDeleteRequest(const DVRFileOperation::FileListPath &_FileListPath, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::SetResult &_FileDeleteACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::FileListPath, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t> deploy_FileListPath(_FileListPath, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_FileDeleteACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::FileListPath,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_FileListPath,
    _internalCallStatus,
    deploy_FileDeleteACK);
    _FileDeleteACK = deploy_FileDeleteACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::FileDeleteRequestAsync(const DVRFileOperation::FileListPath &_FileListPath, FileDeleteRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::FileListPath, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t> deploy_FileListPath(_FileListPath, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_FileDeleteACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::FileListPath,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_FileListPath,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t > _FileDeleteACK) {
                if (_callback)
                    _callback(_internalCallStatus, _FileDeleteACK.getValue());
            },
            std::make_tuple(deploy_FileDeleteACK));
    }
        void DVRFileOperationSomeIPProxy::TFCardInfoQuery(const DVRFileOperation::GetAllInfo &_GetAllInfo, const DVRFileOperation::TFCardOptionList &_TFCardOptionList, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::TFCardInfoList &_TFCardInfoList, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::GetAllInfo, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t> deploy_GetAllInfo(_GetAllInfo, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::TFCardOptionList, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardOptionListDeployment_t> deploy_TFCardOptionList(_TFCardOptionList, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardOptionListDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::TFCardInfoList, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardInfoListDeployment_t> deploy_TFCardInfoList(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardInfoListDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::GetAllInfo,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::TFCardOptionList,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardOptionListDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::TFCardInfoList,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardInfoListDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_GetAllInfo, deploy_TFCardOptionList,
    _internalCallStatus,
    deploy_TFCardInfoList);
    _TFCardInfoList = deploy_TFCardInfoList.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::TFCardInfoQueryAsync(const DVRFileOperation::GetAllInfo &_GetAllInfo, const DVRFileOperation::TFCardOptionList &_TFCardOptionList, TFCardInfoQueryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::GetAllInfo, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t> deploy_GetAllInfo(_GetAllInfo, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::TFCardOptionList, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardOptionListDeployment_t> deploy_TFCardOptionList(_TFCardOptionList, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardOptionListDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::TFCardInfoList, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardInfoListDeployment_t> deploy_TFCardInfoList(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardInfoListDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::GetAllInfo,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::TFCardOptionList,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardOptionListDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::TFCardInfoList,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardInfoListDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_GetAllInfo, deploy_TFCardOptionList,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::TFCardInfoList, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::TFCardInfoListDeployment_t > _TFCardInfoList) {
                if (_callback)
                    _callback(_internalCallStatus, _TFCardInfoList.getValue());
            },
            std::make_tuple(deploy_TFCardInfoList));
    }
        void DVRFileOperationSomeIPProxy::SelectFileCapacityRequest(const DVRFileOperation::FileListPath &_FileListPath, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::SetResult &_SetResult, DVRFileOperation::FileCapacity &_FileCapacity, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::FileListPath, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t> deploy_FileListPath(_FileListPath, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_SetResult(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileCapacity(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::FileListPath,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileCapacity,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xe),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_FileListPath,
    _internalCallStatus,
    deploy_SetResult, deploy_FileCapacity);
    _SetResult = deploy_SetResult.getValue();
    _FileCapacity = deploy_FileCapacity.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::SelectFileCapacityRequestAsync(const DVRFileOperation::FileListPath &_FileListPath, SelectFileCapacityRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::FileListPath, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t> deploy_FileListPath(_FileListPath, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_SetResult(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileCapacity(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::FileListPath,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileListPathDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileCapacity,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xe),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_FileListPath,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t > _SetResult, CommonAPI::Deployable< DVRFileOperation::FileCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _FileCapacity) {
                if (_callback)
                    _callback(_internalCallStatus, _SetResult.getValue(), _FileCapacity.getValue());
            },
            std::make_tuple(deploy_SetResult, deploy_FileCapacity));
    }
        void DVRFileOperationSomeIPProxy::EMMCInfoQuery(const DVRFileOperation::GetAllInfo &_GetAllInfo, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::EMMCStatus &_EMMCStatus, DVRFileOperation::EMMCCapacityStruct &_EMMCCapacityStruct, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::GetAllInfo, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t> deploy_GetAllInfo(_GetAllInfo, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::EMMCStatus, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCStatusDeployment_t> deploy_EMMCStatus(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCStatusDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::EMMCCapacityStruct, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCCapacityStructDeployment_t> deploy_EMMCCapacityStruct(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCCapacityStructDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::GetAllInfo,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::EMMCStatus,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCStatusDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::EMMCCapacityStruct,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCCapacityStructDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x8),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_GetAllInfo,
    _internalCallStatus,
    deploy_EMMCStatus, deploy_EMMCCapacityStruct);
    _EMMCStatus = deploy_EMMCStatus.getValue();
    _EMMCCapacityStruct = deploy_EMMCCapacityStruct.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::EMMCInfoQueryAsync(const DVRFileOperation::GetAllInfo &_GetAllInfo, EMMCInfoQueryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::GetAllInfo, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t> deploy_GetAllInfo(_GetAllInfo, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::EMMCStatus, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCStatusDeployment_t> deploy_EMMCStatus(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCStatusDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::EMMCCapacityStruct, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCCapacityStructDeployment_t> deploy_EMMCCapacityStruct(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCCapacityStructDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::GetAllInfo,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::GetAllInfoDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::EMMCStatus,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCStatusDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::EMMCCapacityStruct,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCCapacityStructDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x8),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_GetAllInfo,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::EMMCStatus, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCStatusDeployment_t > _EMMCStatus, CommonAPI::Deployable< DVRFileOperation::EMMCCapacityStruct, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EMMCCapacityStructDeployment_t > _EMMCCapacityStruct) {
                if (_callback)
                    _callback(_internalCallStatus, _EMMCStatus.getValue(), _EMMCCapacityStruct.getValue());
            },
            std::make_tuple(deploy_EMMCStatus, deploy_EMMCCapacityStruct));
    }
        void DVRFileOperationSomeIPProxy::StopVideoBrowse(const DVRFileOperation::AccessType &_VideoBrowseChannel, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::SetResult &_VideoBrowseACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_VideoBrowseChannel(_VideoBrowseChannel, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_VideoBrowseACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_VideoBrowseChannel,
    _internalCallStatus,
    deploy_VideoBrowseACK);
    _VideoBrowseACK = deploy_VideoBrowseACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::StopVideoBrowseAsync(const DVRFileOperation::AccessType &_VideoBrowseChannel, StopVideoBrowseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_VideoBrowseChannel(_VideoBrowseChannel, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t> deploy_VideoBrowseACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_VideoBrowseChannel,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::SetResultDeployment_t > _VideoBrowseACK) {
                if (_callback)
                    _callback(_internalCallStatus, _VideoBrowseACK.getValue());
            },
            std::make_tuple(deploy_VideoBrowseACK));
    }
        void DVRFileOperationSomeIPProxy::SelectAllFileCapacityRequest(const DVRFileOperation::AccessType &_AccessType_In, const DVRFileOperation::FileType &_FileType_In, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::AccessType &_AccessType_Out, DVRFileOperation::FileType &_FileType_Out, DVRFileOperation::SelectAllFileCapacity &_SelectAllFileCapacity, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType_In(_AccessType_In, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType_In(_FileType_In, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType_Out(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType_Out(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::SelectAllFileCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_SelectAllFileCapacity(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::FileType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::SelectAllFileCapacity,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xc),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_AccessType_In, deploy_FileType_In,
    _internalCallStatus,
    deploy_AccessType_Out, deploy_FileType_Out, deploy_SelectAllFileCapacity);
    _AccessType_Out = deploy_AccessType_Out.getValue();
    _FileType_Out = deploy_FileType_Out.getValue();
    _SelectAllFileCapacity = deploy_SelectAllFileCapacity.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::SelectAllFileCapacityRequestAsync(const DVRFileOperation::AccessType &_AccessType_In, const DVRFileOperation::FileType &_FileType_In, SelectAllFileCapacityRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType_In(_AccessType_In, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType_In(_FileType_In, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType_Out(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t> deploy_FileType_Out(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::SelectAllFileCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_SelectAllFileCapacity(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::FileType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::SelectAllFileCapacity,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xc),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_AccessType_In, deploy_FileType_In,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t > _AccessType_Out, CommonAPI::Deployable< DVRFileOperation::FileType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::FileTypeDeployment_t > _FileType_Out, CommonAPI::Deployable< DVRFileOperation::SelectAllFileCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _SelectAllFileCapacity) {
                if (_callback)
                    _callback(_internalCallStatus, _AccessType_Out.getValue(), _FileType_Out.getValue(), _SelectAllFileCapacity.getValue());
            },
            std::make_tuple(deploy_AccessType_Out, deploy_FileType_Out, deploy_SelectAllFileCapacity));
    }
        void DVRFileOperationSomeIPProxy::RecordEventStatusRequest(const DVRFileOperation::AccessType &_AccessType, CommonAPI::CallStatus &_internalCallStatus, DVRFileOperation::RecordStatus &_RecordStatus, DVRFileOperation::EventType &_EventType, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::RecordStatus, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::RecordStatusDeployment_t> deploy_RecordStatus(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::RecordStatusDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRFileOperation::EventType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EventTypeDeployment_t> deploy_EventType(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EventTypeDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRFileOperation::RecordStatus,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::RecordStatusDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRFileOperation::EventType,
                        ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EventTypeDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xf),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_AccessType,
    _internalCallStatus,
    deploy_RecordStatus, deploy_EventType);
    _RecordStatus = deploy_RecordStatus.getValue();
    _EventType = deploy_EventType.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRFileOperationSomeIPProxy::RecordEventStatusRequestAsync(const DVRFileOperation::AccessType &_AccessType, RecordEventStatusRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRFileOperation::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::RecordStatus, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::RecordStatusDeployment_t> deploy_RecordStatus(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::RecordStatusDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRFileOperation::EventType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EventTypeDeployment_t> deploy_EventType(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EventTypeDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::AccessTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRFileOperation::RecordStatus,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::RecordStatusDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRFileOperation::EventType,
                    ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EventTypeDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xf),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_AccessType,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRFileOperation::RecordStatus, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::RecordStatusDeployment_t > _RecordStatus, CommonAPI::Deployable< DVRFileOperation::EventType, ::v1::GREATWALL::DVR_VIMS::DVRFileOperation_::EventTypeDeployment_t > _EventType) {
                if (_callback)
                    _callback(_internalCallStatus, _RecordStatus.getValue(), _EventType.getValue());
            },
            std::make_tuple(deploy_RecordStatus, deploy_EventType));
    }



    void DVRFileOperationSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1
