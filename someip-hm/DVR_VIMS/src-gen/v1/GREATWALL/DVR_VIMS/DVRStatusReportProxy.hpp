/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_DVR_VIMS_DVR_Status_Report_PROXY_HPP_
#define V1_GREATWALL_DVR_VIMS_DVR_Status_Report_PROXY_HPP_

#include <v1/GREATWALL/DVR_VIMS/DVRStatusReportProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

template <typename ... _AttributeExtensions>
class DVRStatusReportProxy
    : virtual public DVRStatusReport,
      virtual public DVRStatusReportProxyBase,
      virtual public _AttributeExtensions... {
public:
    DVRStatusReportProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~DVRStatusReportProxy();

    typedef DVRStatusReport InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute DVRSensorStatusReport.
     */
    virtual DVRSensorStatusReportAttribute& getDVRSensorStatusReportAttribute() {
        return delegate_->getDVRSensorStatusReportAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute DVRSystemStatusReport.
     */
    virtual DVRSystemStatusReportAttribute& getDVRSystemStatusReportAttribute() {
        return delegate_->getDVRSystemStatusReportAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast DVREMMCStatusReport.
     */
    virtual DVREMMCStatusReportEvent& getDVREMMCStatusReportEvent() {
        return delegate_->getDVREMMCStatusReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast OMCThemePictureReport.
     */
    virtual OMCThemePictureReportEvent& getOMCThemePictureReportEvent() {
        return delegate_->getOMCThemePictureReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast AsyncDeleteOperationProgress.
     */
    virtual AsyncDeleteOperationProgressEvent& getAsyncDeleteOperationProgressEvent() {
        return delegate_->getAsyncDeleteOperationProgressEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast EventOperationReport.
     */
    virtual EventOperationReportEvent& getEventOperationReportEvent() {
        return delegate_->getEventOperationReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast DVRTFStatusReport.
     */
    virtual DVRTFStatusReportEvent& getDVRTFStatusReportEvent() {
        return delegate_->getDVRTFStatusReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast DVREventReport.
     */
    virtual DVREventReportEvent& getDVREventReportEvent() {
        return delegate_->getDVREventReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast ExportOperationProgressReport.
     */
    virtual ExportOperationProgressReportEvent& getExportOperationProgressReportEvent() {
        return delegate_->getExportOperationProgressReportEvent();
    }

    /**
     * Calls DVRContinuousCapture with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DVRContinuousCapture(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::CaptureNumber &_CaptureNumber, const DVRStatusReport::CaptureInterval &_CaptureInterval, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_ContinuousCaptureACK, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DVRContinuousCapture with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DVRContinuousCaptureAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::CaptureNumber &_CaptureNumber, const DVRStatusReport::CaptureInterval &_CaptureInterval, DVRContinuousCaptureAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DVRStatusReportACK with Fire&Forget semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DVRStatusReportACK(const DVRStatusReport::SetResult &_StatusReportACK, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Calls DVRTimelapseVideoTape with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DVRTimelapseVideoTape(const DVRStatusReport::TimelapseVideoInterval &_TimelapseVideoInterval, const DVRStatusReport::TimelapseVideoTotalFrameNumber &_TimelapseVideoTotalFrameNumber, const DVRStatusReport::DVRTimelapseVideoPlayFrameNumber &_DVRTimelapseVideoPlayFrameNumber, const DVRStatusReport::AccessType &_AccessType, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_TimelapseVideoTapeACK, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DVRTimelapseVideoTape with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DVRTimelapseVideoTapeAsync(const DVRStatusReport::TimelapseVideoInterval &_TimelapseVideoInterval, const DVRStatusReport::TimelapseVideoTotalFrameNumber &_TimelapseVideoTotalFrameNumber, const DVRStatusReport::DVRTimelapseVideoPlayFrameNumber &_DVRTimelapseVideoPlayFrameNumber, const DVRStatusReport::AccessType &_AccessType, DVRTimelapseVideoTapeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DVRManualOperation with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DVRManualOperation(const DVRStatusReport::ManualOperation &_ManualOperation, const DVRStatusReport::AccessType &_AccessType, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_ManualOperationACK, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DVRManualOperation with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DVRManualOperationAsync(const DVRStatusReport::ManualOperation &_ManualOperation, const DVRStatusReport::AccessType &_AccessType, DVRManualOperationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StopShortVideoRecording with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StopShortVideoRecording(const DVRStatusReport::AccessType &_VideoRecordingChannel, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_VideoRecordingACK, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StopShortVideoRecording with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StopShortVideoRecordingAsync(const DVRStatusReport::AccessType &_VideoRecordingChannel, StopShortVideoRecordingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PictureTransferRequest with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void PictureTransferRequest(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls PictureTransferRequest with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> PictureTransferRequestAsync(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, PictureTransferRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls CaringMode with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void CaringMode(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::TotalCareTime &_TotalCareTime, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_CaringModeACK, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls CaringMode with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> CaringModeAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::TotalCareTime &_TotalCareTime, CaringModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls OMCThemePictureResult with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void OMCThemePictureResult(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::ThemePictureID &_ThemePictureID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls OMCThemePictureResult with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> OMCThemePictureResultAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::ThemePictureID &_ThemePictureID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, OMCThemePictureResultAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls OMCCaptureRequest with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void OMCCaptureRequest(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls OMCCaptureRequest with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> OMCCaptureRequestAsync(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, OMCCaptureRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartShortVideoRecording with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StartShortVideoRecording(const DVRStatusReport::AccessType &_VideoRecordingChannel, const DVRStatusReport::PreRecordingTime &_PreRecordingTime, const DVRStatusReport::TotalRecordingTime &_TotalRecordingTime, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_VideoRecordingACK, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartShortVideoRecording with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StartShortVideoRecordingAsync(const DVRStatusReport::AccessType &_VideoRecordingChannel, const DVRStatusReport::PreRecordingTime &_PreRecordingTime, const DVRStatusReport::TotalRecordingTime &_TotalRecordingTime, StartShortVideoRecordingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TFCardExportCapacityQuery with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TFCardExportCapacityQuery(const DVRStatusReport::TFCardOption &_TFCardOption, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::TotalExportCapacity &_TotalExportCapacity, DVRStatusReport::FreeExportCapacity &_FreeExportCapacity, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TFCardExportCapacityQuery with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TFCardExportCapacityQueryAsync(const DVRStatusReport::TFCardOption &_TFCardOption, TFCardExportCapacityQueryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< DVRStatusReportProxyBase> delegate_;
};

typedef DVRStatusReportProxy<> DVRStatusReportProxyDefault;

namespace DVRStatusReportExtensions {
    template <template <typename > class _ExtensionType>
    class DVRSensorStatusReportAttributeExtension {
     public:
        typedef _ExtensionType< DVRStatusReportProxyBase::DVRSensorStatusReportAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< DVRStatusReportProxyBase::DVRSensorStatusReportAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DVRSensorStatusReportAttributeExtension(DVRStatusReportProxyBase& proxy): attributeExtension_(proxy.getDVRSensorStatusReportAttribute()) {
        }
    
        inline extension_type& getDVRSensorStatusReportAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DVRSystemStatusReportAttributeExtension {
     public:
        typedef _ExtensionType< DVRStatusReportProxyBase::DVRSystemStatusReportAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< DVRStatusReportProxyBase::DVRSystemStatusReportAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DVRSystemStatusReportAttributeExtension(DVRStatusReportProxyBase& proxy): attributeExtension_(proxy.getDVRSystemStatusReportAttribute()) {
        }
    
        inline extension_type& getDVRSystemStatusReportAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace DVRStatusReportExtensions

//
// DVRStatusReportProxy Implementation
//
template <typename ... _AttributeExtensions>
DVRStatusReportProxy<_AttributeExtensions...>::DVRStatusReportProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< DVRStatusReportProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< DVRStatusReportProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
DVRStatusReportProxy<_AttributeExtensions...>::~DVRStatusReportProxy() {
}

template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::DVRContinuousCapture(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::CaptureNumber &_CaptureNumber, const DVRStatusReport::CaptureInterval &_CaptureInterval, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_ContinuousCaptureACK, const CommonAPI::CallInfo *_info) {
    if (!_AccessType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->DVRContinuousCapture(_AccessType, _CaptureNumber, _CaptureInterval, _internalCallStatus, _ContinuousCaptureACK, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::DVRContinuousCaptureAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::CaptureNumber &_CaptureNumber, const DVRStatusReport::CaptureInterval &_CaptureInterval, DVRContinuousCaptureAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_AccessType.validate()) {
        DVRStatusReport::SetResult ContinuousCaptureACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ContinuousCaptureACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->DVRContinuousCaptureAsync(_AccessType, _CaptureNumber, _CaptureInterval, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::DVRStatusReportACK(const DVRStatusReport::SetResult &_StatusReportACK, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_StatusReportACK.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->DVRStatusReportACK(_StatusReportACK, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::DVRTimelapseVideoTape(const DVRStatusReport::TimelapseVideoInterval &_TimelapseVideoInterval, const DVRStatusReport::TimelapseVideoTotalFrameNumber &_TimelapseVideoTotalFrameNumber, const DVRStatusReport::DVRTimelapseVideoPlayFrameNumber &_DVRTimelapseVideoPlayFrameNumber, const DVRStatusReport::AccessType &_AccessType, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_TimelapseVideoTapeACK, const CommonAPI::CallInfo *_info) {
    if (!_AccessType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->DVRTimelapseVideoTape(_TimelapseVideoInterval, _TimelapseVideoTotalFrameNumber, _DVRTimelapseVideoPlayFrameNumber, _AccessType, _internalCallStatus, _TimelapseVideoTapeACK, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::DVRTimelapseVideoTapeAsync(const DVRStatusReport::TimelapseVideoInterval &_TimelapseVideoInterval, const DVRStatusReport::TimelapseVideoTotalFrameNumber &_TimelapseVideoTotalFrameNumber, const DVRStatusReport::DVRTimelapseVideoPlayFrameNumber &_DVRTimelapseVideoPlayFrameNumber, const DVRStatusReport::AccessType &_AccessType, DVRTimelapseVideoTapeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_AccessType.validate()) {
        DVRStatusReport::SetResult TimelapseVideoTapeACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, TimelapseVideoTapeACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->DVRTimelapseVideoTapeAsync(_TimelapseVideoInterval, _TimelapseVideoTotalFrameNumber, _DVRTimelapseVideoPlayFrameNumber, _AccessType, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::DVRManualOperation(const DVRStatusReport::ManualOperation &_ManualOperation, const DVRStatusReport::AccessType &_AccessType, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_ManualOperationACK, const CommonAPI::CallInfo *_info) {
    if (!_ManualOperation.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_AccessType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->DVRManualOperation(_ManualOperation, _AccessType, _internalCallStatus, _ManualOperationACK, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::DVRManualOperationAsync(const DVRStatusReport::ManualOperation &_ManualOperation, const DVRStatusReport::AccessType &_AccessType, DVRManualOperationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_ManualOperation.validate()) {
        DVRStatusReport::SetResult ManualOperationACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ManualOperationACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_AccessType.validate()) {
        DVRStatusReport::SetResult ManualOperationACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ManualOperationACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->DVRManualOperationAsync(_ManualOperation, _AccessType, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::StopShortVideoRecording(const DVRStatusReport::AccessType &_VideoRecordingChannel, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_VideoRecordingACK, const CommonAPI::CallInfo *_info) {
    if (!_VideoRecordingChannel.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->StopShortVideoRecording(_VideoRecordingChannel, _internalCallStatus, _VideoRecordingACK, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::StopShortVideoRecordingAsync(const DVRStatusReport::AccessType &_VideoRecordingChannel, StopShortVideoRecordingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_VideoRecordingChannel.validate()) {
        DVRStatusReport::SetResult VideoRecordingACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, VideoRecordingACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->StopShortVideoRecordingAsync(_VideoRecordingChannel, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::PictureTransferRequest(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info) {
    if (!_EventType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_AccessType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->PictureTransferRequest(_EventTime, _EventType, _AccessType, _FileID, _FileSize, _FileContentArray, _internalCallStatus, _OMCCaptureFaileCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::PictureTransferRequestAsync(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, PictureTransferRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_EventType.validate()) {
        DVRStatusReport::OMCCaptureFaileCode OMCCaptureFaileCode = DVRStatusReport::OMCCaptureFaileCode::E_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, OMCCaptureFaileCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_AccessType.validate()) {
        DVRStatusReport::OMCCaptureFaileCode OMCCaptureFaileCode = DVRStatusReport::OMCCaptureFaileCode::E_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, OMCCaptureFaileCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->PictureTransferRequestAsync(_EventTime, _EventType, _AccessType, _FileID, _FileSize, _FileContentArray, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::CaringMode(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::TotalCareTime &_TotalCareTime, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_CaringModeACK, const CommonAPI::CallInfo *_info) {
    if (!_AccessType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->CaringMode(_AccessType, _TotalCareTime, _internalCallStatus, _CaringModeACK, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::CaringModeAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::TotalCareTime &_TotalCareTime, CaringModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_AccessType.validate()) {
        DVRStatusReport::SetResult CaringModeACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, CaringModeACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->CaringModeAsync(_AccessType, _TotalCareTime, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::OMCThemePictureResult(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::ThemePictureID &_ThemePictureID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info) {
    if (!_AccessType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->OMCThemePictureResult(_AccessType, _ThemePictureID, _FileSize, _FileContentArray, _internalCallStatus, _OMCCaptureFaileCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::OMCThemePictureResultAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::ThemePictureID &_ThemePictureID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, OMCThemePictureResultAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_AccessType.validate()) {
        DVRStatusReport::OMCCaptureFaileCode OMCCaptureFaileCode = DVRStatusReport::OMCCaptureFaileCode::E_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, OMCCaptureFaileCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->OMCThemePictureResultAsync(_AccessType, _ThemePictureID, _FileSize, _FileContentArray, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::OMCCaptureRequest(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info) {
    if (!_EventType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_AccessType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->OMCCaptureRequest(_EventTime, _EventType, _AccessType, _FileID, _FileSize, _internalCallStatus, _OMCCaptureFaileCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::OMCCaptureRequestAsync(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, OMCCaptureRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_EventType.validate()) {
        DVRStatusReport::OMCCaptureFaileCode OMCCaptureFaileCode = DVRStatusReport::OMCCaptureFaileCode::E_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, OMCCaptureFaileCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_AccessType.validate()) {
        DVRStatusReport::OMCCaptureFaileCode OMCCaptureFaileCode = DVRStatusReport::OMCCaptureFaileCode::E_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, OMCCaptureFaileCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->OMCCaptureRequestAsync(_EventTime, _EventType, _AccessType, _FileID, _FileSize, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::StartShortVideoRecording(const DVRStatusReport::AccessType &_VideoRecordingChannel, const DVRStatusReport::PreRecordingTime &_PreRecordingTime, const DVRStatusReport::TotalRecordingTime &_TotalRecordingTime, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_VideoRecordingACK, const CommonAPI::CallInfo *_info) {
    if (!_VideoRecordingChannel.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->StartShortVideoRecording(_VideoRecordingChannel, _PreRecordingTime, _TotalRecordingTime, _internalCallStatus, _VideoRecordingACK, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::StartShortVideoRecordingAsync(const DVRStatusReport::AccessType &_VideoRecordingChannel, const DVRStatusReport::PreRecordingTime &_PreRecordingTime, const DVRStatusReport::TotalRecordingTime &_TotalRecordingTime, StartShortVideoRecordingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_VideoRecordingChannel.validate()) {
        DVRStatusReport::SetResult VideoRecordingACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, VideoRecordingACK);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->StartShortVideoRecordingAsync(_VideoRecordingChannel, _PreRecordingTime, _TotalRecordingTime, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DVRStatusReportProxy<_AttributeExtensions...>::TFCardExportCapacityQuery(const DVRStatusReport::TFCardOption &_TFCardOption, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::TotalExportCapacity &_TotalExportCapacity, DVRStatusReport::FreeExportCapacity &_FreeExportCapacity, const CommonAPI::CallInfo *_info) {
    if (!_TFCardOption.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->TFCardExportCapacityQuery(_TFCardOption, _internalCallStatus, _TotalExportCapacity, _FreeExportCapacity, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DVRStatusReportProxy<_AttributeExtensions...>::TFCardExportCapacityQueryAsync(const DVRStatusReport::TFCardOption &_TFCardOption, TFCardExportCapacityQueryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_TFCardOption.validate()) {
        DVRStatusReport::TotalExportCapacity TotalExportCapacity = 0ul;
        DVRStatusReport::FreeExportCapacity FreeExportCapacity = 0ul;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, TotalExportCapacity, FreeExportCapacity);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->TFCardExportCapacityQueryAsync(_TFCardOption, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &DVRStatusReportProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool DVRStatusReportProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool DVRStatusReportProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& DVRStatusReportProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& DVRStatusReportProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::GREATWALL::DVR_VIMS::DVRStatusReportProxy,
    _AttributeExtension> {
    typedef typename ::v1::GREATWALL::DVR_VIMS::DVRStatusReportProxy<
            ::v1::GREATWALL::DVR_VIMS::DVRStatusReportExtensions::DVRSensorStatusReportAttributeExtension<_AttributeExtension>, 
            ::v1::GREATWALL::DVR_VIMS::DVRStatusReportExtensions::DVRSystemStatusReportAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_DVR_VIMS_DVR_Status_Report_PROXY_HPP_
