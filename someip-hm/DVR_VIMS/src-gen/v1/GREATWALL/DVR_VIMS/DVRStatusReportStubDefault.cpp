/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/DVR_VIMS/DVRStatusReportStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

DVRStatusReportStubDefault::DVRStatusReportStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(DVRStatusReport::getInterfaceVersion()) {
}

const CommonAPI::Version& DVRStatusReportStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

DVRStatusReportStubRemoteEvent* DVRStatusReportStubDefault::initStubAdapter(const std::shared_ptr< DVRStatusReportStubAdapter> &_adapter) {
    CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct& DVRStatusReportStubDefault::getDVRSensorStatusReportAttribute() {
     return dVRSensorStatusReportAttributeValue_;
 }

 const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct& DVRStatusReportStubDefault::getDVRSensorStatusReportAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDVRSensorStatusReportAttribute();
 }

 void DVRStatusReportStubDefault::setDVRSensorStatusReportAttribute(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct _value) {
     std::shared_ptr<DVRStatusReportStubAdapter> stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter,
     DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDVRSensorStatusReportAttribute(true);
         const bool valueChanged = (dVRSensorStatusReportAttributeValue_ != _value);
         if (valueChanged) {
             dVRSensorStatusReportAttributeValue_ = std::move(_value);
             fireDVRSensorStatusReportAttributeChanged(dVRSensorStatusReportAttributeValue_);
         }
         stubAdapter->lockDVRSensorStatusReportAttribute(false);
     } else {
         const bool valueChanged = trySetDVRSensorStatusReportAttribute(std::move(_value));
         if (valueChanged) {
             fireDVRSensorStatusReportAttributeChanged(dVRSensorStatusReportAttributeValue_);
         }
     }
}

 bool DVRStatusReportStubDefault::trySetDVRSensorStatusReportAttribute(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct _value) {
     if (!validateDVRSensorStatusReportAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<DVRStatusReportStubAdapter> stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDVRSensorStatusReportAttribute(true);
         valueChanged = (dVRSensorStatusReportAttributeValue_ != _value);
         dVRSensorStatusReportAttributeValue_ = std::move(_value);
         stubAdapter->lockDVRSensorStatusReportAttribute(false);
     } else {
         valueChanged = (dVRSensorStatusReportAttributeValue_ != _value);
         dVRSensorStatusReportAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool DVRStatusReportStubDefault::validateDVRSensorStatusReportAttributeRequestedValue(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct &_value) {
     (void)_value;
     return true;
 }


 const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus& DVRStatusReportStubDefault::getDVRSystemStatusReportAttribute() {
     return dVRSystemStatusReportAttributeValue_;
 }

 const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus& DVRStatusReportStubDefault::getDVRSystemStatusReportAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getDVRSystemStatusReportAttribute();
 }

 void DVRStatusReportStubDefault::setDVRSystemStatusReportAttribute(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus _value) {
     std::shared_ptr<DVRStatusReportStubAdapter> stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter,
     DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDVRSystemStatusReportAttribute(true);
         const bool valueChanged = (dVRSystemStatusReportAttributeValue_ != _value);
         if (valueChanged) {
             dVRSystemStatusReportAttributeValue_ = std::move(_value);
             fireDVRSystemStatusReportAttributeChanged(dVRSystemStatusReportAttributeValue_);
         }
         stubAdapter->lockDVRSystemStatusReportAttribute(false);
     } else {
         const bool valueChanged = trySetDVRSystemStatusReportAttribute(std::move(_value));
         if (valueChanged) {
             fireDVRSystemStatusReportAttributeChanged(dVRSystemStatusReportAttributeValue_);
         }
     }
}

 bool DVRStatusReportStubDefault::trySetDVRSystemStatusReportAttribute(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus _value) {
     if (!validateDVRSystemStatusReportAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<DVRStatusReportStubAdapter> stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockDVRSystemStatusReportAttribute(true);
         valueChanged = (dVRSystemStatusReportAttributeValue_ != _value);
         dVRSystemStatusReportAttributeValue_ = std::move(_value);
         stubAdapter->lockDVRSystemStatusReportAttribute(false);
     } else {
         valueChanged = (dVRSystemStatusReportAttributeValue_ != _value);
         dVRSystemStatusReportAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool DVRStatusReportStubDefault::validateDVRSystemStatusReportAttributeRequestedValue(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus &_value) {
     (void)_value;
     return _value.validate();
 }



void DVRStatusReportStubDefault::DVRContinuousCapture(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::CaptureNumber _CaptureNumber, DVRStatusReport::CaptureInterval _CaptureInterval, DVRContinuousCaptureReply_t _reply) {
    (void)_client;
    (void)_AccessType;
    (void)_CaptureNumber;
    (void)_CaptureInterval;
    DVRStatusReport::SetResult ContinuousCaptureACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
    if (!ContinuousCaptureACK.validate()) {
        return;
    }
    _reply(ContinuousCaptureACK);
}

void DVRStatusReportStubDefault::DVRStatusReportACK(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::SetResult _StatusReportACK) {
    (void)_client;
    (void)_StatusReportACK;
}

void DVRStatusReportStubDefault::DVRTimelapseVideoTape(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::TimelapseVideoInterval _TimelapseVideoInterval, DVRStatusReport::TimelapseVideoTotalFrameNumber _TimelapseVideoTotalFrameNumber, DVRStatusReport::DVRTimelapseVideoPlayFrameNumber _DVRTimelapseVideoPlayFrameNumber, DVRStatusReport::AccessType _AccessType, DVRTimelapseVideoTapeReply_t _reply) {
    (void)_client;
    (void)_TimelapseVideoInterval;
    (void)_TimelapseVideoTotalFrameNumber;
    (void)_DVRTimelapseVideoPlayFrameNumber;
    (void)_AccessType;
    DVRStatusReport::SetResult TimelapseVideoTapeACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
    if (!TimelapseVideoTapeACK.validate()) {
        return;
    }
    _reply(TimelapseVideoTapeACK);
}

void DVRStatusReportStubDefault::DVRManualOperation(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::ManualOperation _ManualOperation, DVRStatusReport::AccessType _AccessType, DVRManualOperationReply_t _reply) {
    (void)_client;
    (void)_ManualOperation;
    (void)_AccessType;
    DVRStatusReport::SetResult ManualOperationACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
    if (!ManualOperationACK.validate()) {
        return;
    }
    _reply(ManualOperationACK);
}

void DVRStatusReportStubDefault::StopShortVideoRecording(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _VideoRecordingChannel, StopShortVideoRecordingReply_t _reply) {
    (void)_client;
    (void)_VideoRecordingChannel;
    DVRStatusReport::SetResult VideoRecordingACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
    if (!VideoRecordingACK.validate()) {
        return;
    }
    _reply(VideoRecordingACK);
}

void DVRStatusReportStubDefault::PictureTransferRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::EventTime _EventTime, DVRStatusReport::EventType _EventType, DVRStatusReport::AccessType _AccessType, DVRStatusReport::FileID _FileID, DVRStatusReport::FileSize _FileSize, DVRStatusReport::FileContentArray _FileContentArray, PictureTransferRequestReply_t _reply) {
    (void)_client;
    (void)_EventTime;
    (void)_EventType;
    (void)_AccessType;
    (void)_FileID;
    (void)_FileSize;
    (void)_FileContentArray;
    DVRStatusReport::OMCCaptureFaileCode OMCCaptureFaileCode = DVRStatusReport::OMCCaptureFaileCode::E_SUCCESS;
    if (!OMCCaptureFaileCode.validate()) {
        return;
    }
    _reply(OMCCaptureFaileCode);
}

void DVRStatusReportStubDefault::CaringMode(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::TotalCareTime _TotalCareTime, CaringModeReply_t _reply) {
    (void)_client;
    (void)_AccessType;
    (void)_TotalCareTime;
    DVRStatusReport::SetResult CaringModeACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
    if (!CaringModeACK.validate()) {
        return;
    }
    _reply(CaringModeACK);
}

void DVRStatusReportStubDefault::OMCThemePictureResult(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::ThemePictureID _ThemePictureID, DVRStatusReport::FileSize _FileSize, DVRStatusReport::FileContentArray _FileContentArray, OMCThemePictureResultReply_t _reply) {
    (void)_client;
    (void)_AccessType;
    (void)_ThemePictureID;
    (void)_FileSize;
    (void)_FileContentArray;
    DVRStatusReport::OMCCaptureFaileCode OMCCaptureFaileCode = DVRStatusReport::OMCCaptureFaileCode::E_SUCCESS;
    if (!OMCCaptureFaileCode.validate()) {
        return;
    }
    _reply(OMCCaptureFaileCode);
}

void DVRStatusReportStubDefault::OMCCaptureRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::EventTime _EventTime, DVRStatusReport::EventType _EventType, DVRStatusReport::AccessType _AccessType, DVRStatusReport::FileID _FileID, DVRStatusReport::FileSize _FileSize, OMCCaptureRequestReply_t _reply) {
    (void)_client;
    (void)_EventTime;
    (void)_EventType;
    (void)_AccessType;
    (void)_FileID;
    (void)_FileSize;
    DVRStatusReport::OMCCaptureFaileCode OMCCaptureFaileCode = DVRStatusReport::OMCCaptureFaileCode::E_SUCCESS;
    if (!OMCCaptureFaileCode.validate()) {
        return;
    }
    _reply(OMCCaptureFaileCode);
}

void DVRStatusReportStubDefault::StartShortVideoRecording(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _VideoRecordingChannel, DVRStatusReport::PreRecordingTime _PreRecordingTime, DVRStatusReport::TotalRecordingTime _TotalRecordingTime, StartShortVideoRecordingReply_t _reply) {
    (void)_client;
    (void)_VideoRecordingChannel;
    (void)_PreRecordingTime;
    (void)_TotalRecordingTime;
    DVRStatusReport::SetResult VideoRecordingACK = DVRStatusReport::SetResult::E_SUCCESSFUL;
    if (!VideoRecordingACK.validate()) {
        return;
    }
    _reply(VideoRecordingACK);
}

void DVRStatusReportStubDefault::TFCardExportCapacityQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::TFCardOption _TFCardOption, TFCardExportCapacityQueryReply_t _reply) {
    (void)_client;
    (void)_TFCardOption;
    DVRStatusReport::TotalExportCapacity TotalExportCapacity = 0ul;
    DVRStatusReport::FreeExportCapacity FreeExportCapacity = 0ul;
    _reply(TotalExportCapacity, FreeExportCapacity);
}


void DVRStatusReportStubDefault::fireDVREMMCStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCStatus &_EMMCStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCCapacityStruct &_EMMCCapacityStruct) {
    if (!_EMMCStatus.validate()) {
        return;
    }
    DVRStatusReportStub::fireDVREMMCStatusReportEvent(_EMMCStatus, _EMMCCapacityStruct);
}
void DVRStatusReportStubDefault::fireOMCThemePictureReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThemePictureID &_ThemePictureID) {
    if (!_AccessType.validate()) {
        return;
    }
    DVRStatusReportStub::fireOMCThemePictureReportEvent(_AccessType, _ThemePictureID);
}
void DVRStatusReportStubDefault::fireAsyncDeleteOperationProgressEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress &_DeleteProgress) {
    DVRStatusReportStub::fireAsyncDeleteOperationProgressEvent(_DeleteProgress);
}
void DVRStatusReportStubDefault::fireEventOperationReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventOperationType &_EventOperationType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType &_EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType) {
    if (!_EventOperationType.validate()) {
        return;
    }
    if (!_EventType.validate()) {
        return;
    }
    if (!_AccessType.validate()) {
        return;
    }
    DVRStatusReportStub::fireEventOperationReportEvent(_EventOperationType, _EventType, _AccessType);
}
void DVRStatusReportStubDefault::fireDVRTFStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardOption &_TFCardOption, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardStatus &_TFCardStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardCapacity &_TFCardCapacity) {
    if (!_TFCardOption.validate()) {
        return;
    }
    if (!_TFCardStatus.validate()) {
        return;
    }
    DVRStatusReportStub::fireDVRTFStatusReportEvent(_TFCardOption, _TFCardStatus, _TFCardCapacity);
}
void DVRStatusReportStubDefault::fireDVREventReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventTime &_EventTime, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType &_EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::FilePath &_FilePath, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThumbnailPath &_ThumbnailPath) {
    if (!_EventType.validate()) {
        return;
    }
    if (!_AccessType.validate()) {
        return;
    }
    DVRStatusReportStub::fireDVREventReportEvent(_EventTime, _EventType, _AccessType, _FilePath, _ThumbnailPath);
}
void DVRStatusReportStubDefault::fireExportOperationProgressReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ExportFileInfoStruct &_ExportFileInfoStruct, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress &_TotalTransProgress) {
    DVRStatusReportStub::fireExportOperationProgressReportEvent(_ExportFileInfoStruct, _TotalTransProgress);
}


DVRStatusReportStubDefault::RemoteEventHandler::RemoteEventHandler(DVRStatusReportStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1
