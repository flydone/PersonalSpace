/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_DVR_VIMS_DVR_STATUS_REPORT_SOMEIP_STUB_ADAPTER_HPP_
#define V1_GREATWALL_DVR_VIMS_DVR_STATUS_REPORT_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/GREATWALL/DVR_VIMS/DVRStatusReportStub.hpp>
#include <v1/GREATWALL/DVR_VIMS/DVRStatusReportSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

template <typename _Stub = ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub, typename... _Stubs>
class DVRStatusReportSomeIPStubAdapterInternal
    : public virtual DVRStatusReportStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> DVRStatusReportSomeIPStubAdapterHelper;

    ~DVRStatusReportSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        DVRStatusReportSomeIPStubAdapterHelper::deinit();
    }

    void fireDVRSensorStatusReportAttributeChanged(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct& value);

    void fireDVRSystemStatusReportAttributeChanged(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus& value);

    void fireDVREMMCStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCStatus& EMMCStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCCapacityStruct& EMMCCapacityStruct);

    void fireOMCThemePictureReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType& AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThemePictureID& ThemePictureID);

    void fireAsyncDeleteOperationProgressEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress& DeleteProgress);

    void fireEventOperationReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventOperationType& EventOperationType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType& EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType& AccessType);

    void fireDVRTFStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardOption& TFCardOption, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardStatus& TFCardStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardCapacity& TFCardCapacity);

    void fireDVREventReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventTime& EventTime, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType& EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType& AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::FilePath& FilePath, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThumbnailPath& ThumbnailPath);

    void fireExportOperationProgressReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ExportFileInfoStruct& ExportFileInfoStruct, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress& TotalTransProgress);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        CommonAPI::Version
    > getDVRStatusReportInterfaceVersionStubDispatcher;

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct,
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSensorStatusStructDeployment_t
    > getDVRSensorStatusReportAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus,
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSystemStatusDeployment_t
    > getDVRSystemStatusReportAttributeStubDispatcher;

    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::AccessType, DVRStatusReport::CaptureNumber, DVRStatusReport::CaptureInterval>,
        std::tuple< DVRStatusReport::SetResult>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
    > dVRContinuousCaptureStubDispatcher;
    static CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::SetResult>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
    > dVRStatusReportACKStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::TimelapseVideoInterval, DVRStatusReport::TimelapseVideoTotalFrameNumber, DVRStatusReport::DVRTimelapseVideoPlayFrameNumber, DVRStatusReport::AccessType>,
        std::tuple< DVRStatusReport::SetResult>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::IntegerDeployment<uint16_t>, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
    > dVRTimelapseVideoTapeStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::ManualOperation, DVRStatusReport::AccessType>,
        std::tuple< DVRStatusReport::SetResult>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
    > dVRManualOperationStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::AccessType>,
        std::tuple< DVRStatusReport::SetResult>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
    > stopShortVideoRecordingStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::EventTime, DVRStatusReport::EventType, DVRStatusReport::AccessType, DVRStatusReport::FileID, DVRStatusReport::FileSize, DVRStatusReport::FileContentArray>,
        std::tuple< DVRStatusReport::OMCCaptureFaileCode>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t>
    > pictureTransferRequestStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::AccessType, DVRStatusReport::TotalCareTime>,
        std::tuple< DVRStatusReport::SetResult>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
    > caringModeStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::AccessType, DVRStatusReport::ThemePictureID, DVRStatusReport::FileSize, DVRStatusReport::FileContentArray>,
        std::tuple< DVRStatusReport::OMCCaptureFaileCode>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t>
    > oMCThemePictureResultStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::EventTime, DVRStatusReport::EventType, DVRStatusReport::AccessType, DVRStatusReport::FileID, DVRStatusReport::FileSize>,
        std::tuple< DVRStatusReport::OMCCaptureFaileCode>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t>
    > oMCCaptureRequestStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::AccessType, DVRStatusReport::PreRecordingTime, DVRStatusReport::TotalRecordingTime>,
        std::tuple< DVRStatusReport::SetResult>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
    > startShortVideoRecordingStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
        std::tuple< DVRStatusReport::TFCardOption>,
        std::tuple< DVRStatusReport::TotalExportCapacity, DVRStatusReport::FreeExportCapacity>,
        std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>>
    > tFCardExportCapacityQueryStubDispatcher;

    DVRStatusReportSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        DVRStatusReportSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< DVRStatusReportStub>(_stub))
    {

                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1002) }, &getDVRSensorStatusReportAttributeStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1001) }, &getDVRSystemStatusReportAttributeStubDispatcher );
        
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x4) }, &dVRContinuousCaptureStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &dVRStatusReportACKStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &dVRTimelapseVideoTapeStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &dVRManualOperationStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6) }, &stopShortVideoRecordingStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xb) }, &pictureTransferRequestStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7) }, &caringModeStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xc) }, &oMCThemePictureResultStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xa) }, &oMCCaptureRequestStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5) }, &startShortVideoRecordingStubDispatcher );
                DVRStatusReportSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x8) }, &tFCardExportCapacityQueryStubDispatcher );







        std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8004), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x3));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8006), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8007), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8003), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8002), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8005), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x2)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9002), itsEventGroups, true);
            fireDVRSensorStatusReportAttributeChanged(std::dynamic_pointer_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub>(_stub)->getDVRSensorStatusReportAttribute(clientId));
        }

        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9001), itsEventGroups, true);
            fireDVRSystemStatusReportAttributeChanged(std::dynamic_pointer_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub>(_stub)->getDVRSystemStatusReportAttribute(clientId));
        }

    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    CommonAPI::Version
    > DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::getDVRStatusReportInterfaceVersionStubDispatcher(&DVRStatusReportStub::lockInterfaceVersionAttribute, &DVRStatusReportStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct,
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSensorStatusStructDeployment_t
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::getDVRSensorStatusReportAttributeStubDispatcher(
    &DVRStatusReportStub::lockDVRSensorStatusReportAttribute,
    &DVRStatusReportStub::getDVRSensorStatusReportAttribute, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus,
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSystemStatusDeployment_t
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::getDVRSystemStatusReportAttributeStubDispatcher(
    &DVRStatusReportStub::lockDVRSystemStatusReportAttribute,
    &DVRStatusReportStub::getDVRSystemStatusReportAttribute, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::AccessType, DVRStatusReport::CaptureNumber, DVRStatusReport::CaptureInterval>,
    std::tuple< DVRStatusReport::SetResult>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::dVRContinuousCaptureStubDispatcher(
    &DVRStatusReportStub::DVRContinuousCapture,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::SetResult>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::dVRStatusReportACKStubDispatcher(
    &DVRStatusReportStub::DVRStatusReportACK,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::TimelapseVideoInterval, DVRStatusReport::TimelapseVideoTotalFrameNumber, DVRStatusReport::DVRTimelapseVideoPlayFrameNumber, DVRStatusReport::AccessType>,
    std::tuple< DVRStatusReport::SetResult>,
    std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::IntegerDeployment<uint16_t>, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::dVRTimelapseVideoTapeStubDispatcher(
    &DVRStatusReportStub::DVRTimelapseVideoTape,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::ManualOperation, DVRStatusReport::AccessType>,
    std::tuple< DVRStatusReport::SetResult>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::dVRManualOperationStubDispatcher(
    &DVRStatusReportStub::DVRManualOperation,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::AccessType>,
    std::tuple< DVRStatusReport::SetResult>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::stopShortVideoRecordingStubDispatcher(
    &DVRStatusReportStub::StopShortVideoRecording,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::EventTime, DVRStatusReport::EventType, DVRStatusReport::AccessType, DVRStatusReport::FileID, DVRStatusReport::FileSize, DVRStatusReport::FileContentArray>,
    std::tuple< DVRStatusReport::OMCCaptureFaileCode>,
    std::tuple< CommonAPI::SomeIP::StringDeployment, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::pictureTransferRequestStubDispatcher(
    &DVRStatusReportStub::PictureTransferRequest,
    false,
    std::make_tuple(&::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::PictureTransferRequest_EventTimeDeployment, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::AccessType, DVRStatusReport::TotalCareTime>,
    std::tuple< DVRStatusReport::SetResult>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::caringModeStubDispatcher(
    &DVRStatusReportStub::CaringMode,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::AccessType, DVRStatusReport::ThemePictureID, DVRStatusReport::FileSize, DVRStatusReport::FileContentArray>,
    std::tuple< DVRStatusReport::OMCCaptureFaileCode>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::oMCThemePictureResultStubDispatcher(
    &DVRStatusReportStub::OMCThemePictureResult,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::EventTime, DVRStatusReport::EventType, DVRStatusReport::AccessType, DVRStatusReport::FileID, DVRStatusReport::FileSize>,
    std::tuple< DVRStatusReport::OMCCaptureFaileCode>,
    std::tuple< CommonAPI::SomeIP::StringDeployment, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::oMCCaptureRequestStubDispatcher(
    &DVRStatusReportStub::OMCCaptureRequest,
    false,
    std::make_tuple(&::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureRequest_EventTimeDeployment, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::AccessType, DVRStatusReport::PreRecordingTime, DVRStatusReport::TotalRecordingTime>,
    std::tuple< DVRStatusReport::SetResult>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::IntegerDeployment<uint8_t>>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::startShortVideoRecordingStubDispatcher(
    &DVRStatusReportStub::StartShortVideoRecording,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr)));

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub,
    std::tuple< DVRStatusReport::TFCardOption>,
    std::tuple< DVRStatusReport::TotalExportCapacity, DVRStatusReport::FreeExportCapacity>,
    std::tuple< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t>,
    std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>>
> DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::tFCardExportCapacityQueryStubDispatcher(
    &DVRStatusReportStub::TFCardExportCapacityQuery,
    false,
    std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t* >(nullptr)),
    std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)));

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDVRSensorStatusReportAttributeChanged(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct& value) {
    CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSensorStatusStructDeployment_t> deployedValue(value, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSensorStatusStructDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct,
                ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSensorStatusStructDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x9002),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDVRSystemStatusReportAttributeChanged(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus& value) {
    CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSystemStatusDeployment_t> deployedValue(value, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSystemStatusDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus,
                ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSystemStatusDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x9001),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDVREMMCStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCStatus& _EMMCStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCCapacityStruct& _EMMCCapacityStruct) {
    CommonAPI::Deployable< DVRStatusReport::EMMCStatus, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EMMCStatusDeployment_t> deployed_EMMCStatus(_EMMCStatus, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EMMCStatusDeployment_t* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::EMMCCapacityStruct, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EMMCCapacityStructDeployment_t> deployed_EMMCCapacityStruct(_EMMCCapacityStruct, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EMMCCapacityStructDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCStatus, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EMMCStatusDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCCapacityStruct, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EMMCCapacityStructDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8004),
            false,
             deployed_EMMCStatus 
            ,  deployed_EMMCCapacityStruct 
    );
}

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireOMCThemePictureReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType& _AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThemePictureID& _ThemePictureID) {
    CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deployed_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::ThemePictureID, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deployed_ThemePictureID(_ThemePictureID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThemePictureID, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8006),
            false,
             deployed_AccessType 
            ,  deployed_ThemePictureID 
    );
}

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireAsyncDeleteOperationProgressEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress& _DeleteProgress) {
    CommonAPI::Deployable< DVRStatusReport::TotalTransProgress, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployed_DeleteProgress(_DeleteProgress, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8007),
            false,
             deployed_DeleteProgress 
    );
}

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireEventOperationReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventOperationType& _EventOperationType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType& _EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType& _AccessType) {
    CommonAPI::Deployable< DVRStatusReport::EventOperationType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventOperationTypeDeployment_t> deployed_EventOperationType(_EventOperationType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventOperationTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::EventType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t> deployed_EventType(_EventType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deployed_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventOperationType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventOperationTypeDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8001),
            false,
             deployed_EventOperationType 
            ,  deployed_EventType 
            ,  deployed_AccessType 
    );
}

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDVRTFStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardOption& _TFCardOption, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardStatus& _TFCardStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardCapacity& _TFCardCapacity) {
    CommonAPI::Deployable< DVRStatusReport::TFCardOption, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t> deployed_TFCardOption(_TFCardOption, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::TFCardStatus, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardStatusDeployment_t> deployed_TFCardStatus(_TFCardStatus, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardStatusDeployment_t* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::TFCardCapacity, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardCapacityDeployment_t> deployed_TFCardCapacity(_TFCardCapacity, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardCapacityDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardOption, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardStatus, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardStatusDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardCapacity, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardCapacityDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8003),
            false,
             deployed_TFCardOption 
            ,  deployed_TFCardStatus 
            ,  deployed_TFCardCapacity 
    );
}

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDVREventReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventTime& _EventTime, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType& _EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType& _AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::FilePath& _FilePath, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThumbnailPath& _ThumbnailPath) {
    CommonAPI::Deployable< DVRStatusReport::EventTime, CommonAPI::SomeIP::StringDeployment> deployed_EventTime(_EventTime, &::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVREventReport_EventTimeDeployment);
    CommonAPI::Deployable< DVRStatusReport::EventType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t> deployed_EventType(_EventType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deployed_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::FilePath, CommonAPI::SomeIP::StringDeployment> deployed_FilePath(_FilePath, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< DVRStatusReport::ThumbnailPath, CommonAPI::SomeIP::StringDeployment> deployed_ThumbnailPath(_ThumbnailPath, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventTime, CommonAPI::SomeIP::StringDeployment > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::FilePath, CommonAPI::SomeIP::StringDeployment > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThumbnailPath, CommonAPI::SomeIP::StringDeployment > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8002),
            false,
             deployed_EventTime 
            ,  deployed_EventType 
            ,  deployed_AccessType 
            ,  deployed_FilePath 
            ,  deployed_ThumbnailPath 
    );
}

template <typename _Stub, typename... _Stubs>
void DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireExportOperationProgressReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ExportFileInfoStruct& _ExportFileInfoStruct, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress& _TotalTransProgress) {
    CommonAPI::Deployable< DVRStatusReport::ExportFileInfoStruct, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ExportFileInfoStructDeployment_t> deployed_ExportFileInfoStruct(_ExportFileInfoStruct, &::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ExportFileInfoStructDeployment);
    CommonAPI::Deployable< DVRStatusReport::TotalTransProgress, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployed_TotalTransProgress(_TotalTransProgress, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ExportFileInfoStruct, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ExportFileInfoStructDeployment_t > 
    ,  CommonAPI::Deployable< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8005),
            false,
             deployed_ExportFileInfoStruct 
            ,  deployed_TotalTransProgress 
    );
}

template <typename _Stub = ::v1::GREATWALL::DVR_VIMS::DVRStatusReportStub, typename... _Stubs>
class DVRStatusReportSomeIPStubAdapter
    : public DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< DVRStatusReportSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    DVRStatusReportSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          DVRStatusReportSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1

#endif // V1_GREATWALL_DVR_VIMS_DVR_Status_Report_SOMEIP_STUB_ADAPTER_HPP_
