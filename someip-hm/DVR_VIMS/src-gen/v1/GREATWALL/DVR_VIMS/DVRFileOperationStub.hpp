/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_DVR_VIMS_DVR_File_Operation_STUB_HPP_
#define V1_GREATWALL_DVR_VIMS_DVR_File_Operation_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/GREATWALL/DVR_VIMS/DVRFileOperation.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>


#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service DVRFileOperation. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class DVRFileOperationStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual DVRFileOperation {
 public:



    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for DVRFileOperation.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class DVRFileOperationStubRemoteEvent
{
public:
    virtual ~DVRFileOperationStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service DVRFileOperation to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class DVRFileOperationStub
    : public virtual CommonAPI::Stub<DVRFileOperationStubAdapter, DVRFileOperationStubRemoteEvent>
{
public:
    typedef std::function<void (DVRFileOperation::SetResult _FileDeleteACK)>AllFileDeleteRequestReply_t;
    typedef std::function<void (DVRFileOperation::FileListStructArray _FileListStructArray)>FileListRequestReply_t;
    typedef std::function<void (DVRFileOperation::ExportFileACK _ExportFileACK)>AllFileExportRequestReply_t;
    typedef std::function<void (DVRFileOperation::ExportFileACK _ExportFileACK)>FileExportRequestReply_t;
    typedef std::function<void (DVRFileOperation::SetResult _FileDeleteACK)>AsyncAllFileDeleteRequestReply_t;
    typedef std::function<void (DVRFileOperation::FileCapacityList_Array _FileCapacityList)>DVRFileCapacityInfoReqReply_t;
    typedef std::function<void (DVRFileOperation::SetResult _TFCardFormatACK)>SDCardFormatReply_t;
    typedef std::function<void (DVRFileOperation::SetResult _VideoBrowseACK)>StartVideoBrowseReply_t;
    typedef std::function<void (DVRFileOperation::FileListIncludeDate_Array _FileListIncludeDate)>FileListIncludeDateReqReply_t;
    typedef std::function<void (DVRFileOperation::SetResult _FileDeleteACK)>FileDeleteRequestReply_t;
    typedef std::function<void (DVRFileOperation::TFCardInfoList _TFCardInfoList)>TFCardInfoQueryReply_t;
    typedef std::function<void (DVRFileOperation::SetResult _SetResult, DVRFileOperation::FileCapacity _FileCapacity)>SelectFileCapacityRequestReply_t;
    typedef std::function<void (DVRFileOperation::EMMCStatus _EMMCStatus, DVRFileOperation::EMMCCapacityStruct _EMMCCapacityStruct)>EMMCInfoQueryReply_t;
    typedef std::function<void (DVRFileOperation::SetResult _VideoBrowseACK)>StopVideoBrowseReply_t;
    typedef std::function<void (DVRFileOperation::AccessType _AccessType_Out, DVRFileOperation::FileType _FileType_Out, DVRFileOperation::SelectAllFileCapacity _SelectAllFileCapacity)>SelectAllFileCapacityRequestReply_t;
    typedef std::function<void (DVRFileOperation::RecordStatus _RecordStatus, DVRFileOperation::EventType _EventType)>RecordEventStatusRequestReply_t;

    virtual ~DVRFileOperationStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }


    /// This is the method that will be called on remote calls on the method AllFileDeleteRequest.
    virtual void AllFileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AllFileDeleteRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method FileListRequest.
    virtual void FileListRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileType _FileType, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileNumber _FileNumber, DVRFileOperation::FileName _FileName, FileListRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method AllFileExportRequest.
    virtual void AllFileExportRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::ExportMode _ExportMode, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AllFileExportRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method FileExportRequest.
    virtual void FileExportRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::ExportMode _ExportMode, DVRFileOperation::FileListPath _FileListPath, FileExportRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method AsyncAllFileDeleteRequest.
    virtual void AsyncAllFileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AsyncAllFileDeleteRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method DVRFileCapacityInfoReq.
    virtual void DVRFileCapacityInfoReq(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::TFAllFileCapacity_Enum _TFAllFileCapacity, DVRFileOperation::TFCardFileTypeList_Array _TFCardFileTypeList, DVRFileCapacityInfoReqReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SDCardFormat.
    virtual void SDCardFormat(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::SDCardOption _SDCardOption, SDCardFormatReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method StartVideoBrowse.
    virtual void StartVideoBrowse(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _VideoBrowseChannel, StartVideoBrowseReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method FileListIncludeDateReq.
    virtual void FileListIncludeDateReq(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileType _FileType, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileNumber _FileNumber, DVRFileOperation::FileName _FileName, FileListIncludeDateReqReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method FileDeleteRequest.
    virtual void FileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileListPath _FileListPath, FileDeleteRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method TFCardInfoQuery.
    virtual void TFCardInfoQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::GetAllInfo _GetAllInfo, DVRFileOperation::TFCardOptionList _TFCardOptionList, TFCardInfoQueryReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SelectFileCapacityRequest.
    virtual void SelectFileCapacityRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileListPath _FileListPath, SelectFileCapacityRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method EMMCInfoQuery.
    virtual void EMMCInfoQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::GetAllInfo _GetAllInfo, EMMCInfoQueryReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method StopVideoBrowse.
    virtual void StopVideoBrowse(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _VideoBrowseChannel, StopVideoBrowseReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SelectAllFileCapacityRequest.
    virtual void SelectAllFileCapacityRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType_In, DVRFileOperation::FileType _FileType_In, SelectAllFileCapacityRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method RecordEventStatusRequest.
    virtual void RecordEventStatusRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, RecordEventStatusRequestReply_t _reply) = 0;

    
    using CommonAPI::Stub<DVRFileOperationStubAdapter, DVRFileOperationStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<DVRFileOperationStubAdapter, DVRFileOperationStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<DVRFileOperationStubAdapter, DVRFileOperationStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef DVRFileOperationStubRemoteEvent RemoteEventType;
    typedef DVRFileOperation StubInterface;
};

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_DVR_VIMS_DVR_File_Operation_STUB_HPP_
