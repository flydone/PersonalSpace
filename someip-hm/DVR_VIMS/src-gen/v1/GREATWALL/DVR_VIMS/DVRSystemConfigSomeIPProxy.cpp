/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/DVR_VIMS/DVRSystemConfigSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createDVRSystemConfigSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< DVRSystemConfigSomeIPProxy>(_address, _connection);
}

void initializeDVRSystemConfigSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.DVR_VIMS.DVRSystemConfig:v1_0:DVRSystemConfig01",
        0x403, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         DVRSystemConfig::getInterface(),
         &createDVRSystemConfigSomeIPProxy);
}

INITIALIZER(registerDVRSystemConfigSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeDVRSystemConfigSomeIPProxy);
}

DVRSystemConfigSomeIPProxy::DVRSystemConfigSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
    {
    }



        void DVRSystemConfigSomeIPProxy::ResetDefaultConfig(const DVRSystemConfig::ResetConfigType &_ResetConfigType, CommonAPI::CallStatus &_internalCallStatus, DVRSystemConfig::SetResult &_ResetConfigACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRSystemConfig::ResetConfigType, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t> deploy_ResetConfigType(_ResetConfigType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRSystemConfig::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t> deploy_ResetConfigACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRSystemConfig::ResetConfigType,
                        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRSystemConfig::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_ResetConfigType,
    _internalCallStatus,
    deploy_ResetConfigACK);
    _ResetConfigACK = deploy_ResetConfigACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRSystemConfigSomeIPProxy::ResetDefaultConfigAsync(const DVRSystemConfig::ResetConfigType &_ResetConfigType, ResetDefaultConfigAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRSystemConfig::ResetConfigType, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t> deploy_ResetConfigType(_ResetConfigType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRSystemConfig::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t> deploy_ResetConfigACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRSystemConfig::ResetConfigType,
                    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ResetConfigTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRSystemConfig::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_ResetConfigType,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRSystemConfig::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t > _ResetConfigACK) {
                if (_callback)
                    _callback(_internalCallStatus, _ResetConfigACK.getValue());
            },
            std::make_tuple(deploy_ResetConfigACK));
    }
        void DVRSystemConfigSomeIPProxy::DVRGetConfig(const DVRSystemConfig::GetAllConfig &_GetAllConfig, const DVRSystemConfig::ConfigTypeList &_ConfigTypeList, CommonAPI::CallStatus &_internalCallStatus, DVRSystemConfig::ConfigListArray &_ConfigListArray, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRSystemConfig::GetAllConfig, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t> deploy_GetAllConfig(_GetAllConfig, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRSystemConfig::ConfigTypeList, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t> deploy_ConfigTypeList(_ConfigTypeList, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRSystemConfig::ConfigListArray, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t> deploy_ConfigListArray(&::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment);
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRSystemConfig::GetAllConfig,
                        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRSystemConfig::ConfigTypeList,
                        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRSystemConfig::ConfigListArray,
                        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_GetAllConfig, deploy_ConfigTypeList,
    _internalCallStatus,
    deploy_ConfigListArray);
    _ConfigListArray = deploy_ConfigListArray.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRSystemConfigSomeIPProxy::DVRGetConfigAsync(const DVRSystemConfig::GetAllConfig &_GetAllConfig, const DVRSystemConfig::ConfigTypeList &_ConfigTypeList, DVRGetConfigAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRSystemConfig::GetAllConfig, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t> deploy_GetAllConfig(_GetAllConfig, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRSystemConfig::ConfigTypeList, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t> deploy_ConfigTypeList(_ConfigTypeList, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRSystemConfig::ConfigListArray, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t> deploy_ConfigListArray(&::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment);
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRSystemConfig::GetAllConfig,
                    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::GetAllConfigDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRSystemConfig::ConfigTypeList,
                    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigTypeListDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRSystemConfig::ConfigListArray,
                    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_GetAllConfig, deploy_ConfigTypeList,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRSystemConfig::ConfigListArray, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t > _ConfigListArray) {
                if (_callback)
                    _callback(_internalCallStatus, _ConfigListArray.getValue());
            },
            std::make_tuple(deploy_ConfigListArray));
    }
        void DVRSystemConfigSomeIPProxy::DVRSetConfig(const DVRSystemConfig::ConfigListArray &_ConfigListArray, CommonAPI::CallStatus &_internalCallStatus, DVRSystemConfig::SetResult &_ParamConfigResult, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRSystemConfig::ConfigListArray, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t> deploy_ConfigListArray(_ConfigListArray, &::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment);
            CommonAPI::Deployable< DVRSystemConfig::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t> deploy_ParamConfigResult(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRSystemConfig::ConfigListArray,
                        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRSystemConfig::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_ConfigListArray,
    _internalCallStatus,
    deploy_ParamConfigResult);
    _ParamConfigResult = deploy_ParamConfigResult.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRSystemConfigSomeIPProxy::DVRSetConfigAsync(const DVRSystemConfig::ConfigListArray &_ConfigListArray, DVRSetConfigAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRSystemConfig::ConfigListArray, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t> deploy_ConfigListArray(_ConfigListArray, &::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment);
        CommonAPI::Deployable< DVRSystemConfig::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t> deploy_ParamConfigResult(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRSystemConfig::ConfigListArray,
                    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::ConfigListArrayDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRSystemConfig::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_ConfigListArray,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRSystemConfig::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRSystemConfig_::SetResultDeployment_t > _ParamConfigResult) {
                if (_callback)
                    _callback(_internalCallStatus, _ParamConfigResult.getValue());
            },
            std::make_tuple(deploy_ParamConfigResult));
    }



    void DVRSystemConfigSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1
