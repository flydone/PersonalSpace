/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_DVR_VIMS_DVR_File_Operation_STUB_DEFAULT_HPP_
#define V1_GREATWALL_DVR_VIMS_DVR_File_Operation_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/GREATWALL/DVR_VIMS/DVRFileOperationStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

/**
 * Provides a default implementation for DVRFileOperationStubRemoteEvent and
 * DVRFileOperationStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT DVRFileOperationStubDefault
    : public virtual DVRFileOperationStub {
public:
    COMMONAPI_EXPORT DVRFileOperationStubDefault();

    COMMONAPI_EXPORT DVRFileOperationStubRemoteEvent* initStubAdapter(const std::shared_ptr< DVRFileOperationStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    COMMONAPI_EXPORT virtual void AllFileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AllFileDeleteRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void FileListRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileType _FileType, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileNumber _FileNumber, DVRFileOperation::FileName _FileName, FileListRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void AllFileExportRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::ExportMode _ExportMode, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AllFileExportRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void FileExportRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::ExportMode _ExportMode, DVRFileOperation::FileListPath _FileListPath, FileExportRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void AsyncAllFileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AsyncAllFileDeleteRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void DVRFileCapacityInfoReq(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::TFAllFileCapacity_Enum _TFAllFileCapacity, DVRFileOperation::TFCardFileTypeList_Array _TFCardFileTypeList, DVRFileCapacityInfoReqReply_t _reply);
    COMMONAPI_EXPORT virtual void SDCardFormat(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::SDCardOption _SDCardOption, SDCardFormatReply_t _reply);
    COMMONAPI_EXPORT virtual void StartVideoBrowse(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _VideoBrowseChannel, StartVideoBrowseReply_t _reply);
    COMMONAPI_EXPORT virtual void FileListIncludeDateReq(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileType _FileType, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileNumber _FileNumber, DVRFileOperation::FileName _FileName, FileListIncludeDateReqReply_t _reply);
    COMMONAPI_EXPORT virtual void FileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileListPath _FileListPath, FileDeleteRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void TFCardInfoQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::GetAllInfo _GetAllInfo, DVRFileOperation::TFCardOptionList _TFCardOptionList, TFCardInfoQueryReply_t _reply);
    COMMONAPI_EXPORT virtual void SelectFileCapacityRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileListPath _FileListPath, SelectFileCapacityRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void EMMCInfoQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::GetAllInfo _GetAllInfo, EMMCInfoQueryReply_t _reply);
    COMMONAPI_EXPORT virtual void StopVideoBrowse(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _VideoBrowseChannel, StopVideoBrowseReply_t _reply);
    COMMONAPI_EXPORT virtual void SelectAllFileCapacityRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType_In, DVRFileOperation::FileType _FileType_In, SelectAllFileCapacityRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void RecordEventStatusRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, RecordEventStatusRequestReply_t _reply);


    
protected:
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual DVRFileOperationStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(DVRFileOperationStubDefault *_defaultStub);


    private:
        DVRFileOperationStubDefault *defaultStub_;
    };
protected:
    DVRFileOperationStubDefault::RemoteEventHandler remoteEventHandler_;

private:


    CommonAPI::Version interfaceVersion_;
};

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_DVR_VIMS_DVR_File_Operation_STUB_DEFAULT
