/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_DVR_VIMS_DVR_Status_Report_STUB_HPP_
#define V1_GREATWALL_DVR_VIMS_DVR_Status_Report_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/GREATWALL/DVR_VIMS/DVRStatusReport.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service DVRStatusReport. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class DVRStatusReportStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual DVRStatusReport {
 public:
    ///Notifies all remote listeners about a change of value of the attribute DVRSensorStatusReport.
    virtual void fireDVRSensorStatusReportAttributeChanged(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct& DVRSensorStatusReport) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DVRSystemStatusReport.
    virtual void fireDVRSystemStatusReportAttributeChanged(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus& DVRSystemStatusReport) = 0;

    /**
    * Sends a broadcast event for DVREMMCStatusReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireDVREMMCStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCStatus &_EMMCStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCCapacityStruct &_EMMCCapacityStruct) = 0;
    /**
    * Sends a broadcast event for OMCThemePictureReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireOMCThemePictureReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThemePictureID &_ThemePictureID) = 0;
    /**
    * Sends a broadcast event for AsyncDeleteOperationProgress. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireAsyncDeleteOperationProgressEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress &_DeleteProgress) = 0;
    /**
    * Sends a broadcast event for EventOperationReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireEventOperationReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventOperationType &_EventOperationType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType &_EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType) = 0;
    /**
    * Sends a broadcast event for DVRTFStatusReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireDVRTFStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardOption &_TFCardOption, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardStatus &_TFCardStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardCapacity &_TFCardCapacity) = 0;
    /**
    * Sends a broadcast event for DVREventReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireDVREventReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventTime &_EventTime, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType &_EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::FilePath &_FilePath, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThumbnailPath &_ThumbnailPath) = 0;
    /**
    * Sends a broadcast event for ExportOperationProgressReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireExportOperationProgressReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ExportFileInfoStruct &_ExportFileInfoStruct, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress &_TotalTransProgress) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockDVRSensorStatusReportAttribute(bool _lockAccess) {
        if (_lockAccess) {
            dVRSensorStatusReportMutex_.lock();
        } else {
            dVRSensorStatusReportMutex_.unlock();
        }
    }
    void lockDVRSystemStatusReportAttribute(bool _lockAccess) {
        if (_lockAccess) {
            dVRSystemStatusReportMutex_.lock();
        } else {
            dVRSystemStatusReportMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

    std::recursive_mutex dVRSensorStatusReportMutex_;
    std::recursive_mutex dVRSystemStatusReportMutex_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for DVRStatusReport.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class DVRStatusReportStubRemoteEvent
{
public:
    virtual ~DVRStatusReportStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service DVRStatusReport to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class DVRStatusReportStub
    : public virtual CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>
{
public:
    typedef std::function<void (DVRStatusReport::SetResult _ContinuousCaptureACK)>DVRContinuousCaptureReply_t;
    typedef std::function<void (DVRStatusReport::SetResult _TimelapseVideoTapeACK)>DVRTimelapseVideoTapeReply_t;
    typedef std::function<void (DVRStatusReport::SetResult _ManualOperationACK)>DVRManualOperationReply_t;
    typedef std::function<void (DVRStatusReport::SetResult _VideoRecordingACK)>StopShortVideoRecordingReply_t;
    typedef std::function<void (DVRStatusReport::OMCCaptureFaileCode _OMCCaptureFaileCode)>PictureTransferRequestReply_t;
    typedef std::function<void (DVRStatusReport::SetResult _CaringModeACK)>CaringModeReply_t;
    typedef std::function<void (DVRStatusReport::OMCCaptureFaileCode _OMCCaptureFaileCode)>OMCThemePictureResultReply_t;
    typedef std::function<void (DVRStatusReport::OMCCaptureFaileCode _OMCCaptureFaileCode)>OMCCaptureRequestReply_t;
    typedef std::function<void (DVRStatusReport::SetResult _VideoRecordingACK)>StartShortVideoRecordingReply_t;
    typedef std::function<void (DVRStatusReport::TotalExportCapacity _TotalExportCapacity, DVRStatusReport::FreeExportCapacity _FreeExportCapacity)>TFCardExportCapacityQueryReply_t;

    virtual ~DVRStatusReportStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }

    /// Provides getter access to the attribute DVRSensorStatusReport
    virtual const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct &getDVRSensorStatusReportAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDVRSensorStatusReportAttributeChanged(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct _value) {
    auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDVRSensorStatusReportAttributeChanged(_value);
    }
    void lockDVRSensorStatusReportAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDVRSensorStatusReportAttribute(_lockAccess);
    }
    /// Provides getter access to the attribute DVRSystemStatusReport
    virtual const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus &getDVRSystemStatusReportAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireDVRSystemStatusReportAttributeChanged(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus _value) {
    auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireDVRSystemStatusReportAttributeChanged(_value);
    }
    void lockDVRSystemStatusReportAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockDVRSystemStatusReportAttribute(_lockAccess);
    }

    /// This is the method that will be called on remote calls on the method DVRContinuousCapture.
    virtual void DVRContinuousCapture(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::CaptureNumber _CaptureNumber, DVRStatusReport::CaptureInterval _CaptureInterval, DVRContinuousCaptureReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method DVRStatusReportACK.
    virtual void DVRStatusReportACK(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::SetResult _StatusReportACK) = 0;
    /// This is the method that will be called on remote calls on the method DVRTimelapseVideoTape.
    virtual void DVRTimelapseVideoTape(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::TimelapseVideoInterval _TimelapseVideoInterval, DVRStatusReport::TimelapseVideoTotalFrameNumber _TimelapseVideoTotalFrameNumber, DVRStatusReport::DVRTimelapseVideoPlayFrameNumber _DVRTimelapseVideoPlayFrameNumber, DVRStatusReport::AccessType _AccessType, DVRTimelapseVideoTapeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method DVRManualOperation.
    virtual void DVRManualOperation(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::ManualOperation _ManualOperation, DVRStatusReport::AccessType _AccessType, DVRManualOperationReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method StopShortVideoRecording.
    virtual void StopShortVideoRecording(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _VideoRecordingChannel, StopShortVideoRecordingReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method PictureTransferRequest.
    virtual void PictureTransferRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::EventTime _EventTime, DVRStatusReport::EventType _EventType, DVRStatusReport::AccessType _AccessType, DVRStatusReport::FileID _FileID, DVRStatusReport::FileSize _FileSize, DVRStatusReport::FileContentArray _FileContentArray, PictureTransferRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method CaringMode.
    virtual void CaringMode(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::TotalCareTime _TotalCareTime, CaringModeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method OMCThemePictureResult.
    virtual void OMCThemePictureResult(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::ThemePictureID _ThemePictureID, DVRStatusReport::FileSize _FileSize, DVRStatusReport::FileContentArray _FileContentArray, OMCThemePictureResultReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method OMCCaptureRequest.
    virtual void OMCCaptureRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::EventTime _EventTime, DVRStatusReport::EventType _EventType, DVRStatusReport::AccessType _AccessType, DVRStatusReport::FileID _FileID, DVRStatusReport::FileSize _FileSize, OMCCaptureRequestReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method StartShortVideoRecording.
    virtual void StartShortVideoRecording(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _VideoRecordingChannel, DVRStatusReport::PreRecordingTime _PreRecordingTime, DVRStatusReport::TotalRecordingTime _TotalRecordingTime, StartShortVideoRecordingReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method TFCardExportCapacityQuery.
    virtual void TFCardExportCapacityQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::TFCardOption _TFCardOption, TFCardExportCapacityQueryReply_t _reply) = 0;
    /// Sends a broadcast event for DVREMMCStatusReport.
    virtual void fireDVREMMCStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCStatus &_EMMCStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCCapacityStruct &_EMMCCapacityStruct) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDVREMMCStatusReportEvent(_EMMCStatus, _EMMCCapacityStruct);
    }
    /// Sends a broadcast event for OMCThemePictureReport.
    virtual void fireOMCThemePictureReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThemePictureID &_ThemePictureID) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireOMCThemePictureReportEvent(_AccessType, _ThemePictureID);
    }
    /// Sends a broadcast event for AsyncDeleteOperationProgress.
    virtual void fireAsyncDeleteOperationProgressEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress &_DeleteProgress) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAsyncDeleteOperationProgressEvent(_DeleteProgress);
    }
    /// Sends a broadcast event for EventOperationReport.
    virtual void fireEventOperationReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventOperationType &_EventOperationType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType &_EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireEventOperationReportEvent(_EventOperationType, _EventType, _AccessType);
    }
    /// Sends a broadcast event for DVRTFStatusReport.
    virtual void fireDVRTFStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardOption &_TFCardOption, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardStatus &_TFCardStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardCapacity &_TFCardCapacity) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDVRTFStatusReportEvent(_TFCardOption, _TFCardStatus, _TFCardCapacity);
    }
    /// Sends a broadcast event for DVREventReport.
    virtual void fireDVREventReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventTime &_EventTime, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType &_EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::FilePath &_FilePath, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThumbnailPath &_ThumbnailPath) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDVREventReportEvent(_EventTime, _EventType, _AccessType, _FilePath, _ThumbnailPath);
    }
    /// Sends a broadcast event for ExportOperationProgressReport.
    virtual void fireExportOperationProgressReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ExportFileInfoStruct &_ExportFileInfoStruct, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress &_TotalTransProgress) {
        auto stubAdapter = CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireExportOperationProgressReportEvent(_ExportFileInfoStruct, _TotalTransProgress);
    }

    
    using CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<DVRStatusReportStubAdapter, DVRStatusReportStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef DVRStatusReportStubRemoteEvent RemoteEventType;
    typedef DVRStatusReport StubInterface;
};

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_DVR_VIMS_DVR_Status_Report_STUB_HPP_
