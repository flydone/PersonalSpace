/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/DVR_VIMS/DVRFileOperationStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

DVRFileOperationStubDefault::DVRFileOperationStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(DVRFileOperation::getInterfaceVersion()) {
}

const CommonAPI::Version& DVRFileOperationStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

DVRFileOperationStubRemoteEvent* DVRFileOperationStubDefault::initStubAdapter(const std::shared_ptr< DVRFileOperationStubAdapter> &_adapter) {
    CommonAPI::Stub<DVRFileOperationStubAdapter, DVRFileOperationStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void DVRFileOperationStubDefault::AllFileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AllFileDeleteRequestReply_t _reply) {
    (void)_client;
    (void)_AccessType;
    (void)_FileType;
    DVRFileOperation::SetResult FileDeleteACK = DVRFileOperation::SetResult::E_SUCCESSFUL;
    if (!FileDeleteACK.validate()) {
        return;
    }
    _reply(FileDeleteACK);
}

void DVRFileOperationStubDefault::FileListRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileType _FileType, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileNumber _FileNumber, DVRFileOperation::FileName _FileName, FileListRequestReply_t _reply) {
    (void)_client;
    (void)_FileType;
    (void)_AccessType;
    (void)_FileNumber;
    (void)_FileName;
    DVRFileOperation::FileListStructArray FileListStructArray = {};
    _reply(FileListStructArray);
}

void DVRFileOperationStubDefault::AllFileExportRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::ExportMode _ExportMode, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AllFileExportRequestReply_t _reply) {
    (void)_client;
    (void)_ExportMode;
    (void)_AccessType;
    (void)_FileType;
    DVRFileOperation::ExportFileACK ExportFileACK = DVRFileOperation::ExportFileACK::E_EXPORTSUCCESS;
    if (!ExportFileACK.validate()) {
        return;
    }
    _reply(ExportFileACK);
}

void DVRFileOperationStubDefault::FileExportRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::ExportMode _ExportMode, DVRFileOperation::FileListPath _FileListPath, FileExportRequestReply_t _reply) {
    (void)_client;
    (void)_ExportMode;
    (void)_FileListPath;
    DVRFileOperation::ExportFileACK ExportFileACK = DVRFileOperation::ExportFileACK::E_EXPORTSUCCESS;
    if (!ExportFileACK.validate()) {
        return;
    }
    _reply(ExportFileACK);
}

void DVRFileOperationStubDefault::AsyncAllFileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileType _FileType, AsyncAllFileDeleteRequestReply_t _reply) {
    (void)_client;
    (void)_AccessType;
    (void)_FileType;
    DVRFileOperation::SetResult FileDeleteACK = DVRFileOperation::SetResult::E_SUCCESSFUL;
    if (!FileDeleteACK.validate()) {
        return;
    }
    _reply(FileDeleteACK);
}

void DVRFileOperationStubDefault::DVRFileCapacityInfoReq(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::TFAllFileCapacity_Enum _TFAllFileCapacity, DVRFileOperation::TFCardFileTypeList_Array _TFCardFileTypeList, DVRFileCapacityInfoReqReply_t _reply) {
    (void)_client;
    (void)_TFAllFileCapacity;
    (void)_TFCardFileTypeList;
    DVRFileOperation::FileCapacityList_Array FileCapacityList = {};
    _reply(FileCapacityList);
}

void DVRFileOperationStubDefault::SDCardFormat(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::SDCardOption _SDCardOption, SDCardFormatReply_t _reply) {
    (void)_client;
    (void)_SDCardOption;
    DVRFileOperation::SetResult TFCardFormatACK = DVRFileOperation::SetResult::E_SUCCESSFUL;
    if (!TFCardFormatACK.validate()) {
        return;
    }
    _reply(TFCardFormatACK);
}

void DVRFileOperationStubDefault::StartVideoBrowse(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _VideoBrowseChannel, StartVideoBrowseReply_t _reply) {
    (void)_client;
    (void)_VideoBrowseChannel;
    DVRFileOperation::SetResult VideoBrowseACK = DVRFileOperation::SetResult::E_SUCCESSFUL;
    if (!VideoBrowseACK.validate()) {
        return;
    }
    _reply(VideoBrowseACK);
}

void DVRFileOperationStubDefault::FileListIncludeDateReq(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileType _FileType, DVRFileOperation::AccessType _AccessType, DVRFileOperation::FileNumber _FileNumber, DVRFileOperation::FileName _FileName, FileListIncludeDateReqReply_t _reply) {
    (void)_client;
    (void)_FileType;
    (void)_AccessType;
    (void)_FileNumber;
    (void)_FileName;
    DVRFileOperation::FileListIncludeDate_Array FileListIncludeDate = {};
    _reply(FileListIncludeDate);
}

void DVRFileOperationStubDefault::FileDeleteRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileListPath _FileListPath, FileDeleteRequestReply_t _reply) {
    (void)_client;
    (void)_FileListPath;
    DVRFileOperation::SetResult FileDeleteACK = DVRFileOperation::SetResult::E_SUCCESSFUL;
    if (!FileDeleteACK.validate()) {
        return;
    }
    _reply(FileDeleteACK);
}

void DVRFileOperationStubDefault::TFCardInfoQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::GetAllInfo _GetAllInfo, DVRFileOperation::TFCardOptionList _TFCardOptionList, TFCardInfoQueryReply_t _reply) {
    (void)_client;
    (void)_GetAllInfo;
    (void)_TFCardOptionList;
    DVRFileOperation::TFCardInfoList TFCardInfoList = {};
    _reply(TFCardInfoList);
}

void DVRFileOperationStubDefault::SelectFileCapacityRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::FileListPath _FileListPath, SelectFileCapacityRequestReply_t _reply) {
    (void)_client;
    (void)_FileListPath;
    DVRFileOperation::SetResult SetResult = DVRFileOperation::SetResult::E_SUCCESSFUL;
    DVRFileOperation::FileCapacity FileCapacity = 0ul;
    if (!SetResult.validate()) {
        return;
    }
    _reply(SetResult, FileCapacity);
}

void DVRFileOperationStubDefault::EMMCInfoQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::GetAllInfo _GetAllInfo, EMMCInfoQueryReply_t _reply) {
    (void)_client;
    (void)_GetAllInfo;
    DVRFileOperation::EMMCStatus EMMCStatus = DVRFileOperation::EMMCStatus::E_EMMCNORMAL;
    DVRFileOperation::EMMCCapacityStruct EMMCCapacityStruct = {};
    if (!EMMCStatus.validate()) {
        return;
    }
    _reply(EMMCStatus, EMMCCapacityStruct);
}

void DVRFileOperationStubDefault::StopVideoBrowse(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _VideoBrowseChannel, StopVideoBrowseReply_t _reply) {
    (void)_client;
    (void)_VideoBrowseChannel;
    DVRFileOperation::SetResult VideoBrowseACK = DVRFileOperation::SetResult::E_SUCCESSFUL;
    if (!VideoBrowseACK.validate()) {
        return;
    }
    _reply(VideoBrowseACK);
}

void DVRFileOperationStubDefault::SelectAllFileCapacityRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType_In, DVRFileOperation::FileType _FileType_In, SelectAllFileCapacityRequestReply_t _reply) {
    (void)_client;
    (void)_AccessType_In;
    (void)_FileType_In;
    DVRFileOperation::AccessType AccessType_Out = DVRFileOperation::AccessType::E_FORESIGHT;
    DVRFileOperation::FileType FileType_Out = DVRFileOperation::FileType::E_NORMALVIDEO;
    DVRFileOperation::SelectAllFileCapacity SelectAllFileCapacity = 0ul;
    if (!AccessType_Out.validate()) {
        return;
    }
    if (!FileType_Out.validate()) {
        return;
    }
    _reply(AccessType_Out, FileType_Out, SelectAllFileCapacity);
}

void DVRFileOperationStubDefault::RecordEventStatusRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRFileOperation::AccessType _AccessType, RecordEventStatusRequestReply_t _reply) {
    (void)_client;
    (void)_AccessType;
    DVRFileOperation::RecordStatus RecordStatus = DVRFileOperation::RecordStatus::E_INACTIVE;
    DVRFileOperation::EventType EventType = DVRFileOperation::EventType::E_MANUALCAPTURE_BYBUTTON;
    if (!RecordStatus.validate()) {
        return;
    }
    if (!EventType.validate()) {
        return;
    }
    _reply(RecordStatus, EventType);
}




DVRFileOperationStubDefault::RemoteEventHandler::RemoteEventHandler(DVRFileOperationStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1
