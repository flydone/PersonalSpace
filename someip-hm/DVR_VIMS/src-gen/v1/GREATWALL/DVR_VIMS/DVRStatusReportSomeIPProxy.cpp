/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002200807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/GREATWALL/DVR_VIMS/DVRStatusReportSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createDVRStatusReportSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< DVRStatusReportSomeIPProxy>(_address, _connection);
}

void initializeDVRStatusReportSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:GREATWALL.DVR_VIMS.DVRStatusReport:v1_0:DVRStatusReport01",
        0x401, 0x1, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         DVRStatusReport::getInterface(),
         &createDVRStatusReportSomeIPProxy);
}

INITIALIZER(registerDVRStatusReportSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeDVRStatusReportSomeIPProxy);
}

DVRStatusReportSomeIPProxy::DVRStatusReportSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          dVRSensorStatusReport_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x2), CommonAPI::SomeIP::event_id_t(0x9002), CommonAPI::SomeIP::method_id_t(0x1002), false, false, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSensorStatusStructDeployment_t* >(nullptr)),
          dVRSystemStatusReport_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x9001), CommonAPI::SomeIP::method_id_t(0x1001), false, false, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVRSystemStatusDeployment_t* >(nullptr))
,          dVREMMCStatusReport_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8004), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EMMCStatusDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EMMCCapacityStructDeployment_t* >(nullptr))),
          oMCThemePictureReport_(*this, 0x3, CommonAPI::SomeIP::event_id_t(0x8006), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr))),
          asyncDeleteOperationProgress_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8007), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr))),
          eventOperationReport_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8001), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventOperationTypeDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr))),
          dVRTFStatusReport_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8003), false, false, std::make_tuple(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardStatusDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardCapacityDeployment_t* >(nullptr))),
          dVREventReport_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8002), false, false, std::make_tuple(&::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::DVREventReport_EventTimeDeployment, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr), static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr))),
          exportOperationProgressReport_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8005), false, false, std::make_tuple(&::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ExportFileInfoStructDeployment, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)))
    {
    }

    DVRStatusReportSomeIPProxy::DVRSensorStatusReportAttribute& DVRStatusReportSomeIPProxy::getDVRSensorStatusReportAttribute() {
        return dVRSensorStatusReport_;
    }
    DVRStatusReportSomeIPProxy::DVRSystemStatusReportAttribute& DVRStatusReportSomeIPProxy::getDVRSystemStatusReportAttribute() {
        return dVRSystemStatusReport_;
    }

    DVRStatusReportSomeIPProxy::DVREMMCStatusReportEvent& DVRStatusReportSomeIPProxy::getDVREMMCStatusReportEvent() {
        return dVREMMCStatusReport_;
    }
    DVRStatusReportSomeIPProxy::OMCThemePictureReportEvent& DVRStatusReportSomeIPProxy::getOMCThemePictureReportEvent() {
        return oMCThemePictureReport_;
    }
    DVRStatusReportSomeIPProxy::AsyncDeleteOperationProgressEvent& DVRStatusReportSomeIPProxy::getAsyncDeleteOperationProgressEvent() {
        return asyncDeleteOperationProgress_;
    }
    DVRStatusReportSomeIPProxy::EventOperationReportEvent& DVRStatusReportSomeIPProxy::getEventOperationReportEvent() {
        return eventOperationReport_;
    }
    DVRStatusReportSomeIPProxy::DVRTFStatusReportEvent& DVRStatusReportSomeIPProxy::getDVRTFStatusReportEvent() {
        return dVRTFStatusReport_;
    }
    DVRStatusReportSomeIPProxy::DVREventReportEvent& DVRStatusReportSomeIPProxy::getDVREventReportEvent() {
        return dVREventReport_;
    }
    DVRStatusReportSomeIPProxy::ExportOperationProgressReportEvent& DVRStatusReportSomeIPProxy::getExportOperationProgressReportEvent() {
        return exportOperationProgressReport_;
    }

        void DVRStatusReportSomeIPProxy::DVRContinuousCapture(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::CaptureNumber &_CaptureNumber, const DVRStatusReport::CaptureInterval &_CaptureInterval, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_ContinuousCaptureACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::CaptureNumber, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_CaptureNumber(_CaptureNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::CaptureInterval, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_CaptureInterval(_CaptureInterval, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_ContinuousCaptureACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::CaptureNumber,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::CaptureInterval,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_AccessType, deploy_CaptureNumber, deploy_CaptureInterval,
    _internalCallStatus,
    deploy_ContinuousCaptureACK);
    _ContinuousCaptureACK = deploy_ContinuousCaptureACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::DVRContinuousCaptureAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::CaptureNumber &_CaptureNumber, const DVRStatusReport::CaptureInterval &_CaptureInterval, DVRContinuousCaptureAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::CaptureNumber, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_CaptureNumber(_CaptureNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::CaptureInterval, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_CaptureInterval(_CaptureInterval, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_ContinuousCaptureACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::CaptureNumber,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::CaptureInterval,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_AccessType, deploy_CaptureNumber, deploy_CaptureInterval,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t > _ContinuousCaptureACK) {
                if (_callback)
                    _callback(_internalCallStatus, _ContinuousCaptureACK.getValue());
            },
            std::make_tuple(deploy_ContinuousCaptureACK));
    }
        void DVRStatusReportSomeIPProxy::DVRStatusReportACK(const DVRStatusReport::SetResult &_StatusReportACK, CommonAPI::CallStatus &_internalCallStatus) {
            CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_StatusReportACK(_StatusReportACK, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethod(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
    deploy_StatusReportACK,
    _internalCallStatus);
    }
        void DVRStatusReportSomeIPProxy::DVRTimelapseVideoTape(const DVRStatusReport::TimelapseVideoInterval &_TimelapseVideoInterval, const DVRStatusReport::TimelapseVideoTotalFrameNumber &_TimelapseVideoTotalFrameNumber, const DVRStatusReport::DVRTimelapseVideoPlayFrameNumber &_DVRTimelapseVideoPlayFrameNumber, const DVRStatusReport::AccessType &_AccessType, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_TimelapseVideoTapeACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::TimelapseVideoInterval, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_TimelapseVideoInterval(_TimelapseVideoInterval, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::TimelapseVideoTotalFrameNumber, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_TimelapseVideoTotalFrameNumber(_TimelapseVideoTotalFrameNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::DVRTimelapseVideoPlayFrameNumber, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_DVRTimelapseVideoPlayFrameNumber(_DVRTimelapseVideoPlayFrameNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_TimelapseVideoTapeACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::TimelapseVideoInterval,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::TimelapseVideoTotalFrameNumber,
                        CommonAPI::SomeIP::IntegerDeployment<uint16_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::DVRTimelapseVideoPlayFrameNumber,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_TimelapseVideoInterval, deploy_TimelapseVideoTotalFrameNumber, deploy_DVRTimelapseVideoPlayFrameNumber, deploy_AccessType,
    _internalCallStatus,
    deploy_TimelapseVideoTapeACK);
    _TimelapseVideoTapeACK = deploy_TimelapseVideoTapeACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::DVRTimelapseVideoTapeAsync(const DVRStatusReport::TimelapseVideoInterval &_TimelapseVideoInterval, const DVRStatusReport::TimelapseVideoTotalFrameNumber &_TimelapseVideoTotalFrameNumber, const DVRStatusReport::DVRTimelapseVideoPlayFrameNumber &_DVRTimelapseVideoPlayFrameNumber, const DVRStatusReport::AccessType &_AccessType, DVRTimelapseVideoTapeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::TimelapseVideoInterval, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_TimelapseVideoInterval(_TimelapseVideoInterval, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::TimelapseVideoTotalFrameNumber, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_TimelapseVideoTotalFrameNumber(_TimelapseVideoTotalFrameNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::DVRTimelapseVideoPlayFrameNumber, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_DVRTimelapseVideoPlayFrameNumber(_DVRTimelapseVideoPlayFrameNumber, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_TimelapseVideoTapeACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::TimelapseVideoInterval,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::TimelapseVideoTotalFrameNumber,
                    CommonAPI::SomeIP::IntegerDeployment<uint16_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::DVRTimelapseVideoPlayFrameNumber,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_TimelapseVideoInterval, deploy_TimelapseVideoTotalFrameNumber, deploy_DVRTimelapseVideoPlayFrameNumber, deploy_AccessType,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t > _TimelapseVideoTapeACK) {
                if (_callback)
                    _callback(_internalCallStatus, _TimelapseVideoTapeACK.getValue());
            },
            std::make_tuple(deploy_TimelapseVideoTapeACK));
    }
        void DVRStatusReportSomeIPProxy::DVRManualOperation(const DVRStatusReport::ManualOperation &_ManualOperation, const DVRStatusReport::AccessType &_AccessType, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_ManualOperationACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::ManualOperation, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t> deploy_ManualOperation(_ManualOperation, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_ManualOperationACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::ManualOperation,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_ManualOperation, deploy_AccessType,
    _internalCallStatus,
    deploy_ManualOperationACK);
    _ManualOperationACK = deploy_ManualOperationACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::DVRManualOperationAsync(const DVRStatusReport::ManualOperation &_ManualOperation, const DVRStatusReport::AccessType &_AccessType, DVRManualOperationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::ManualOperation, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t> deploy_ManualOperation(_ManualOperation, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_ManualOperationACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::ManualOperation,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::ManualOperationDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_ManualOperation, deploy_AccessType,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t > _ManualOperationACK) {
                if (_callback)
                    _callback(_internalCallStatus, _ManualOperationACK.getValue());
            },
            std::make_tuple(deploy_ManualOperationACK));
    }
        void DVRStatusReportSomeIPProxy::StopShortVideoRecording(const DVRStatusReport::AccessType &_VideoRecordingChannel, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_VideoRecordingACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_VideoRecordingChannel(_VideoRecordingChannel, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_VideoRecordingACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_VideoRecordingChannel,
    _internalCallStatus,
    deploy_VideoRecordingACK);
    _VideoRecordingACK = deploy_VideoRecordingACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::StopShortVideoRecordingAsync(const DVRStatusReport::AccessType &_VideoRecordingChannel, StopShortVideoRecordingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_VideoRecordingChannel(_VideoRecordingChannel, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_VideoRecordingACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_VideoRecordingChannel,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t > _VideoRecordingACK) {
                if (_callback)
                    _callback(_internalCallStatus, _VideoRecordingACK.getValue());
            },
            std::make_tuple(deploy_VideoRecordingACK));
    }
        void DVRStatusReportSomeIPProxy::PictureTransferRequest(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::EventTime, CommonAPI::SomeIP::StringDeployment> deploy_EventTime(_EventTime, &::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::PictureTransferRequest_EventTimeDeployment);
            CommonAPI::Deployable< DVRStatusReport::EventType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t> deploy_EventType(_EventType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::FileID, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileID(_FileID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::FileSize, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileSize(_FileSize, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::FileContentArray, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t> deploy_FileContentArray(_FileContentArray, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t> deploy_OMCCaptureFaileCode(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::EventTime,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::EventType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::FileID,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::FileSize,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::FileContentArray,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::OMCCaptureFaileCode,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xb),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_EventTime, deploy_EventType, deploy_AccessType, deploy_FileID, deploy_FileSize, deploy_FileContentArray,
    _internalCallStatus,
    deploy_OMCCaptureFaileCode);
    _OMCCaptureFaileCode = deploy_OMCCaptureFaileCode.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::PictureTransferRequestAsync(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, PictureTransferRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::EventTime, CommonAPI::SomeIP::StringDeployment> deploy_EventTime(_EventTime, &::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::PictureTransferRequest_EventTimeDeployment);
        CommonAPI::Deployable< DVRStatusReport::EventType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t> deploy_EventType(_EventType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::FileID, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileID(_FileID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::FileSize, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileSize(_FileSize, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::FileContentArray, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t> deploy_FileContentArray(_FileContentArray, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t> deploy_OMCCaptureFaileCode(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::EventTime,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::EventType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::FileID,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::FileSize,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::FileContentArray,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::OMCCaptureFaileCode,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xb),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_EventTime, deploy_EventType, deploy_AccessType, deploy_FileID, deploy_FileSize, deploy_FileContentArray,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t > _OMCCaptureFaileCode) {
                if (_callback)
                    _callback(_internalCallStatus, _OMCCaptureFaileCode.getValue());
            },
            std::make_tuple(deploy_OMCCaptureFaileCode));
    }
        void DVRStatusReportSomeIPProxy::CaringMode(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::TotalCareTime &_TotalCareTime, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_CaringModeACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::TotalCareTime, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_TotalCareTime(_TotalCareTime, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_CaringModeACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::TotalCareTime,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_AccessType, deploy_TotalCareTime,
    _internalCallStatus,
    deploy_CaringModeACK);
    _CaringModeACK = deploy_CaringModeACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::CaringModeAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::TotalCareTime &_TotalCareTime, CaringModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::TotalCareTime, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_TotalCareTime(_TotalCareTime, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_CaringModeACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::TotalCareTime,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_AccessType, deploy_TotalCareTime,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t > _CaringModeACK) {
                if (_callback)
                    _callback(_internalCallStatus, _CaringModeACK.getValue());
            },
            std::make_tuple(deploy_CaringModeACK));
    }
        void DVRStatusReportSomeIPProxy::OMCThemePictureResult(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::ThemePictureID &_ThemePictureID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::ThemePictureID, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_ThemePictureID(_ThemePictureID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::FileSize, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileSize(_FileSize, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::FileContentArray, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t> deploy_FileContentArray(_FileContentArray, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t> deploy_OMCCaptureFaileCode(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::ThemePictureID,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::FileSize,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::FileContentArray,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::OMCCaptureFaileCode,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xc),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_AccessType, deploy_ThemePictureID, deploy_FileSize, deploy_FileContentArray,
    _internalCallStatus,
    deploy_OMCCaptureFaileCode);
    _OMCCaptureFaileCode = deploy_OMCCaptureFaileCode.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::OMCThemePictureResultAsync(const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::ThemePictureID &_ThemePictureID, const DVRStatusReport::FileSize &_FileSize, const DVRStatusReport::FileContentArray &_FileContentArray, OMCThemePictureResultAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::ThemePictureID, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_ThemePictureID(_ThemePictureID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::FileSize, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileSize(_FileSize, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::FileContentArray, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t> deploy_FileContentArray(_FileContentArray, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t> deploy_OMCCaptureFaileCode(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::ThemePictureID,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::FileSize,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::FileContentArray,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::FileContentArrayDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::OMCCaptureFaileCode,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xc),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_AccessType, deploy_ThemePictureID, deploy_FileSize, deploy_FileContentArray,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t > _OMCCaptureFaileCode) {
                if (_callback)
                    _callback(_internalCallStatus, _OMCCaptureFaileCode.getValue());
            },
            std::make_tuple(deploy_OMCCaptureFaileCode));
    }
        void DVRStatusReportSomeIPProxy::OMCCaptureRequest(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::OMCCaptureFaileCode &_OMCCaptureFaileCode, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::EventTime, CommonAPI::SomeIP::StringDeployment> deploy_EventTime(_EventTime, &::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureRequest_EventTimeDeployment);
            CommonAPI::Deployable< DVRStatusReport::EventType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t> deploy_EventType(_EventType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::FileID, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileID(_FileID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::FileSize, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileSize(_FileSize, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t> deploy_OMCCaptureFaileCode(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::EventTime,
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::EventType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::FileID,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::FileSize,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::OMCCaptureFaileCode,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xa),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_EventTime, deploy_EventType, deploy_AccessType, deploy_FileID, deploy_FileSize,
    _internalCallStatus,
    deploy_OMCCaptureFaileCode);
    _OMCCaptureFaileCode = deploy_OMCCaptureFaileCode.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::OMCCaptureRequestAsync(const DVRStatusReport::EventTime &_EventTime, const DVRStatusReport::EventType &_EventType, const DVRStatusReport::AccessType &_AccessType, const DVRStatusReport::FileID &_FileID, const DVRStatusReport::FileSize &_FileSize, OMCCaptureRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::EventTime, CommonAPI::SomeIP::StringDeployment> deploy_EventTime(_EventTime, &::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureRequest_EventTimeDeployment);
        CommonAPI::Deployable< DVRStatusReport::EventType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t> deploy_EventType(_EventType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_AccessType(_AccessType, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::FileID, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileID(_FileID, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::FileSize, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FileSize(_FileSize, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t> deploy_OMCCaptureFaileCode(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::EventTime,
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::EventType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::EventTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::FileID,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::FileSize,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::OMCCaptureFaileCode,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xa),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_EventTime, deploy_EventType, deploy_AccessType, deploy_FileID, deploy_FileSize,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::OMCCaptureFaileCode, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::OMCCaptureFaileCodeDeployment_t > _OMCCaptureFaileCode) {
                if (_callback)
                    _callback(_internalCallStatus, _OMCCaptureFaileCode.getValue());
            },
            std::make_tuple(deploy_OMCCaptureFaileCode));
    }
        void DVRStatusReportSomeIPProxy::StartShortVideoRecording(const DVRStatusReport::AccessType &_VideoRecordingChannel, const DVRStatusReport::PreRecordingTime &_PreRecordingTime, const DVRStatusReport::TotalRecordingTime &_TotalRecordingTime, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::SetResult &_VideoRecordingACK, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_VideoRecordingChannel(_VideoRecordingChannel, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::PreRecordingTime, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PreRecordingTime(_PreRecordingTime, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::TotalRecordingTime, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_TotalRecordingTime(_TotalRecordingTime, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_VideoRecordingACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::AccessType,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::PreRecordingTime,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::TotalRecordingTime,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::SetResult,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_VideoRecordingChannel, deploy_PreRecordingTime, deploy_TotalRecordingTime,
    _internalCallStatus,
    deploy_VideoRecordingACK);
    _VideoRecordingACK = deploy_VideoRecordingACK.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::StartShortVideoRecordingAsync(const DVRStatusReport::AccessType &_VideoRecordingChannel, const DVRStatusReport::PreRecordingTime &_PreRecordingTime, const DVRStatusReport::TotalRecordingTime &_TotalRecordingTime, StartShortVideoRecordingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::AccessType, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t> deploy_VideoRecordingChannel(_VideoRecordingChannel, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::PreRecordingTime, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_PreRecordingTime(_PreRecordingTime, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::TotalRecordingTime, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_TotalRecordingTime(_TotalRecordingTime, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t> deploy_VideoRecordingACK(static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::AccessType,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::AccessTypeDeployment_t
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::PreRecordingTime,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::TotalRecordingTime,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::SetResult,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_VideoRecordingChannel, deploy_PreRecordingTime, deploy_TotalRecordingTime,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::SetResult, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::SetResultDeployment_t > _VideoRecordingACK) {
                if (_callback)
                    _callback(_internalCallStatus, _VideoRecordingACK.getValue());
            },
            std::make_tuple(deploy_VideoRecordingACK));
    }
        void DVRStatusReportSomeIPProxy::TFCardExportCapacityQuery(const DVRStatusReport::TFCardOption &_TFCardOption, CommonAPI::CallStatus &_internalCallStatus, DVRStatusReport::TotalExportCapacity &_TotalExportCapacity, DVRStatusReport::FreeExportCapacity &_FreeExportCapacity, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< DVRStatusReport::TFCardOption, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t> deploy_TFCardOption(_TFCardOption, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::TotalExportCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_TotalExportCapacity(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< DVRStatusReport::FreeExportCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FreeExportCapacity(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::TFCardOption,
                        ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        DVRStatusReport::TotalExportCapacity,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >,
                    CommonAPI::Deployable<
                        DVRStatusReport::FreeExportCapacity,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x8),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_TFCardOption,
    _internalCallStatus,
    deploy_TotalExportCapacity, deploy_FreeExportCapacity);
    _TotalExportCapacity = deploy_TotalExportCapacity.getValue();
    _FreeExportCapacity = deploy_FreeExportCapacity.getValue();
    }
    std::future<CommonAPI::CallStatus> DVRStatusReportSomeIPProxy::TFCardExportCapacityQueryAsync(const DVRStatusReport::TFCardOption &_TFCardOption, TFCardExportCapacityQueryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< DVRStatusReport::TFCardOption, ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t> deploy_TFCardOption(_TFCardOption, static_cast< ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::TotalExportCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_TotalExportCapacity(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< DVRStatusReport::FreeExportCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_FreeExportCapacity(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::TFCardOption,
                    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport_::TFCardOptionDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    DVRStatusReport::TotalExportCapacity,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >,
                CommonAPI::Deployable<
                    DVRStatusReport::FreeExportCapacity,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x8),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_TFCardOption,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< DVRStatusReport::TotalExportCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _TotalExportCapacity, CommonAPI::Deployable< DVRStatusReport::FreeExportCapacity, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _FreeExportCapacity) {
                if (_callback)
                    _callback(_internalCallStatus, _TotalExportCapacity.getValue(), _FreeExportCapacity.getValue());
            },
            std::make_tuple(deploy_TotalExportCapacity, deploy_FreeExportCapacity));
    }



    void DVRStatusReportSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1
