/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002200719.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_GREATWALL_DVR_VIMS_DVR_Status_Report_STUB_DEFAULT_HPP_
#define V1_GREATWALL_DVR_VIMS_DVR_Status_Report_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/GREATWALL/DVR_VIMS/DVRStatusReportStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace GREATWALL {
namespace DVR_VIMS {

/**
 * Provides a default implementation for DVRStatusReportStubRemoteEvent and
 * DVRStatusReportStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT DVRStatusReportStubDefault
    : public virtual DVRStatusReportStub {
public:
    COMMONAPI_EXPORT DVRStatusReportStubDefault();

    COMMONAPI_EXPORT DVRStatusReportStubRemoteEvent* initStubAdapter(const std::shared_ptr< DVRStatusReportStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct& getDVRSensorStatusReportAttribute();
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct& getDVRSensorStatusReportAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setDVRSensorStatusReportAttribute(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct _value);
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus& getDVRSystemStatusReportAttribute();
    COMMONAPI_EXPORT virtual const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus& getDVRSystemStatusReportAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setDVRSystemStatusReportAttribute(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus _value);

    COMMONAPI_EXPORT virtual void DVRContinuousCapture(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::CaptureNumber _CaptureNumber, DVRStatusReport::CaptureInterval _CaptureInterval, DVRContinuousCaptureReply_t _reply);
    COMMONAPI_EXPORT virtual void DVRStatusReportACK(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::SetResult _StatusReportACK);
    COMMONAPI_EXPORT virtual void DVRTimelapseVideoTape(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::TimelapseVideoInterval _TimelapseVideoInterval, DVRStatusReport::TimelapseVideoTotalFrameNumber _TimelapseVideoTotalFrameNumber, DVRStatusReport::DVRTimelapseVideoPlayFrameNumber _DVRTimelapseVideoPlayFrameNumber, DVRStatusReport::AccessType _AccessType, DVRTimelapseVideoTapeReply_t _reply);
    COMMONAPI_EXPORT virtual void DVRManualOperation(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::ManualOperation _ManualOperation, DVRStatusReport::AccessType _AccessType, DVRManualOperationReply_t _reply);
    COMMONAPI_EXPORT virtual void StopShortVideoRecording(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _VideoRecordingChannel, StopShortVideoRecordingReply_t _reply);
    COMMONAPI_EXPORT virtual void PictureTransferRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::EventTime _EventTime, DVRStatusReport::EventType _EventType, DVRStatusReport::AccessType _AccessType, DVRStatusReport::FileID _FileID, DVRStatusReport::FileSize _FileSize, DVRStatusReport::FileContentArray _FileContentArray, PictureTransferRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void CaringMode(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::TotalCareTime _TotalCareTime, CaringModeReply_t _reply);
    COMMONAPI_EXPORT virtual void OMCThemePictureResult(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _AccessType, DVRStatusReport::ThemePictureID _ThemePictureID, DVRStatusReport::FileSize _FileSize, DVRStatusReport::FileContentArray _FileContentArray, OMCThemePictureResultReply_t _reply);
    COMMONAPI_EXPORT virtual void OMCCaptureRequest(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::EventTime _EventTime, DVRStatusReport::EventType _EventType, DVRStatusReport::AccessType _AccessType, DVRStatusReport::FileID _FileID, DVRStatusReport::FileSize _FileSize, OMCCaptureRequestReply_t _reply);
    COMMONAPI_EXPORT virtual void StartShortVideoRecording(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::AccessType _VideoRecordingChannel, DVRStatusReport::PreRecordingTime _PreRecordingTime, DVRStatusReport::TotalRecordingTime _TotalRecordingTime, StartShortVideoRecordingReply_t _reply);
    COMMONAPI_EXPORT virtual void TFCardExportCapacityQuery(const std::shared_ptr<CommonAPI::ClientId> _client, DVRStatusReport::TFCardOption _TFCardOption, TFCardExportCapacityQueryReply_t _reply);

    COMMONAPI_EXPORT virtual void fireDVREMMCStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCStatus &_EMMCStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EMMCCapacityStruct &_EMMCCapacityStruct);
    COMMONAPI_EXPORT virtual void fireOMCThemePictureReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThemePictureID &_ThemePictureID);
    COMMONAPI_EXPORT virtual void fireAsyncDeleteOperationProgressEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress &_DeleteProgress);
    COMMONAPI_EXPORT virtual void fireEventOperationReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventOperationType &_EventOperationType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType &_EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType);
    COMMONAPI_EXPORT virtual void fireDVRTFStatusReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardOption &_TFCardOption, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardStatus &_TFCardStatus, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TFCardCapacity &_TFCardCapacity);
    COMMONAPI_EXPORT virtual void fireDVREventReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventTime &_EventTime, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::EventType &_EventType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::AccessType &_AccessType, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::FilePath &_FilePath, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ThumbnailPath &_ThumbnailPath);
    COMMONAPI_EXPORT virtual void fireExportOperationProgressReportEvent(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::ExportFileInfoStruct &_ExportFileInfoStruct, const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::TotalTransProgress &_TotalTransProgress);

    
protected:
    COMMONAPI_EXPORT virtual bool trySetDVRSensorStatusReportAttribute(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct _value);
    COMMONAPI_EXPORT virtual bool validateDVRSensorStatusReportAttributeRequestedValue(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct &_value);
    COMMONAPI_EXPORT virtual bool trySetDVRSystemStatusReportAttribute(::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus _value);
    COMMONAPI_EXPORT virtual bool validateDVRSystemStatusReportAttributeRequestedValue(const ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus &_value);
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual DVRStatusReportStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(DVRStatusReportStubDefault *_defaultStub);




    private:
        DVRStatusReportStubDefault *defaultStub_;
    };
protected:
    DVRStatusReportStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSensorStatusStruct dVRSensorStatusReportAttributeValue_ {};
    ::v1::GREATWALL::DVR_VIMS::DVRStatusReport::DVRSystemStatus dVRSystemStatusReportAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace DVR_VIMS
} // namespace GREATWALL
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_GREATWALL_DVR_VIMS_DVR_Status_Report_STUB_DEFAULT
